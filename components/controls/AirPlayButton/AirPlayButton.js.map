{"version":3,"sources":["../../../src/replay/components/controls/AirPlayButton/AirPlayButton.js"],"names":["className","AirPlayButton","React","Component","props","setProperties","isAirPlayTargetPickerVisible","render","isAirPlayAvailable","isAirPlayActive","airPlayActiveContent","airPlayInactiveContent","label","classNamePrefix","handleToggle","defaultClassNamePrefix","displayName"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AAiBA,MAAMA,SAAS,GAAG,gBAAlB;;AAEA,MAAMC,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAAmD;AAAA;AAAA;;AAAA,0CAOlC,MAAM;AACnB,UAAI,KAAKC,KAAL,CAAWC,aAAf,EAA8B;AAC5B,aAAKD,KAAL,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,4BAA4B,EAAE;AAAhC,SAAzB;AACD;AACF,KAXgD;AAAA;;AAajDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKH,KAAL,CAAWI,kBAAf,EAAmC;AAAA,0BACiE,KAAKJ,KADtE;AAAA,YACzBK,eADyB,eACzBA,eADyB;AAAA,YACRC,oBADQ,eACRA,oBADQ;AAAA,YACcC,sBADd,eACcA,sBADd;AAAA,YACsCC,KADtC,eACsCA,KADtC;AAAA,YAC6CC,eAD7C,eAC6CA,eAD7C;AAEjC,0BACE,oBAAC,qBAAD;AACE,QAAA,eAAe,EAAEA,eADnB;AAEE,QAAA,IAAI,EAAEJ,eAFR;AAGE,QAAA,SAAS,EAAET,SAHb;AAIE,QAAA,KAAK,EAAEY,KAJT;AAKE,QAAA,QAAQ,EAAE,KAAKE,YALjB;AAME,QAAA,gBAAgB,EAAEJ,oBANpB;AAOE,QAAA,iBAAiB,EAAEC;AAPrB,QADF;AAWD,KAbD,MAaO;AACL,aAAO,IAAP;AACD;AACF;;AA9BgD;;gBAA7CV,a,kBACkB;AACpBY,EAAAA,eAAe,EAAEE;AADG,C;;gBADlBd,a,mCAKkE,CAAC,oBAAD,EAAuB,iBAAvB,C;;AA4BxEA,aAAa,CAACe,WAAd,GAA4B,eAA5B;eACef,a","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** If true, this button will be rendered. */\n  isAirPlayAvailable?: boolean,\n  /** The current AirPlay state, as reported from a video streamer. */\n  isAirPlayActive?: boolean,\n  /** Intended for the setProperties method passed from the player controller through connectControl(). When the button is clicked, this callback is invoked with an object having an isAirPlayTargetPickerVisible property equal to true. */\n  setProperties?: ({ isAirPlayTargetPickerVisible: true }) => void,\n  /** The button content to be displayed while isAirPlayActive is true. */\n  airPlayActiveContent: React.Node,\n  /** The button content to be displayed while isAirPlayActive is false. */\n  airPlayInactiveContent: React.Node\n};\n\nconst className = 'airplay-button';\n\nclass AirPlayButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['isAirPlayAvailable', 'isAirPlayActive'];\n\n  handleToggle = () => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ isAirPlayTargetPickerVisible: true });\n    }\n  };\n\n  render() {\n    if (this.props.isAirPlayAvailable) {\n      const { isAirPlayActive, airPlayActiveContent, airPlayInactiveContent, label, classNamePrefix } = this.props;\n      return (\n        <ToggleButton\n          classNamePrefix={classNamePrefix}\n          isOn={isAirPlayActive}\n          className={className}\n          label={label}\n          onToggle={this.handleToggle}\n          toggledOnContent={airPlayActiveContent}\n          toggledOffContent={airPlayInactiveContent}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nAirPlayButton.displayName = 'AirPlayButton';\nexport default AirPlayButton;\n"],"file":"AirPlayButton.js"}