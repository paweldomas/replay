{"version":3,"sources":["../../../src/replay/components/controls/AudioSelector/AudioSelector.js"],"names":["className","buildId","str","filter","s","join","buildLabel","label","kind","language","audioTrackToItem","track","id","data","AudioSelector","React","Component","item","props","setProperties","selectedAudioTrack","render","audioTracks","currentAudioTrack","toggleContent","classNamePrefix","Array","isArray","length","selectedItem","selectedIndex","indexOf","handleSelect","defaultClassNamePrefix","displayName"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AAgBA,MAAMA,SAAS,GAAG,gBAAlB;;AAEA,MAAMC,OAAO,GAAG,CAAC,GAAGC,GAAJ,KAA4BA,GAAG,CAACC,MAAJ,CAAWC,CAAC,IAAIA,CAAhB,EAAmBC,IAAnB,CAAwB,GAAxB,CAA5C;;AACA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAI,GAAG,EAAhB;AAAoBC,EAAAA,QAAQ,GAAG;AAA/B,CAAD,KACjBF,KAAK,KAAKC,IAAI,cAAOC,QAAP,eAAoBD,IAApB,eAAiCC,QAAjC,MAAT,CADP;;AAGA,MAAMC,gBAAgB,GAAIC,KAAD,IAA2B;AAClD,SAAO;AAAEC,IAAAA,EAAE,EAAED,KAAK,CAACC,EAAN,IAAYX,OAAO,CAACU,KAAK,CAACF,QAAP,EAAiBE,KAAK,CAACJ,KAAvB,CAAnB,IAAoDI,KAAK,CAACJ,KAAhE;AAAuEA,IAAAA,KAAK,EAAED,UAAU,CAACK,KAAD,CAAxF;AAAiGE,IAAAA,IAAI,EAAEF;AAAvG,GAAP;AACD,CAFD;;AAIA,MAAMG,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAAmD;AAAA;AAAA;;AAAA,0CAOjCC,IAAD,IAAe;AAC5B,UAAI,KAAKC,KAAL,CAAWC,aAAf,EAA8B;AAC5B,aAAKD,KAAL,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,kBAAkB,EAAEH;AAAtB,SAAzB;AACD;AACF,KAXgD;AAAA;;AAajDI,EAAAA,MAAM,GAAG;AAAA,wBAC2E,KAAKH,KADhF;AAAA,UACCI,WADD,eACCA,WADD;AAAA,UACcC,iBADd,eACcA,iBADd;AAAA,UACiChB,KADjC,eACiCA,KADjC;AAAA,UACwCiB,aADxC,eACwCA,aADxC;AAAA,UACuDC,eADvD,eACuDA,eADvD;;AAEP,QAAIC,KAAK,CAACC,OAAN,CAAcL,WAAd,KAA8BA,WAAW,CAACM,MAAZ,GAAqB,CAAvD,EAA0D;AACxD;AACA,UAAIC,YAAY,GAAGP,WAAW,CAAC,CAAD,CAA9B;;AACA,UAAIC,iBAAJ,EAAuB;AACrB,cAAMO,aAAa,GAAGR,WAAW,CAACS,OAAZ,CAAoBR,iBAApB,CAAtB;;AACA,YAAIO,aAAa,IAAI,CAArB,EAAwB;AACtBD,UAAAA,YAAY,GAAGP,WAAW,CAACQ,aAAD,CAA1B,CADsB,CACqB;AAC5C;AACF;;AACD,0BACE,oBAAC,iBAAD;AACE,QAAA,KAAK,EAAER,WADT;AAEE,QAAA,UAAU,EAAEZ,gBAFd;AAGE,QAAA,eAAe,EAAEe,eAHnB;AAIE,QAAA,SAAS,EAAEzB,SAJb;AAKE,QAAA,YAAY,EAAE6B,YALhB;AAME,QAAA,KAAK,EAAEtB,KANT;AAOE,QAAA,QAAQ,EAAE,KAAKyB,YAPjB;AAQE,QAAA,YAAY,EAAE,IARhB;AASE,QAAA,qBAAqB,EAAER,aATzB;AAUE,QAAA,sBAAsB,EAAEA;AAV1B,QADF;AAcD,KAvBD,MAuBO;AACL,aAAO,IAAP;AACD;AACF;;AAzCgD;;gBAA7CV,a,kBACkB;AACpBW,EAAAA,eAAe,EAAEQ;AADG,C;;gBADlBnB,a,mCAKkE,CAAC,aAAD,EAAgB,mBAAhB,C;;AAuCxEA,aAAa,CAACoB,WAAd,GAA4B,eAA5B;eACepB,a","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Selector from '../../generic/Selector/Selector';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { AvailableTrack } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The list of audio tracks available for selection. */\n  audioTracks?: Array<AvailableTrack>,\n  /** ⇘ The currently playing audio track (if known). Must be strict equal one of the items in the audio track list, or null. */\n  currentAudioTrack?: AvailableTrack,\n  /** ⇗ When one item is clicked, this callback is invoked with an object having an selectedAudioTrack property with the audioTrack object corresponding to the selection. */\n  setProperties?: ({ selectedAudioTrack: AvailableTrack }) => void,\n  /** Element displayed in the control bar for expanding/collapsing the selector items. */\n  toggleContent: React.Node\n};\n\nconst className = 'audio-selector';\n\nconst buildId = (...str: Array<?string>) => str.filter(s => s).join('.');\nconst buildLabel = ({ label, kind = '', language = 'unknown' }: AvailableTrack) =>\n  label || (kind ? `[${language}] ${kind}` : `[${language}]`);\n\nconst audioTrackToItem = (track: AvailableTrack) => {\n  return { id: track.id || buildId(track.language, track.label) || track.label, label: buildLabel(track), data: track };\n};\n\nclass AudioSelector extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['audioTracks', 'currentAudioTrack'];\n\n  handleSelect = (item: any) => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ selectedAudioTrack: item });\n    }\n  };\n\n  render() {\n    const { audioTracks, currentAudioTrack, label, toggleContent, classNamePrefix } = this.props;\n    if (Array.isArray(audioTracks) && audioTracks.length > 1) {\n      // TODO: Consider optimization, memoizing the array and all props involved in rendering.\n      let selectedItem = audioTracks[0];\n      if (currentAudioTrack) {\n        const selectedIndex = audioTracks.indexOf(currentAudioTrack);\n        if (selectedIndex >= 0) {\n          selectedItem = audioTracks[selectedIndex]; // Ugly construct, but leaving it for now.\n        }\n      }\n      return (\n        <Selector\n          items={audioTracks}\n          itemMapper={audioTrackToItem}\n          classNamePrefix={classNamePrefix}\n          className={className}\n          selectedItem={selectedItem}\n          label={label}\n          onSelect={this.handleSelect}\n          reverseOrder={true}\n          expandedToggleContent={toggleContent}\n          collapsedToggleContent={toggleContent}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nAudioSelector.displayName = 'AudioSelector';\nexport default AudioSelector;\n"],"file":"AudioSelector.js"}