{"version":3,"sources":["../../../src/replay/components/controls/BufferingIndicator/BufferingIndicator.js"],"names":["className","isActiveClassName","BufferingIndicator","children","content","isBuffering","isSeeking","playState","renderStrategy","label","classNamePrefix","defaultClassNamePrefix","isActive","streamStateKeysForObservation","displayName"],"mappings":";;;;;;;AACA;;AACA;;;;;;AAoBA,MAAMA,SAAS,GAAG,qBAAlB;AACA,MAAMC,iBAAiB,GAAG,WAA1B;;AAIA,MAAMC,kBAA0C,GAAG,CAAC;AAClDC,EAAAA,QADkD;AAElDC,EAAAA,OAFkD;AAGlDC,EAAAA,WAHkD;AAIlDC,EAAAA,SAJkD;AAKlDC,EAAAA,SALkD;AAMlDC,EAAAA,cAAc,GAAG,gBANiC;AAOlDC,EAAAA,KAPkD;AAQlDC,EAAAA,eAAe,GAAGC;AARgC,CAAD,KAStC;AACX,QAAMC,QAAQ,GACZP,WAAW,IAAIC,SAAf,IAA4BC,SAAS,KAAK,UAA1C,IAAwDA,SAAS,KAAK,WAAtE,IAAqFA,SAAS,KAAK,SADrG;;AAEA,MAAIC,cAAc,KAAK,QAAvB,EAAiC;AAC/B,QAAII,QAAJ,EAAc;AACZ,0BACE;AAAK,QAAA,KAAK,EAAEH,KAAZ;AAAmB,QAAA,SAAS,EAAE,8BAAiBC,eAAjB,EAAkCV,SAAlC,EAA6CC,iBAA7C;AAA9B,SACGE,QAAQ,IAAIC,OADf,CADF;AAKD,KAND,MAMO;AACL,0BAAO;AAAK,QAAA,SAAS,EAAE,8BAAiBM,eAAjB,EAAkCV,SAAlC;AAAhB,SAA+DG,QAAQ,IAAIC,OAA3E,CAAP;AACD;AACF,GAVD,MAUO;AACL,QAAIQ,QAAJ,EAAc;AACZ,0BACE;AAAK,QAAA,KAAK,EAAEH,KAAZ;AAAmB,QAAA,SAAS,EAAE,8BAAiBC,eAAjB,EAAkCV,SAAlC,EAA6CC,iBAA7C;AAA9B,SACGE,QAAQ,IAAIC,OADf,CADF;AAKD,KAND,MAMO;AACL,aAAO,IAAP;AACD;AACF;AACF,CAjCD;;AAmCAF,kBAAkB,CAACW,6BAAnB,GAAmD,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,CAAnD;AACAX,kBAAkB,CAACY,WAAnB,GAAiC,oBAAjC;eAEeZ,kB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix, prefixClassNames } from '../../common';\nimport type { PlayState } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { ObservingControlStaticProps } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ If true, the buffering indicator is shown or the root element has a class name indicating buffering. */\n  isBuffering?: boolean,\n  /** ⇘︎ If true, the buffering indicator is shown or the root element has a class name indicating buffering. */\n  isSeeking?: boolean,\n  /** ⇘︎ If set to 'starting', 'buffering', or 'seeking', the buffering indicator is shown or the root element has a class name indicating buffering. */\n  playState?: PlayState,\n  /** The content to show if buffering, or always if renderingStrategy is 'always'. */\n  children?: React.Node,\n  /** Alternative to specifying children. Other Replay controls use content as the convention. */\n  content?: React.Node,\n  /** When set to 'always', the content is always rendered, but buffering is indicated through a class name on the component's root element. This option is used when controlling display through CSS. */\n  renderStrategy?: 'when-buffering' | 'always'\n};\n\nconst className = 'buffering-indicator';\nconst isActiveClassName = 'buffering';\n\ntype BufferingIndicatorType = React.StatelessFunctionalComponent<Props> & ObservingControlStaticProps;\n\nconst BufferingIndicator: BufferingIndicatorType = ({\n  children,\n  content,\n  isBuffering,\n  isSeeking,\n  playState,\n  renderStrategy = 'when-buffering',\n  label,\n  classNamePrefix = defaultClassNamePrefix\n}: Props) => {\n  const isActive =\n    isBuffering || isSeeking || playState === 'starting' || playState === 'buffering' || playState === 'seeking';\n  if (renderStrategy === 'always') {\n    if (isActive) {\n      return (\n        <div title={label} className={prefixClassNames(classNamePrefix, className, isActiveClassName)}>\n          {children || content}\n        </div>\n      );\n    } else {\n      return <div className={prefixClassNames(classNamePrefix, className)}>{children || content}</div>;\n    }\n  } else {\n    if (isActive) {\n      return (\n        <div title={label} className={prefixClassNames(classNamePrefix, className, isActiveClassName)}>\n          {children || content}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n};\n\nBufferingIndicator.streamStateKeysForObservation = ['isBuffering', 'isSeeking', 'playState'];\nBufferingIndicator.displayName = 'BufferingIndicator';\n\nexport default BufferingIndicator;\n"],"file":"BufferingIndicator.js"}