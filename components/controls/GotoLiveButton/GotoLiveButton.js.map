{"version":3,"sources":["../../../src/replay/components/controls/GotoLiveButton/GotoLiveButton.js"],"names":["className","GotoLiveButton","React","Component","value","props","setProperties","isAtLiveEdge","render","playMode","isAtLiveEdgeContent","isNotAtLiveEdgeContent","label","classNamePrefix","handleToggle","defaultClassNamePrefix","displayName"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AAkBA,MAAMA,SAAS,GAAG,kBAAlB;;AAEA,MAAMC,cAAN,SAA6BC,KAAK,CAACC,SAAnC,CAAoD;AAAA;AAAA;;AAAA,0CAOlCC,KAAD,IAAoB;AACjC,UAAIA,KAAK,IAAI,KAAKC,KAAL,CAAWC,aAAxB,EAAuC;AACrC,aAAKD,KAAL,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAAzB;AACD;AACF,KAXiD;AAAA;;AAalDC,EAAAA,MAAM,GAAG;AAAA,wBACiG,KAAKH,KADtG;AAAA,UACCI,QADD,eACCA,QADD;AAAA,UACWF,YADX,eACWA,YADX;AAAA,UACyBG,mBADzB,eACyBA,mBADzB;AAAA,UAC8CC,sBAD9C,eAC8CA,sBAD9C;AAAA,UACsEC,KADtE,eACsEA,KADtE;AAAA,UAC6EC,eAD7E,eAC6EA,eAD7E;AAEP,WAAOJ,QAAQ,KAAK,SAAb,gBACL,oBAAC,qBAAD;AACE,MAAA,eAAe,EAAEI,eADnB;AAEE,MAAA,IAAI,EAAEN,YAFR;AAGE,MAAA,SAAS,EAAEP,SAHb;AAIE,MAAA,KAAK,EAAEY,KAJT;AAKE,MAAA,QAAQ,EAAE,KAAKE,YALjB;AAME,MAAA,gBAAgB,EAAEJ,mBANpB;AAOE,MAAA,iBAAiB,EAAEC;AAPrB,MADK,GAUH,IAVJ;AAWD;;AA1BiD;;gBAA9CV,c,kBACkB;AACpBY,EAAAA,eAAe,EAAEE;AADG,C;;gBADlBd,c,mCAKkE,CAAC,cAAD,EAAiB,UAAjB,C;;AAwBxEA,cAAc,CAACe,WAAf,GAA6B,gBAA7B;eACef,c","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { PlayMode } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The current timeshift state of the playback. False means timeshifting. */\n  isAtLiveEdge?: boolean,\n  /** ⇘︎ The stream mode. Must be 'livedvr' in order for this control to render. */\n  playMode?: PlayMode,\n  /** ⇗ When the button is clicked, and the isAtLiveEdge prop is false, this callback is invoked with an object containing an isAtLiveEdge property with the value true. */\n  setProperties?: ({ isAtLiveEdge: true }) => void,\n  /** The button content to be displayed while isAtLiveEdge is true. */\n  isAtLiveEdgeContent: React.Node,\n  /** The button content to be displayed while isAtLiveEdge is false, i.e. when timeshifting. */\n  isNotAtLiveEdgeContent: React.Node\n};\n\nconst className = 'goto-live-button';\n\nclass GotoLiveButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['isAtLiveEdge', 'playMode'];\n\n  handleToggle = (value: boolean) => {\n    if (value && this.props.setProperties) {\n      this.props.setProperties({ isAtLiveEdge: true });\n    }\n  };\n\n  render() {\n    const { playMode, isAtLiveEdge, isAtLiveEdgeContent, isNotAtLiveEdgeContent, label, classNamePrefix } = this.props;\n    return playMode === 'livedvr' ? (\n      <ToggleButton\n        classNamePrefix={classNamePrefix}\n        isOn={isAtLiveEdge}\n        className={className}\n        label={label}\n        onToggle={this.handleToggle}\n        toggledOnContent={isAtLiveEdgeContent}\n        toggledOffContent={isNotAtLiveEdgeContent}\n      />\n    ) : null;\n  }\n}\n\nGotoLiveButton.displayName = 'GotoLiveButton';\nexport default GotoLiveButton;\n"],"file":"GotoLiveButton.js"}