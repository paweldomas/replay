{"version":3,"sources":["../../../src/replay/components/controls/PlaybackMonitor/PlaybackMonitor.js"],"names":["orderedPropertyNames","className","tableClassName","headerRowClassName","propNameClassName","currentValueClassName","previousValueClassName","closeButtonClassName","headerClassName","versionClassName","closeButtonLabel","formatValue","val","Date","isNaN","getTime","toString","toISOString","toFixed","Error","parts","message","push","code","severity","join","Array","isArray","map","JSON","stringify","replace","PropTableRow","React","Component","constructor","props","state","currentValue","inspect","propertyName","getDerivedStateFromProps","nextProps","prevState","previousValue","render","prefixedClassNames","formattedCurrentValue","formattedPreviousValue","propName","connectedComponents","forEach","getVisibleFromConfig","configuration","playbackMonitor","visibleAtStart","renderTableRows","classNamePrefix","headerRow","concat","ConnectedPropRow","TableHeaderRow","PlaybackMonitor","setState","isMonitorVisible","keyboardEvent","ctrlKey","altKey","componentDidMount","document","addEventListener","handleKeyDown","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","prevContext","prevVisible","label","closeButtonContent","handleCloseClick","replayVersion","defaultClassNamePrefix","displayName"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport type { CommonProps } from '../../common';\nimport type { VideoStreamState } from '../../player/VideoStreamer/types';\nimport { defaultClassNamePrefix, isDifferent, prefixClassNames } from '../../common';\nimport Button from '../../generic/Button/Button';\nimport connectControl from '../../player/PlayerController/connectControl';\nimport type { InspectMethod } from '../../player/PlayerController/ControllerContext';\nimport replayVersion from '../../../version';\n\nexport type PlaybackMonitorConfiguration = {\n  visibleAtStart?: boolean\n};\n\ntype Props = CommonProps & {\n  /** Optional object containing the property playbackMonitor: { visibleAtStart: true } in order to display it immediately. */\n  configuration?: {\n    playbackMonitor?: PlaybackMonitorConfiguration\n  },\n  /** The content of the overlay's close button. */\n  closeButtonContent: ?React.Node\n};\n\ntype State = {\n  isMonitorVisible: boolean\n};\n\ntype PrefixedClassNames = {\n  propName: string,\n  currentValue: string,\n  previousValue: string,\n  headerRow: string\n};\n\ntype TableRowProps = VideoStreamState & {\n  propertyName: string,\n  inspect: InspectMethod,\n  prefixedClassNames: PrefixedClassNames\n};\n\ntype TableRowState = {\n  currentValue: any,\n  previousValue?: any\n};\n\nconst orderedPropertyNames = [\n  'playMode',\n  'playState',\n  'isPaused',\n  'isBuffering',\n  'isSeeking',\n  'position',\n  'duration',\n  'absolutePosition',\n  'absoluteStartPosition',\n  'isAtLiveEdge',\n  'isPipAvailable',\n  'isPipActive',\n  'isAirPlayAvailable',\n  'isAirPlayActive',\n  'bufferedAhead',\n  'bitrateFix',\n  'bitrateCap',\n  'currentBitrate',\n  'bitrates',\n  'currentTextTrack',\n  'textTracks',\n  'currentAudioTrack',\n  'audioTracks',\n  'volume',\n  'isMuted',\n  'error'\n];\n\nconst className = 'playback-monitor';\nconst tableClassName = 'playback-monitor-stream-state';\nconst headerRowClassName = 'playback-monitor-table-header';\nconst propNameClassName = 'playback-monitor-property-name';\nconst currentValueClassName = 'playback-monitor-current-value';\nconst previousValueClassName = 'playback-monitor-previous-value';\nconst closeButtonClassName = 'playback-monitor-close-button';\nconst headerClassName = 'playback-monitor-header';\nconst versionClassName = 'playback-monitor-version';\n\nconst closeButtonLabel = 'Close';\n\nconst formatValue = (val: any): string => {\n  if (val instanceof Date) {\n    if (isNaN(val.getTime())) {\n      return val.toString();\n    } else {\n      return val.toISOString();\n    }\n  } else if (typeof val === 'number') {\n    if (val % 1 !== 0) {\n      return val.toFixed(2);\n    } else {\n      return val;\n    }\n  } else if (typeof val === 'function') {\n    return 'function :-o';\n  } else if (val instanceof Error) {\n    const parts = [];\n    if (val.message) {\n      parts.push(`message: '${val.message}'`);\n    }\n    if (val.code) {\n      parts.push(`code: '${val.code}'`);\n    }\n    if (val.severity) {\n      parts.push(`severity: '${val.severity}'`);\n    }\n    return `{${parts.join(',')}}`;\n  } else if (Array.isArray(val)) {\n    return '[' + val.map(formatValue).join(',') + ']';\n  } else if (typeof val === 'boolean') {\n    return val.toString();\n  } else if (typeof val === 'string') {\n    return val;\n  } else if (val) {\n    return JSON.stringify(val)\n      .replace(/(\")(([A-Z]|[a-z]|[0-9])+)(\")(:)/g, '$2$5')\n      .replace(/(handlers|props|methods|constants):\\{(.*?)},/g, '');\n  } else {\n    return val;\n  }\n};\n\nexport class PropTableRow extends React.Component<TableRowProps, TableRowState> {\n  constructor(props: TableRowProps) {\n    super(props);\n    this.state = {\n      currentValue: props.inspect()[props.propertyName]\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: TableRowProps, prevState: TableRowState) {\n    if (nextProps.propertyName in nextProps && isDifferent(nextProps[nextProps.propertyName], prevState.currentValue)) {\n      return {\n        currentValue: nextProps[nextProps.propertyName],\n        previousValue: prevState.currentValue\n      };\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const { prefixedClassNames, propertyName } = this.props;\n    const { currentValue, previousValue } = this.state;\n    const formattedCurrentValue = formatValue(currentValue);\n    const formattedPreviousValue = formatValue(previousValue);\n    return (\n      <tr>\n        <th title={propertyName} className={prefixedClassNames.propName}>\n          {propertyName}\n        </th>\n        <td title={formattedCurrentValue} className={prefixedClassNames.currentValue}>\n          {formattedCurrentValue}\n        </td>\n        <td title={formattedPreviousValue} className={prefixedClassNames.previousValue}>\n          {formattedPreviousValue}\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst connectedComponents = {};\n\norderedPropertyNames.forEach(propertyName => {\n  connectedComponents[propertyName] = connectControl(PropTableRow, [propertyName]);\n});\n\nconst getVisibleFromConfig = (props: Props) => {\n  return !!(\n    props.configuration &&\n    props.configuration.playbackMonitor &&\n    props.configuration.playbackMonitor.visibleAtStart\n  );\n};\n\nconst renderTableRows = classNamePrefix => {\n  const prefixedClassNames = {\n    headerRow: prefixClassNames(classNamePrefix, headerRowClassName),\n    propName: prefixClassNames(classNamePrefix, propNameClassName),\n    currentValue: prefixClassNames(classNamePrefix, currentValueClassName),\n    previousValue: prefixClassNames(classNamePrefix, previousValueClassName)\n  };\n  return [<TableHeaderRow key=\"header-row\" prefixedClassNames={prefixedClassNames} />].concat(\n    orderedPropertyNames.map(propertyName => {\n      const ConnectedPropRow = connectedComponents[propertyName];\n      return (\n        <ConnectedPropRow\n          key={`prop-row-${propertyName}`}\n          prefixedClassNames={prefixedClassNames}\n          propertyName={propertyName}\n        />\n      );\n    })\n  );\n};\n\nconst TableHeaderRow = ({ prefixedClassNames }: { prefixedClassNames: PrefixedClassNames }) => (\n  <tr className={prefixedClassNames.headerRow}>\n    <th className={prefixedClassNames.propName}>Property name</th>\n    <th className={prefixedClassNames.currentValue}>Current value</th>\n    <th className={prefixedClassNames.previousValue}>Previous value</th>\n  </tr>\n);\n\nclass PlaybackMonitor extends React.Component<Props, State> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isMonitorVisible: getVisibleFromConfig(props)\n    };\n  }\n\n  handleCloseClick = () => this.setState({ isMonitorVisible: false });\n\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.ctrlKey && keyboardEvent.altKey && keyboardEvent.code === 'KeyM') {\n      this.setState({ isMonitorVisible: !this.state.isMonitorVisible });\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State, prevContext: *): * {\n    const prevVisible = getVisibleFromConfig(prevProps);\n    if (!prevVisible && getVisibleFromConfig(this.props)) {\n      this.setState({ isMonitorVisible: true });\n    }\n  }\n\n  render() {\n    const { label, classNamePrefix, closeButtonContent } = this.props;\n    if (this.state.isMonitorVisible) {\n      return (\n        <div title={label} className={prefixClassNames(classNamePrefix, className)}>\n          <div className={prefixClassNames(classNamePrefix, headerClassName)}>\n            <Button\n              className={closeButtonClassName}\n              classNamePrefix={classNamePrefix}\n              content={closeButtonContent}\n              label={closeButtonLabel}\n              onClick={this.handleCloseClick}\n            />\n            <p className={prefixClassNames(classNamePrefix, versionClassName)}>Replay v{replayVersion}</p>\n          </div>\n          <table className={prefixClassNames(classNamePrefix, tableClassName)}>\n            <tbody>{renderTableRows(classNamePrefix)}</tbody>\n          </table>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nPlaybackMonitor.displayName = 'PlaybackMonitor';\nexport default PlaybackMonitor;\n"],"file":"PlaybackMonitor.js"}