{"version":3,"sources":["../../../src/replay/components/controls/QualitySelector/QualitySelector.js"],"names":["className","QualitySelector","React","Component","bitrate","props","setProperties","selectionStrategy","bitrateFix","bitrateCap","id","label","Infinity","autoLabel","formatBitrateLabel","currentBitrate","data","index","arr","matchValue","length","render","bitrates","toggleContent","classNamePrefix","Array","isArray","items","concat","selectedItem","filter","isSelected","bitrateToItem","handleSelect","defaultClassNamePrefix","displayName"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Selector from '../../generic/Selector/Selector';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\nexport type QualitySelectionStrategy = 'cap-bitrate' | 'fix-bitrate';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The list of bitrates available for adaptive selection, and for being fixed or set as cap level. */\n  bitrates?: Array<number>,\n  /** ⇘︎ The currently playing bitrate. */\n  currentBitrate?: number,\n  /** ⇘︎ If playback is (already) fixed to one bitrate, this prop is set. */\n  bitrateFix?: ?number,\n  /** ⇘︎ If adaptive bitrate selection is (already) capped at a level, this prop is set. */\n  bitrateCap?: ?number,\n  /** The content of the toggle button of the selector. */\n  toggleContent: React.Node,\n  /** ⇗ When one item is clicked, this callback is invoked with an object having a property with either the name bitrateCap or bitrateFix and a value according to the selected bitrate. For the auto option, the value is Infinity. */\n  setProperties?: ({ bitrateFix: ?number } | { bitrateCap: ?number }) => void,\n  /** Configures whether the selector should specify bitrate cap or fixing. */\n  selectionStrategy?: QualitySelectionStrategy,\n  /** The label for the selector item used for resetting capped or fixed bitrate. */\n  autoLabel: string,\n  /** Should return the item text to be displayed for each bitrate. The second argument indicates if the bitrate is currently playing. */\n  formatBitrateLabel: (number, boolean) => string\n};\n\nconst className = 'quality-selector';\n\nclass QualitySelector extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix,\n    selectionStrategy: 'cap-bitrate'\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = [\n    'bitrates',\n    'currentBitrate',\n    'bitrateFix',\n    'bitrateCap'\n  ];\n\n  handleSelect = (bitrate: number) => {\n    if (this.props.setProperties) {\n      if (this.props.selectionStrategy === 'fix-bitrate') {\n        this.props.setProperties({ bitrateFix: bitrate });\n      } else {\n        this.props.setProperties({ bitrateCap: bitrate });\n      }\n    }\n  };\n\n  bitrateToItem = (bitrate: number) => ({\n    id: bitrate,\n    label:\n      bitrate === Infinity\n        ? this.props.autoLabel\n        : this.props.formatBitrateLabel(bitrate, bitrate === this.props.currentBitrate),\n    data: bitrate\n  });\n\n  isSelected = (bitrate: number, index: number, arr: Array<number>) => {\n    const { bitrateFix, bitrateCap, selectionStrategy } = this.props;\n    const matchValue =\n      bitrateFix != null && bitrateCap != null\n        ? selectionStrategy === 'fix-bitrate'\n          ? bitrateFix\n          : bitrateCap\n        : bitrateFix || bitrateCap;\n    if (matchValue === 'min') {\n      return index === 1;\n    } else if (matchValue === 'max') {\n      return index === arr.length - 1;\n    } else {\n      return bitrate === matchValue;\n    }\n  };\n\n  render() {\n    const { bitrates, label, toggleContent, classNamePrefix } = this.props;\n    if (Array.isArray(bitrates) && bitrates.length > 1) {\n      const items = [Infinity].concat(bitrates);\n      const selectedItem = items.filter(this.isSelected)[0] || items[0];\n\n      return (\n        <Selector\n          items={items}\n          itemMapper={this.bitrateToItem}\n          classNamePrefix={classNamePrefix}\n          className={className}\n          selectedItem={selectedItem}\n          label={label}\n          onSelect={this.handleSelect}\n          reverseOrder={true}\n          expandedToggleContent={toggleContent}\n          collapsedToggleContent={toggleContent}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nQualitySelector.displayName = 'QualitySelector';\nexport default QualitySelector;\n"],"file":"QualitySelector.js"}