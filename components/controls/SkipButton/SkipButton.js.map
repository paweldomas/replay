{"version":3,"sources":["../../../src/replay/components/controls/SkipButton/SkipButton.js"],"names":["className","SkipButton","React","Component","setProperties","props","currentPosition","inspect","position","offset","isNaN","render","content","label","classNamePrefix","handleClick","defaultClassNamePrefix","displayName"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AAiBA,MAAMA,SAAS,GAAG,aAAlB;;AAEA,MAAMC,UAAN,SAAyBC,KAAK,CAACC,SAA/B,CAAgD;AAAA;AAAA;;AAAA,yCAMhC,MAAM;AAClB,YAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWD,aAAjC;;AACA,UAAIA,aAAJ,EAAmB;AACjB,cAAME,eAAe,GACnB,OAAO,KAAKD,KAAL,CAAWE,OAAlB,KAA8B,UAA9B,GAA2C,KAAKF,KAAL,CAAWE,OAAX,GAAqBC,QAAhE,GAA2E,KAAKH,KAAL,CAAWG,QADxF;AAEA,cAAMA,QAAQ,GAAGF,eAAe,GAAG,KAAKD,KAAL,CAAWI,MAA9C;;AACA,YAAI,CAACC,KAAK,CAACF,QAAD,CAAV,EAAsB;AACpBJ,UAAAA,aAAa,CAAC;AAAEI,YAAAA;AAAF,WAAD,CAAb;AACD;AACF;AACF,KAhB6C;AAAA;;AAkB9CG,EAAAA,MAAM,GAAG;AAAA,wBACqC,KAAKN,KAD1C;AAAA,UACCO,OADD,eACCA,OADD;AAAA,UACUC,KADV,eACUA,KADV;AAAA,UACiBC,eADjB,eACiBA,eADjB;AAEP,wBACE,oBAAC,eAAD;AACE,MAAA,eAAe,EAAEA,eADnB;AAEE,MAAA,SAAS,EAAEd,SAFb;AAGE,MAAA,KAAK,EAAEa,KAHT;AAIE,MAAA,OAAO,EAAE,KAAKE,WAJhB;AAKE,MAAA,OAAO,EAAEH;AALX,MADF;AASD;;AA7B6C;;gBAA1CX,U,kBACkB;AACpBa,EAAAA,eAAe,EAAEE,8BADG;AAEpBP,EAAAA,MAAM,EAAE,CAAC;AAFW,C;;AA+BxBR,UAAU,CAACgB,WAAX,GAAyB,YAAzB;eACehB,U","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Button from '../../generic/Button/Button';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport type { InspectMethod } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** The position from which the skipped position is computed. Not recommended to set this, but rather provide inspect(). */\n  position?: number,\n  /** Configures the offset that will be added to the current position when clicking the button. Negative values mean skipping backward. */\n  offset: number,\n  /** Button content, e.g. icon. */\n  content: React.Node,\n  /** ⇘︎ A callback returning the current video stream state with a position property when invoked. Invoked on clicking the button, and the position property is used for computing the new position. */\n  inspect?: InspectMethod,\n  /** ⇗ When the button is clicked, this callback is invoked with an object having a position property with the computed new position based on the skip offset. */\n  setProperties?: ({ position: number }) => void\n};\n\nconst className = 'skip-button';\n\nclass SkipButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix,\n    offset: -30\n  };\n\n  handleClick = () => {\n    const setProperties = this.props.setProperties;\n    if (setProperties) {\n      const currentPosition =\n        typeof this.props.inspect === 'function' ? this.props.inspect().position : this.props.position;\n      const position = currentPosition + this.props.offset;\n      if (!isNaN(position)) {\n        setProperties({ position });\n      }\n    }\n  };\n\n  render() {\n    const { content, label, classNamePrefix } = this.props;\n    return (\n      <Button\n        classNamePrefix={classNamePrefix}\n        className={className}\n        label={label}\n        onClick={this.handleClick}\n        content={content}\n      />\n    );\n  }\n}\n\nSkipButton.displayName = 'SkipButton';\nexport default SkipButton;\n"],"file":"SkipButton.js"}