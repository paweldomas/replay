{"version":3,"sources":["../../../src/replay/components/controls/SubtitlesSelector/SubtitlesSelector.js"],"names":["className","defaultKind","buildId","str","filter","s","join","buildLabel","label","kind","language","textTrackToItem","track","noTrack","id","data","origin","SubtitlesSelector","React","Component","constructor","props","item","setProperties","selectedTextTrack","state","noSubtitlesItem","noSubtitlesLabel","render","textTracks","currentTextTrack","toggleContent","classNamePrefix","Array","isArray","length","items","concat","selectedItem","selectedIndex","indexOf","handleSelect","defaultClassNamePrefix","displayName"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Selector from '../../generic/Selector/Selector';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { AvailableTrack } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The list of text tracks available for selection. */\n  textTracks?: Array<AvailableTrack>,\n  /** ⇘ The currently displaying text track. Must be strict equal one of the items in the text track list. Set to null if no subtitles are displayed. */\n  currentTextTrack?: AvailableTrack,\n  /** ⇗ When one item is clicked, this callback is invoked with an object having an selectedTextTrack property with the textTrack object corresponding to the selection. */\n  setProperties?: ({ selectedTextTrack: ?AvailableTrack }) => void,\n  /** The label to use on the selector option for not displaying subtitles. */\n  noSubtitlesLabel: string,\n  /** Element displayed in the control bar for expanding/collapsing the selector items. */\n  toggleContent: React.Node\n};\n\ntype State = {\n  noSubtitlesItem: { noTrack: true, label: string }\n};\n\nconst className = 'subtitles-selector';\n\nconst defaultKind = 'subtitles';\n\nconst buildId = (...str: Array<?string>) => str.filter(s => s).join('.');\n// TODO: Consider injectable label mapper, and also for audio selector and bitrate selector.\nconst buildLabel = ({ label, kind = defaultKind, language = 'unknown' }: AvailableTrack) =>\n  label || (kind !== defaultKind ? `[${language}] ${kind}` : `[${language}]`) || '';\n\nconst textTrackToItem = (track: AvailableTrack | { noTrack: true, label: string }) => {\n  if (track.noTrack) {\n    const label = track.label || '';\n    return {\n      id: 0,\n      label,\n      data: track\n    };\n  } else {\n    return {\n      id: track.id || buildId(track.language, track.kind, track.origin) || track.label,\n      label: buildLabel(track),\n      data: track\n    };\n  }\n};\n\nclass SubtitlesSelector extends React.Component<Props, State> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['textTracks', 'currentTextTrack'];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      noSubtitlesItem: { noTrack: true, label: this.props.noSubtitlesLabel }\n    };\n  }\n\n  handleSelect = (item: any) => {\n    if (this.props.setProperties) {\n      if (item.noTrack) {\n        this.props.setProperties({ selectedTextTrack: null });\n      } else {\n        this.props.setProperties({ selectedTextTrack: item });\n      }\n    }\n  };\n\n  render() {\n    const { textTracks, currentTextTrack, label, toggleContent, classNamePrefix } = this.props;\n    if (Array.isArray(textTracks) && textTracks.length > 0) {\n      // TODO: Consider optimization, memoizing the array and all props involved in rendering.\n      const items = [this.state.noSubtitlesItem].concat(textTracks);\n      let selectedItem = this.state.noSubtitlesItem;\n      if (currentTextTrack) {\n        const selectedIndex = textTracks.indexOf(currentTextTrack) + 1; // Nasty detail. Including \"no subtitles\" when counting.\n        if (selectedIndex > 0) {\n          selectedItem = items[selectedIndex];\n        }\n      }\n      return (\n        <Selector\n          items={items}\n          itemMapper={textTrackToItem}\n          classNamePrefix={classNamePrefix}\n          className={className}\n          selectedItem={selectedItem}\n          label={label}\n          onSelect={this.handleSelect}\n          reverseOrder={true}\n          expandedToggleContent={toggleContent}\n          collapsedToggleContent={toggleContent}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nSubtitlesSelector.displayName = 'SubtitlesSelector';\nexport default SubtitlesSelector;\n"],"file":"SubtitlesSelector.js"}