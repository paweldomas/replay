{"version":3,"sources":["../../../src/replay/components/controls/Timeline/Timeline.js"],"names":["className","trackClassName","handleClassName","Timeline","React","Component","constructor","props","position","setProperties","setState","isDragging","timeoutId","clearTimeout","setTimeout","state","componentWillUnmount","render","duration","isSeeking","label","classNamePrefix","children","handleContent","trackContent","reduceDragGlitch","handleSliderChange","handleDrag","undefined","defaultClassNamePrefix","displayName"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;;;;;;;;;AA0BA,MAAMA,SAAS,GAAG,UAAlB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,eAAe,GAAG,iBAAxB;;AAEA,MAAMC,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAAqD;AAUnDC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;;AADwB;;AAAA,gDAKJC,QAAD,IAAsB;AACzC,UAAI,KAAKD,KAAL,CAAWE,aAAf,EAA8B;AAC5B,aAAKF,KAAL,CAAWE,aAAX,CAAyB;AAAED,UAAAA;AAAF,SAAzB;AACD;AACF,KATyB;;AAAA,wCAWb,MAAM;AACjB,WAAKE,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAd;;AACA,UAAI,KAAKC,SAAT,EAAoB;AAClBC,QAAAA,YAAY,CAAC,KAAKD,SAAN,CAAZ;AACD;;AACD,WAAKA,SAAL,GAAiBE,UAAU,CAAC,MAAM;AAChC,aAAKJ,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAd;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACD,OAH0B,EAGxB,GAHwB,CAA3B;AAID,KApByB;;AAExB,SAAKG,KAAL,GAAa;AAAEJ,MAAAA,UAAU,EAAE;AAAd,KAAb;AACD;;AAmBDK,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKJ,SAAT,EAAoB;AAClBC,MAAAA,YAAY,CAAC,KAAKD,SAAN,CAAZ;AACA,WAAKA,SAAL,GAAiB,IAAjB;AACD;AACF;;AAEDK,EAAAA,MAAM,GAAG;AAAA,wBAWH,KAAKV,KAXF;AAAA,UAELC,QAFK,eAELA,QAFK;AAAA,UAGLU,QAHK,eAGLA,QAHK;AAAA,UAILC,SAJK,eAILA,SAJK;AAAA,UAKLC,KALK,eAKLA,KALK;AAAA,UAMLC,eANK,eAMLA,eANK;AAAA,UAOLC,QAPK,eAOLA,QAPK;AAAA,UAQLC,aARK,eAQLA,aARK;AAAA,UASLC,YATK,eASLA,YATK;AAAA,UAULC,gBAVK,eAULA,gBAVK;AAYP,wBACE,oBAAC,eAAD;AACE,MAAA,KAAK,EAAEL,KADT;AAEE,MAAA,KAAK,EAAEZ,QAFT;AAGE,MAAA,QAAQ,EAAEU,QAHZ;AAIE,MAAA,eAAe,EAAEC,SAAS,IAAI,KAAKJ,KAAL,CAAWJ,UAJ3C;AAKE,MAAA,aAAa,EAAEY,aALjB;AAME,MAAA,YAAY,EAAEC,YANhB;AAOE,MAAA,aAAa,EAAE,KAAKE,kBAPtB;AAQE,MAAA,MAAM,EAAED,gBAAgB,GAAG,KAAKE,UAAR,GAAqBC,SAR/C;AASE,MAAA,eAAe,EAAEP,eATnB;AAUE,MAAA,SAAS,EAAErB,SAVb;AAWE,MAAA,cAAc,EAAEC,cAXlB;AAYE,MAAA,eAAe,EAAEC;AAZnB,OAaGoB,QAbH,CADF;AAiBD;;AApEkD;;gBAA/CnB,Q,kBACkB;AACpBkB,EAAAA,eAAe,EAAEQ,8BADG;AAEpBJ,EAAAA,gBAAgB,EAAE;AAFE,C;;gBADlBtB,Q,mCAMkE,CAAC,UAAD,EAAa,UAAb,EAAyB,WAAzB,C;;AAiExEA,QAAQ,CAAC2B,WAAT,GAAuB,UAAvB;eACe3B,Q","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport Slider from '../../generic/Slider/Slider';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The current playback position in seconds (with decimals). A value between 0 and duration. */\n  position?: number,\n  /** ⇘︎ The stream's duration or seekable range in seconds (with decimals). */\n  duration?: number,\n  /** ⇘︎ True if a seeking operation is ongoing. This prop is used by the component to avoid glitching while dragging. */\n  isSeeking?: boolean,\n  /** Elements that will display on top of the timeline slider track, but below the timeline handle. */\n  children?: React.Node,\n  /** Can be set for custom graphics or content in the slider handle. */\n  handleContent?: React.Node,\n  /** Can be set for custom graphics or content representing the slider track. */\n  trackContent?: React.Node,\n  /** ⇗ If the volume slider handle position is changed, this callback is invoked with { position: newPosition } */\n  setProperties?: ({ position: number }) => void,\n  /** If set to false, glitches after dragging completes will occur, while the stream reports a position before seeking is performed. When true glitches are prevented by activating a timer for a small time after dragging has completed.*/\n  reduceDragGlitch?: boolean\n};\n\ntype State = {\n  isDragging: boolean\n};\n\nconst className = 'timeline';\nconst trackClassName = 'timeline-track';\nconst handleClassName = 'timeline-handle';\n\nclass Timeline extends React.Component<Props, State> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix,\n    reduceDragGlitch: true\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['position', 'duration', 'isSeeking'];\n\n  timeoutId: ?TimeoutID;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { isDragging: false };\n  }\n\n  handleSliderChange = (position: number) => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ position });\n    }\n  };\n\n  handleDrag = () => {\n    this.setState({ isDragging: true });\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n    this.timeoutId = setTimeout(() => {\n      this.setState({ isDragging: false });\n      this.timeoutId = null;\n    }, 800);\n  };\n\n  componentWillUnmount() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  render() {\n    const {\n      position,\n      duration,\n      isSeeking,\n      label,\n      classNamePrefix,\n      children,\n      handleContent,\n      trackContent,\n      reduceDragGlitch\n    } = this.props;\n    return (\n      <Slider\n        label={label}\n        value={position}\n        maxValue={duration}\n        isUpdateBlocked={isSeeking || this.state.isDragging}\n        handleContent={handleContent}\n        trackContent={trackContent}\n        onValueChange={this.handleSliderChange}\n        onDrag={reduceDragGlitch ? this.handleDrag : undefined}\n        classNamePrefix={classNamePrefix}\n        className={className}\n        trackClassName={trackClassName}\n        handleClassName={handleClassName}>\n        {children}\n      </Slider>\n    );\n  }\n}\n\nTimeline.displayName = 'Timeline';\nexport default Timeline;\n"],"file":"Timeline.js"}