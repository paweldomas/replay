{"version":3,"sources":["../../../src/replay/components/controls/TimelineInformation/TimelineInformation.js"],"names":["className","tooltipClassName","tooltipVisibleClassName","getTimeDisplay","playMode","absoluteStartPosition","previewValue","Date","getTime","TimelineInformation","React","Component","render","props","duration","isDragging","isPointerInside","classNamePrefix","timeDisplay","left","toFixed","prefixedClassName","prefixedTooltipClassNames","defaultClassNamePrefix","displayName"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;AAoBA,MAAMA,SAAS,GAAG,sBAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,uBAAuB,GAAG,0BAAhC;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAsBC,qBAAtB,EAAoDC,YAApD,KAAsF;AAC3G,MAAIA,YAAY,IAAI,IAApB,EAA0B;AACxB,QAAIF,QAAQ,KAAK,SAAb,IAA0BC,qBAAqB,YAAYE,IAA3D,IAAmEF,qBAAqB,CAACG,OAAtB,KAAkC,CAAzG,EAA4G;AAC1G,aAAO,6BAAgB,IAAID,IAAJ,CAASF,qBAAqB,CAACG,OAAtB,KAAkCF,YAAY,GAAG,IAA1D,CAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,wBAAWA,YAAX,CAAP;AACD;AACF,GAND,MAMO;AACL,WAAO,EAAP;AACD;AACF,CAVD;;AAYA,MAAMG,mBAAN,SAAkCC,KAAK,CAACC,SAAxC,CAAyD;AAUvDC,EAAAA,MAAM,GAAG;AAAA,wBASH,KAAKC,KATF;AAAA,UAELR,qBAFK,eAELA,qBAFK;AAAA,UAGLS,QAHK,eAGLA,QAHK;AAAA,UAILV,QAJK,eAILA,QAJK;AAAA,UAKLE,YALK,eAKLA,YALK;AAAA,UAMLS,UANK,eAMLA,UANK;AAAA,UAOLC,eAPK,eAOLA,eAPK;AAAA,UAQLC,eARK,eAQLA,eARK;AAUP,UAAMC,WAAW,GAAGf,cAAc,CAACC,QAAD,EAAWC,qBAAX,EAAkCC,YAAlC,CAAlC;AACA,UAAMa,IAAI,GAAG,CAAE,CAACb,YAAY,IAAI,CAAjB,KAAuBQ,QAAQ,IAAI,CAAnC,CAAD,GAA0C,GAA3C,EAAgDM,OAAhD,CAAwD,CAAxD,CAAb;AACA,UAAMC,iBAAiB,GAAG,8BAAiBJ,eAAjB,EAAkCjB,SAAlC,CAA1B;AACA,UAAMsB,yBAAyB,GAAG,8BAChCL,eADgC,EAEhChB,gBAFgC,EAGhCc,UAAU,IAAIC,eAAd,GAAgCd,uBAAhC,GAA0D,IAH1B,CAAlC;AAKA,wBACE;AAAK,MAAA,SAAS,EAAEmB;AAAhB,oBACE;AAAK,MAAA,SAAS,EAAEC,yBAAhB;AAA2C,MAAA,KAAK,EAAE;AAAEH,QAAAA,IAAI,YAAKA,IAAL;AAAN;AAAlD,OACGD,WADH,CADF,CADF;AAOD;;AAnCsD;;gBAAnDT,mB,mCACkE,CACpE,uBADoE,EAEpE,UAFoE,EAGpE,UAHoE,C;;gBADlEA,mB,kBAMkB;AACpBQ,EAAAA,eAAe,EAAEM;AADG,C;;AAgCxBd,mBAAmB,CAACe,WAApB,GAAkC,qBAAlC;eACef,mB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { formatTime, formatClockTime, prefixClassNames, defaultClassNamePrefix } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\nimport type { PlayMode } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\n\ntype Props = CommonProps & {\n  /** ⇘︎ For previewing live clock time positions, this should contain the date/time corresponding to the start of the timeline.. */\n  absoluteStartPosition?: Date,\n  /** ⇘︎ Used for selecting relative position or clock time display. */\n  playMode?: PlayMode,\n  /** ⇘︎ Used for computing the tooltip position. */\n  duration?: number,\n  /** The relative preview position, passed automatically from a Timeline parent. */\n  previewValue?: ?number,\n  /** The Timeline parent manages mouse pointer state, and passes to this component. If true, the tooltip is displayed. */\n  isPointerInside?: boolean,\n  /** Passed from the Timeline parent. When dragging, it is set to true, and the tooltip displays. */\n  isDragging?: ?boolean\n};\n\nconst className = 'timeline-information';\nconst tooltipClassName = 'timeline-tooltip';\nconst tooltipVisibleClassName = 'timeline-tooltip-visible';\n\nconst getTimeDisplay = (playMode: ?PlayMode, absoluteStartPosition: ?Date, previewValue: ?number): string => {\n  if (previewValue != null) {\n    if (playMode === 'livedvr' && absoluteStartPosition instanceof Date && absoluteStartPosition.getTime() > 0) {\n      return formatClockTime(new Date(absoluteStartPosition.getTime() + previewValue * 1000));\n    } else {\n      return formatTime(previewValue);\n    }\n  } else {\n    return '';\n  }\n};\n\nclass TimelineInformation extends React.Component<Props> {\n  static streamStateKeysForObservation: StreamStateKeysForObservation = [\n    'absoluteStartPosition',\n    'duration',\n    'playMode'\n  ];\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  render() {\n    const {\n      absoluteStartPosition,\n      duration,\n      playMode,\n      previewValue,\n      isDragging,\n      isPointerInside,\n      classNamePrefix\n    } = this.props;\n    const timeDisplay = getTimeDisplay(playMode, absoluteStartPosition, previewValue);\n    const left = (((previewValue || 0) / (duration || 1)) * 100).toFixed(2);\n    const prefixedClassName = prefixClassNames(classNamePrefix, className);\n    const prefixedTooltipClassNames = prefixClassNames(\n      classNamePrefix,\n      tooltipClassName,\n      isDragging || isPointerInside ? tooltipVisibleClassName : null\n    );\n    return (\n      <div className={prefixedClassName}>\n        <div className={prefixedTooltipClassNames} style={{ left: `${left}%` }}>\n          {timeDisplay}\n        </div>\n      </div>\n    );\n  }\n}\n\nTimelineInformation.displayName = 'TimelineInformation';\nexport default TimelineInformation;\n"],"file":"TimelineInformation.js"}