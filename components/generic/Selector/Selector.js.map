{"version":3,"sources":["../../../src/replay/components/generic/Selector/Selector.js"],"names":["defaultSelectorClassName","expandToggleClassName","selectorItemsClassName","expandedClassName","collapsedClassName","defaultItemClassName","selectedClassName","selectCollapsedClasses","classes","selectorCollapsed","selector","selectExpandedClasses","selectorExpanded","selectItemsContainerClasses","selectorItemsContainer","Selector","React","Component","constructor","props","toggleElement","isOn","setState","isExpanded","itemElement","index","focusableItems","item","itemData","itemMapper","id","onSelect","handleItemRef","selectedItem","state","itemClassName","classNamePrefix","keyboardEvent","key","preventDefault","reverseOrder","focusedElement","render","className","items","collapsedToggleContent","expandedToggleContent","label","renderedItems","map","renderSelectorItem","reverse","classNames","selectClasses","itemsContainerClassNames","toggleButtonClasses","toggleButtonOff","selectorToggle","selectorToggleOff","toggleButtonOn","selectorToggleOn","handleKeyUp","handleKeyDown","handleMouseLeave","handleToggle","onToggleRef","useDefaultClassNaming"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, hydrateClassNames } from '../../common';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nimport { focusElement, SelectorItem } from './helpers';\nimport type { ItemData } from './helpers';\n\ntype Props = CommonGenericProps & {\n  items: Array<any>,\n  selectedItem?: any,\n  reverseOrder?: boolean,\n  itemClassName?: string,\n  collapsedToggleContent?: React.Node,\n  expandedToggleContent?: React.Node,\n  label?: string,\n  itemMapper: any => ItemData,\n  onSelect?: any => void\n};\n\ntype SelectorState = {\n  isExpanded: boolean\n};\n\nconst defaultSelectorClassName = 'selector';\nconst expandToggleClassName = 'selector-toggle';\nconst selectorItemsClassName = 'selector-items';\nconst expandedClassName = 'expanded';\nconst collapsedClassName = 'collapsed';\nconst defaultItemClassName = 'selector-item';\nconst selectedClassName = 'selected';\n\nconst selectCollapsedClasses = classes => classes.selectorCollapsed || classes.selector;\nconst selectExpandedClasses = classes => classes.selectorExpanded || classes.selector;\nconst selectItemsContainerClasses = classes => classes.selectorItemsContainer;\n\nclass Selector extends React.Component<Props, SelectorState> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  focusableItems: Array<?HTMLElement> = [];\n  toggleElement: ?HTMLElement = null;\n\n  onToggleRef = (toggleElement: ?HTMLElement) => {\n    this.toggleElement = toggleElement;\n  };\n\n  handleToggle = (isOn: boolean) => this.setState({ isExpanded: isOn });\n\n  handleItemRef = (itemElement: ?HTMLElement, index: number) => {\n    this.focusableItems[index] = itemElement;\n  };\n\n  renderSelectorItem = (item: any, index: number) => {\n    const itemData = this.props.itemMapper(item);\n    return (\n      <SelectorItem\n        key={itemData.id}\n        item={itemData}\n        index={index}\n        onSelect={this.props.onSelect}\n        onRef={this.handleItemRef}\n        isSelected={item === this.props.selectedItem}\n        canReceiveFocus={this.state.isExpanded}\n        selectedClassName={selectedClassName}\n        defaultItemClassName={defaultItemClassName}\n        className={this.props.itemClassName}\n        classes={this.props.classes}\n        classNamePrefix={this.props.classNamePrefix}\n      />\n    );\n  };\n\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    switch (keyboardEvent.key) {\n      case 'ArrowUp':\n      case 'Up':\n        keyboardEvent.preventDefault();\n        return;\n      case 'ArrowDown':\n      case 'Down':\n        if (this.state.isExpanded) {\n          keyboardEvent.preventDefault();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (this.state.isExpanded) {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        focusElement(true, this.props.reverseOrder || false, this.focusableItems, this.toggleElement);\n      }\n      if (keyboardEvent.key === 'ArrowDown' || keyboardEvent.key === 'Down') {\n        keyboardEvent.preventDefault();\n        const focusedElement = focusElement(\n          false,\n          this.props.reverseOrder || false,\n          this.focusableItems,\n          this.toggleElement\n        );\n        if (focusedElement === this.toggleElement) {\n          this.setState({ isExpanded: false });\n        }\n      }\n    } else {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        this.setState({ isExpanded: true });\n      }\n    }\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isExpanded: false });\n  };\n\n  render() {\n    const {\n      className,\n      classNamePrefix,\n      classes,\n      items,\n      collapsedToggleContent,\n      expandedToggleContent,\n      reverseOrder,\n      label\n    } = this.props;\n    const renderedItems = items\n      ? reverseOrder\n        ? items.map(this.renderSelectorItem).reverse()\n        : items.map(this.renderSelectorItem)\n      : null;\n    const classNames = hydrateClassNames({\n      classes,\n      classNamePrefix,\n      selectClasses: this.state.isExpanded ? selectExpandedClasses : selectCollapsedClasses,\n      classNames: [className, defaultSelectorClassName, this.state.isExpanded ? expandedClassName : collapsedClassName]\n    });\n    const itemsContainerClassNames = hydrateClassNames({\n      classes,\n      selectClasses: selectItemsContainerClasses,\n      classNamePrefix,\n      classNames: [selectorItemsClassName]\n    });\n    const toggleButtonClasses = classes\n      ? {\n          toggleButtonOff: classes.selectorToggle || classes.selectorToggleOff,\n          toggleButtonOn: classes.selectorToggleOn\n        }\n      : null;\n\n    return (\n      <div\n        className={classNames}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        onMouseLeave={this.handleMouseLeave}>\n        <ToggleButton\n          isOn={this.state.isExpanded}\n          className={expandToggleClassName}\n          classNamePrefix={classNamePrefix}\n          classes={toggleButtonClasses}\n          label={label}\n          onToggle={this.handleToggle}\n          onRef={this.onToggleRef}\n          toggledOffContent={collapsedToggleContent}\n          toggledOnContent={expandedToggleContent}\n        />\n        <div role=\"listbox\" className={itemsContainerClassNames}>\n          {renderedItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Selector;\n"],"file":"Selector.js"}