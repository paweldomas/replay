{"version":3,"sources":["../../../src/replay/components/generic/ToggleButton/ToggleButton.js"],"names":["baseClassName","offClassName","onClassName","selectOffClasses","classes","toggleButtonOff","toggleButton","selectOnClasses","toggleButtonOn","ToggleButton","React","Component","props","onToggle","isOn","keyboardEvent","key","preventDefault","handleClick","render","label","className","classNamePrefix","toggledOnContent","toggledOffContent","onRef","toggleClassName","classNames","selectClasses","content","handleKeyUp","handleKeyDown","useDefaultClassNaming"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;AAiBA,MAAMA,aAAa,GAAG,eAAtB;AACA,MAAMC,YAAY,GAAG,aAArB;AACA,MAAMC,WAAW,GAAG,YAApB;;AAEA,MAAMC,gBAAgB,GAAGC,OAAO,IAAIA,OAAO,CAACC,eAAR,IAA2BD,OAAO,CAACE,YAAvE;;AACA,MAAMC,eAAe,GAAGH,OAAO,IAAIA,OAAO,CAACI,cAAR,IAA0BJ,OAAO,CAACE,YAArE;AAEA;;;;;AAGA,MAAMG,YAAN,SAA2BC,KAAK,CAACC,SAAjC,CAAkD;AAAA;AAAA;;AAAA,yCAKlC,MAAM,KAAKC,KAAL,CAAWC,QAAX,IAAuB,KAAKD,KAAL,CAAWC,QAAX,CAAoB,CAAC,KAAKD,KAAL,CAAWE,IAAhC,CALK;;AAAA,2CAOhC,wCAA2B,CAAC,OAAD,EAAU,GAAV,CAA3B,CAPgC;;AAAA,yCASjCC,aAAD,IAAkC;AAC9C,UAAIA,aAAa,CAACC,GAAd,KAAsB,OAAtB,IAAiCD,aAAa,CAACC,GAAd,KAAsB,GAA3D,EAAgE;AAC9DD,QAAAA,aAAa,CAACE,cAAd;AACA,aAAKC,WAAL;AACD;AACF,KAd+C;AAAA;;AAgBhDC,EAAAA,MAAM,GAAG;AAAA,wBACkG,KAAKP,KADvG;AAAA,UACCE,IADD,eACCA,IADD;AAAA,UACOM,KADP,eACOA,KADP;AAAA,UACcC,SADd,eACcA,SADd;AAAA,UACyBC,eADzB,eACyBA,eADzB;AAAA,UAC0CC,gBAD1C,eAC0CA,gBAD1C;AAAA,UAC4DC,iBAD5D,eAC4DA,iBAD5D;AAAA,UAC+EC,KAD/E,eAC+EA,KAD/E;AAAA,UACsFrB,OADtF,eACsFA,OADtF;AAEP,UAAMsB,eAAe,GAAGZ,IAAI,GAAGZ,WAAH,GAAiBD,YAA7C;AACA,UAAM0B,UAAU,GAAG,+BAAkB;AACnCvB,MAAAA,OADmC;AAEnCwB,MAAAA,aAAa,EAAEd,IAAI,GAAGP,eAAH,GAAqBJ,gBAFL;AAGnCmB,MAAAA,eAHmC;AAInCK,MAAAA,UAAU,EAAE,CAACN,SAAD,EAAYrB,aAAZ,EAA2B0B,eAA3B;AAJuB,KAAlB,CAAnB;AAMA,UAAMG,OAAO,GAAGf,IAAI,GAAGS,gBAAH,GAAsBC,iBAA1C;AACA,wBACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,sBAAcV,IAFhB;AAGE,MAAA,KAAK,EAAEM,KAHT;AAIE,MAAA,OAAO,EAAE,KAAKF,WAJhB;AAKE,MAAA,OAAO,EAAE,KAAKY,WALhB;AAME,MAAA,SAAS,EAAE,KAAKC,aANlB;AAOE,MAAA,GAAG,EAAEN,KAPP;AAQE,MAAA,SAAS,EAAEE,UARb;AASE,MAAA,QAAQ,EAAE;AATZ,oBAUE;AAAK,MAAA,QAAQ,EAAE,CAAC;AAAhB,OAAoBE,OAApB,CAVF,CADF;AAcD;;AAxC+C;;gBAA5CpB,Y,kBACkB;AACpBuB,EAAAA,qBAAqB,EAAE;AADH,C;;eA0CTvB,Y","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\n\ntype Props = CommonGenericProps & {\n  /** Set to true if the button should be in the toggled on mode. */\n  isOn?: boolean,\n  /** The label will appear in the title attribute of the root DOM element of the toggle button. */\n  label?: string,\n  /** The button content to be displayed when the button is toggled off. */\n  toggledOffContent?: React.Node,\n  /** The button content to be displayed when the button is toggled on. */\n  toggledOnContent?: React.Node,\n  /** A callback method that will be invoked when the button is clicked and the value toggled. If the button has been toggled on, true is passed to the callback. */\n  onToggle?: boolean => void,\n  /** A callback method invoked with the rendered button element, for focus purposes. */\n  onRef?: (?HTMLElement) => void\n};\n\nconst baseClassName = 'toggle-button';\nconst offClassName = 'toggled-off';\nconst onClassName = 'toggled-on';\n\nconst selectOffClasses = classes => classes.toggleButtonOff || classes.toggleButton;\nconst selectOnClasses = classes => classes.toggleButtonOn || classes.toggleButton;\n\n/**\n * Renders a button with two states - toggled on and off. When clicked, it reports back the opposite state.\n */\nclass ToggleButton extends React.Component<Props> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  handleClick = () => this.props.onToggle && this.props.onToggle(!this.props.isOn);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const { isOn, label, className, classNamePrefix, toggledOnContent, toggledOffContent, onRef, classes } = this.props;\n    const toggleClassName = isOn ? onClassName : offClassName;\n    const classNames = hydrateClassNames({\n      classes,\n      selectClasses: isOn ? selectOnClasses : selectOffClasses,\n      classNamePrefix,\n      classNames: [className, baseClassName, toggleClassName]\n    });\n    const content = isOn ? toggledOnContent : toggledOffContent;\n    return (\n      <div\n        role=\"button\"\n        aria-pressed={isOn}\n        title={label}\n        onClick={this.handleClick}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        ref={onRef}\n        className={classNames}\n        tabIndex={0}>\n        <div tabIndex={-1}>{content}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleButton;\n"],"file":"ToggleButton.js"}