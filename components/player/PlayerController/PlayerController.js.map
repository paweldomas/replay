{"version":3,"sources":["../../../src/replay/components/player/PlayerController/PlayerController.js"],"names":["passPropsToVideoStreamer","children","props","React","Children","map","child","i","cloneElement","getObserveManager","observers","observe","key","callback","push","unobserve","Array","isArray","index","indexOf","splice","unobserveAll","Object","entries","forEach","handlers","length","pop","update","prop","keys","createPlaybackActions","inspect","setProperties","play","isPaused","pause","setPosition","position","gotoLive","isAtLiveEdge","setVolume","volume","setIsMuted","isMuted","mute","unmute","requestPictureInPicture","isPipActive","exitPictureInPicture","showAirPlayTargetPicker","isAirPlayTargetPickerVisible","setSelectedTextTrack","selectedTextTrack","setSelectedAudioTrack","selectedAudioTrack","capBitrate","bitrateCap","fixBitrate","bitrateFix","PlayerController","Component","constructor","inspectableStreamState","override","state","setState","property","observeManager","onStreamStateChange","videoStreamerProps","initialPlaybackProps","onReady","onVideoStreamerReady","onPlaybackError","onStreamerError","componentDidMount","onPlaybackActionsReady","componentWillUnmount","render","externalProps","configuration","options","mergedConfiguration","mergeConfiguration","controllerApi","videoStreamer"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ControllerContext from './ControllerContext';\nimport type {\n  AvailableTrack,\n  InitialPlaybackProps,\n  VideoStreamerMethods,\n  PlaybackProps,\n  VideoStreamerProps,\n  VideoStreamState,\n  VideoStreamStateKeys\n} from '../VideoStreamer/types';\nimport type { ObserveCallback, ControllerApi, SetPropertiesMethod } from './ControllerContext';\nimport { override } from '../../common';\nimport memoize from 'memoize-one';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nexport type RenderParameters = {\n  controllerApi: ControllerApi,\n  externalProps: any,\n  configuration: any\n};\n\nexport type RenderMethod = RenderParameters => React.Node;\n\nexport type PlaybackActions = {\n  play: () => void,\n  pause: () => void,\n  setPosition: number => void,\n  gotoLive: () => void,\n  setVolume: number => void,\n  setIsMuted: boolean => void,\n  mute: () => void,\n  unmute: () => void,\n  requestPictureInPicture: () => void,\n  exitPictureInPicture: () => void,\n  showAirPlayTargetPicker: () => void,\n  setSelectedAudioTrack: AvailableTrack => void,\n  setSelectedTextTrack: (AvailableTrack | null) => void,\n  capBitrate: number => void,\n  fixBitrate: (number | 'max' | 'min') => void,\n  inspect: () => VideoStreamState,\n  setProperties: PlaybackProps => void\n};\n\ntype PlayerControllerProps = {\n  render: RenderMethod,\n  children: React.Node,\n  externalProps?: any,\n  configuration?: any,\n  options?: any,\n  onPlaybackActionsReady?: PlaybackActions => void,\n  onStreamStateChange?: VideoStreamState => void,\n  onStreamerError?: any => void,\n  initialPlaybackProps?: InitialPlaybackProps\n};\n\ntype PlayerControllerState = {\n  videoStreamerProps: VideoStreamerProps,\n  setProperties: SetPropertiesMethod\n};\n\nconst passPropsToVideoStreamer = (children: React.Node, props: any): React.Element<any> => {\n  return React.Children.map(children, (child, i) => {\n    if (i === 0) {\n      return React.cloneElement(child, props);\n    } else {\n      return child;\n    }\n  })[0];\n};\n\nconst getObserveManager = () => {\n  const observers: { [VideoStreamStateKeys]: Array<ObserveCallback> } = {};\n\n  const observe = (key: VideoStreamStateKeys, callback: ObserveCallback) => {\n    if (!(key in observers)) {\n      observers[key] = [];\n    }\n    observers[key].push(callback);\n  };\n\n  const unobserve = (key: VideoStreamStateKeys, callback: ObserveCallback) => {\n    if (Array.isArray(observers[key])) {\n      const index = observers[key].indexOf(callback);\n      if (index !== -1) {\n        observers[key].splice(index, 1);\n      }\n    }\n  };\n\n  const unobserveAll = () => {\n    Object.entries(observers).forEach(([key, handlers]) => {\n      while (handlers.length) {\n        handlers.pop();\n      }\n    });\n  };\n\n  const update = (prop: VideoStreamState) => {\n    Object.keys(prop).forEach(key => {\n      if (Array.isArray(observers[key])) {\n        observers[key].forEach(callback => {\n          callback(prop);\n        });\n      }\n    });\n  };\n\n  return {\n    observe,\n    unobserve,\n    update,\n    unobserveAll\n  };\n};\n\nconst createPlaybackActions = (inspect, setProperties: PlaybackProps => void): PlaybackActions => {\n  const play = () => setProperties({ isPaused: false });\n  const pause = () => setProperties({ isPaused: true });\n  const setPosition = (position: number) => setProperties({ position });\n  const gotoLive = () => setProperties({ isAtLiveEdge: true });\n  const setVolume = (volume: number) => setProperties({ volume });\n  const setIsMuted = (isMuted: boolean) => setProperties({ isMuted });\n  const mute = () => setProperties({ isMuted: true });\n  const unmute = () => setProperties({ isMuted: false });\n  const requestPictureInPicture = () => setProperties({ isPipActive: true });\n  const exitPictureInPicture = () => setProperties({ isPipActive: false });\n  const showAirPlayTargetPicker = () => setProperties({ isAirPlayTargetPickerVisible: true });\n  const setSelectedTextTrack = (selectedTextTrack: AvailableTrack | null) => setProperties({ selectedTextTrack });\n  const setSelectedAudioTrack = (selectedAudioTrack: AvailableTrack) => setProperties({ selectedAudioTrack });\n  const capBitrate = (bitrateCap: number) => setProperties({ bitrateCap });\n  const fixBitrate = (bitrateFix: number | 'max' | 'min') => setProperties({ bitrateFix });\n  return {\n    play,\n    pause,\n    setPosition,\n    gotoLive,\n    setVolume,\n    setIsMuted,\n    mute,\n    unmute,\n    requestPictureInPicture,\n    exitPictureInPicture,\n    showAirPlayTargetPicker,\n    setSelectedAudioTrack,\n    setSelectedTextTrack,\n    capBitrate,\n    fixBitrate,\n    setProperties,\n    inspect\n  };\n};\n\nclass PlayerController extends React.Component<PlayerControllerProps, PlayerControllerState> {\n  constructor(props: PlayerControllerProps) {\n    super(props);\n    const videoStreamerProps: VideoStreamerProps = {\n      initialPlaybackProps: this.props.initialPlaybackProps, //TODO: This is overwritten by preferred settings. Reconsider.\n      onReady: this.onVideoStreamerReady,\n      onPlaybackError: this.props.onStreamerError,\n      onStreamStateChange: this.onStreamStateChange\n    };\n    this.state = {\n      videoStreamerProps,\n      setProperties: () => {}\n    };\n  }\n\n  componentDidMount() {\n    const onReady = this.props.onPlaybackActionsReady;\n    if (onReady) {\n      onReady(\n        createPlaybackActions(\n          () => this.inspect(),\n          props => this.setProperties(props)\n        )\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.observeManager.unobserveAll();\n  }\n\n  inspectableStreamState: VideoStreamState = {};\n  observeManager = getObserveManager();\n\n  inspect = () => this.inspectableStreamState;\n\n  mergeConfiguration = memoize(override);\n\n  setProperties = (props: PlaybackProps) => this.state.setProperties(props);\n\n  onVideoStreamerReady = ({ setProperties }: VideoStreamerMethods) => {\n    this.inspectableStreamState = {};\n    this.setState({ setProperties });\n  };\n\n  // Video streamer -> UI\n  onStreamStateChange = (property: VideoStreamState) => {\n    // if (!('position' in property) && !('bufferedAhead' in property)) { console.log('Updating %s', Object.keys(property).join(', '), property); }\n    this.observeManager.update(property);\n    this.inspectableStreamState = { ...this.inspectableStreamState, ...property };\n    if (this.props.onStreamStateChange) {\n      this.props.onStreamStateChange(property);\n    }\n  };\n\n  render() {\n    const { setProperties, videoStreamerProps } = this.state;\n    const { observeManager } = this;\n    const { render, externalProps, configuration, options } = this.props;\n    const mergedConfiguration = this.mergeConfiguration(configuration, options);\n    const { observe, unobserve } = observeManager;\n    const controllerApi = {\n      setProperties,\n      videoStreamer: passPropsToVideoStreamer(this.props.children, {\n        ...videoStreamerProps,\n        configuration: mergedConfiguration.videoStreamer\n      }),\n      observe,\n      inspect: this.inspect,\n      unobserve\n    };\n\n    return (\n      <ControllerContext.Provider value={controllerApi}>\n        {render({ controllerApi, configuration: mergedConfiguration, externalProps })}\n      </ControllerContext.Provider>\n    );\n  }\n}\n\nexport default PlayerController;\n"],"file":"PlayerController.js"}