{"version":3,"sources":["../../../src/replay/components/player/PlayerController/connectControl.js"],"names":["registerObservers","observe","keys","onChange","forEach","p","connectControl","Control","stateKeys","resolvedStateKeys","streamStateKeysForObservation","Array","isArray","Error","displayName","name","Observer","React","Component","constructor","props","prop","setState","currentState","inspect","initialState","key","state","componentWillUnmount","unobserve","update","componentDidMount","render","passdownProps","ConnectedControl","setProperties","process","env","NODE_ENV","controlWithoutDisplayName","ControlledVideoStreamer","videoStreamer","cloneElement"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ControllerContext from './ControllerContext';\nimport type { InspectMethod, ObserveMethod, UnobserveMethod, SetPropertiesMethod } from './ControllerContext';\nimport type { VideoStreamState, VideoStreamStateKeys } from '../VideoStreamer/types';\nimport type { CommonGenericProps } from '../../common';\n\ntype HandleChangeMethod = ({ [VideoStreamStateKeys]: any }) => void;\n\ntype PassdownProps = VideoStreamState & {\n  setProperties?: SetPropertiesMethod,\n  inspect?: InspectMethod\n};\n\ntype ObserverProps = {\n  observe: ObserveMethod,\n  unobserve: UnobserveMethod,\n  inspect: InspectMethod,\n  passdownProps: PassdownProps\n};\n\n/*\nconst getObserver = (callback: HandleChangeMethod) => (key: string, value: any) => {\n  callback({ [key]: value });\n};\n*/\nconst registerObservers = (observe: ObserveMethod, keys: Array<VideoStreamStateKeys>, onChange: HandleChangeMethod) =>\n  keys.forEach(p => observe(p, onChange));\n\nconst connectControl = <Props: {}>(\n  Control: React.ComponentType<Props>,\n  stateKeys?: Array<VideoStreamStateKeys>\n): React.ComponentType<$Diff<Props, PassdownProps>> => {\n  // $FlowFixMe What's the best practices for extending component classes with static properties?\n  const resolvedStateKeys = stateKeys || Control.streamStateKeysForObservation || [];\n  if (!Array.isArray(resolvedStateKeys)) {\n    // Good old runtime check.\n    throw new Error(\n      `The component ${Control.displayName ||\n        Control.name} cannot be connected to the player controller because no stream state property keys are specified to be observed.`\n    );\n  }\n\n  class Observer extends React.Component<ObserverProps, any> {\n    constructor(props) {\n      super(props);\n      const currentState = props.inspect();\n      const initialState = {};\n      if (currentState) {\n        resolvedStateKeys.forEach(key => (initialState[key] = currentState[key]));\n      }\n      this.state = initialState;\n    }\n\n    update = prop => this.setState(prop);\n\n    componentWillUnmount() {\n      registerObservers(this.props.unobserve, resolvedStateKeys, this.update);\n    }\n\n    componentDidMount() {\n      registerObservers(this.props.observe, resolvedStateKeys, this.update);\n      const currentState = this.props.inspect();\n      if (currentState) {\n        resolvedStateKeys.forEach(key => this.setState({ [key]: currentState[key] }));\n      }\n    }\n\n    render() {\n      return <Control {...{ ...this.props.passdownProps, ...this.state }} />;\n    }\n  }\n\n  const ConnectedControl = (props: $Diff<Props, PassdownProps>) => (\n    <ControllerContext.Consumer>\n      {({ observe, unobserve, setProperties, inspect }) => {\n        if (observe) {\n          return (\n            <Observer\n              observe={observe}\n              unobserve={unobserve}\n              inspect={inspect}\n              passdownProps={{ ...props, setProperties, inspect }}\n            />\n          );\n        } else {\n          return <Control {...{ ...props, setProperties, inspect }} />;\n        }\n      }}\n    </ControllerContext.Consumer>\n  );\n\n  if (Control.displayName) {\n    ConnectedControl.displayName = 'Connected' + Control.displayName;\n  } else if (process.env.NODE_ENV === 'development') {\n    ConnectedControl.controlWithoutDisplayName = Control.name + ' wrapped in ConnectedControl';\n  } else {\n    ConnectedControl.displayName = 'Connected' + Control.name;\n  }\n  return ConnectedControl;\n};\n\nexport const ControlledVideoStreamer: React.StatelessFunctionalComponent<CommonGenericProps> = props => (\n  <ControllerContext.Consumer>\n    {({ videoStreamer }) => (videoStreamer != null ? React.cloneElement(videoStreamer, props) : null)}\n  </ControllerContext.Consumer>\n);\n\nexport default connectControl;\n"],"file":"connectControl.js"}