{"version":3,"sources":["../../../src/replay/components/player/PlayerUIContainer/PlayerUIContainer.js"],"names":["uiContainerClassName","aspectRatioFixClassName","classNameDefinitions","responsivenessPrefix","volumePrefix","isFullscreen","isUserActive","isUserInactive","isBuffering","isSeeking","isPlaying","isPaused","isStarting","isMuted","isAtLiveEdge","isLive","isOnDemand","isDvrEnabled","isFailed","noConnect","Component","getConnectedPlayerUIContainer","connector","ConnectedPlayerStateClassNames","PlayerStateClassNames","ConnectedKeyboardShortcuts","KeyboardShortcuts","PlayerUIContainer","React","render","props","classNamePrefix","configuration","aspectRatio","className","playerClassName","substr","length","onRef","fullscreenState","handleMouseMove","handleTouchStart","handleTouchEnd","handleFocus","interactionState","nudge","toggleFixedUserActive","handleKeyDown","responsiveClassNames","classNames","defaultClassNamePrefix","horizontal","vertical"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport Fullscreen from '../containment-helpers/Fullscreen';\nimport AspectRatio from '../containment-helpers/AspectRatio';\nimport InteractionDetector from '../containment-helpers/InteractionDetector';\nimport KeyboardShortcuts from '../containment-helpers/KeyboardShortcuts';\nimport type { InteractionDetectorConfiguration } from '../containment-helpers/InteractionDetector';\nimport type { KeyboardShortcutsConfiguration } from '../containment-helpers/KeyboardShortcuts';\nimport PlayerStateClassNames from '../containment-helpers/PlayerStateClassNames';\nimport ResponsiveClassNames from '../containment-helpers/ResponsiveClassNames';\nimport type { ResponsiveRanges } from '../containment-helpers/ResponsiveClassNames';\n\ntype RenderParameters = {\n  fullscreenState: {\n    isFullscreen: boolean,\n    setProperties: ({ isFullscreen: boolean }) => void,\n    enterFullscreen: () => void,\n    exitFullscreen: () => void\n  },\n  interactionState: {\n    nudge: () => void,\n    isUserActive: boolean\n  }\n};\n\ntype AspectRatioConfiguration = {\n  horizontal: number,\n  vertical: number\n};\n\ntype Props = CommonProps & {\n  aspectRatio: AspectRatioConfiguration,\n  configuration?: {\n    interactionDetector?: InteractionDetectorConfiguration,\n    keyboardShortcuts?: KeyboardShortcutsConfiguration,\n    responsivenessRules?: ?ResponsiveRanges,\n    aspectRatio?: ?AspectRatioConfiguration\n  },\n  render: RenderParameters => React.Node,\n  className?: string\n};\n\nconst uiContainerClassName = 'ui-container';\nconst aspectRatioFixClassName = 'aspect-ratio-fix';\n\nconst classNameDefinitions = {\n  responsivenessPrefix: 'player-size-',\n  volumePrefix: 'volume-level-',\n  isFullscreen: 'is-fullscreen',\n  isUserActive: 'is-user-active',\n  isUserInactive: 'is-user-inactive',\n  isBuffering: 'is-buffering',\n  isSeeking: 'is-seeking',\n  isPlaying: 'is-playing',\n  isPaused: 'is-paused',\n  isStarting: 'is-starting',\n  isMuted: 'is-muted',\n  isAtLiveEdge: 'is-at-live-edge',\n  isLive: 'is-live',\n  isOnDemand: 'is-on-demand',\n  isDvrEnabled: 'is-dvr-enabled',\n  isFailed: 'is-failed'\n};\n\n// Make stateClassNames pass an array with all relevant keys, so that a simple mapping can be done.\n// In addition comes dynamically generated class names from responsiveness, and perhaps volume level.\n\nconst noConnect = Component => Component;\n\nexport const getConnectedPlayerUIContainer = (connector: any => React.ComponentType<any> = noConnect) => {\n  const ConnectedPlayerStateClassNames = connector(PlayerStateClassNames);\n  const ConnectedKeyboardShortcuts = connector(KeyboardShortcuts);\n\n  return class PlayerUIContainer extends React.Component<Props> {\n    static defaultProps = {\n      classNamePrefix: defaultClassNamePrefix,\n      className: defaultClassNamePrefix.substr(0, defaultClassNamePrefix.length - 1), // Removing the last dash of the prefix. Dangerous assumption...\n      aspectRatio: {\n        horizontal: 16,\n        vertical: 9\n      }\n    };\n\n    render() {\n      const { classNamePrefix, render, configuration, aspectRatio, className } = this.props;\n      const playerClassName = classNamePrefix ? classNamePrefix.substr(0, classNamePrefix.length - 1) : className;\n      return (\n        <AspectRatio\n          rootClassName={playerClassName}\n          aspectRatio={aspectRatio || (configuration && configuration.aspectRatio)}\n          aspectFixClassName={aspectRatioFixClassName}\n          classNamePrefix={classNamePrefix}\n          render={() => (\n            <Fullscreen\n              render={({ onRef, ...fullscreenState }) => (\n                <InteractionDetector\n                  configuration={configuration}\n                  render={({ handleMouseMove, handleTouchStart, handleTouchEnd, handleFocus, ...interactionState }) => (\n                    <ConnectedKeyboardShortcuts\n                      configuration={configuration}\n                      fullscreenState={fullscreenState}\n                      nudge={interactionState.nudge}\n                      toggleFixedUserActive={interactionState.toggleFixedUserActive}\n                      render={({ handleKeyDown }) => (\n                        <ResponsiveClassNames\n                          onRef={onRef}\n                          configuration={configuration}\n                          render={({ onRef, responsiveClassNames }) => (\n                            <ConnectedPlayerStateClassNames\n                              {...fullscreenState}\n                              {...interactionState}\n                              classNameDefinitions={classNameDefinitions}\n                              classNamePrefix={classNamePrefix}\n                              className={uiContainerClassName}\n                              extraClassNames={responsiveClassNames}\n                              render={classNames => (\n                                <div\n                                  className={classNames}\n                                  tabIndex={0}\n                                  ref={onRef}\n                                  onMouseMove={handleMouseMove}\n                                  onTouchStart={handleTouchStart}\n                                  onTouchEnd={handleTouchEnd}\n                                  onKeyDown={handleKeyDown}\n                                  onFocus={handleFocus}>\n                                  {render({ fullscreenState, interactionState })}\n                                </div>\n                              )}\n                            />\n                          )}\n                        />\n                      )}\n                    />\n                  )}\n                />\n              )}\n            />\n          )}\n        />\n      );\n    }\n  };\n};\n\nconst PlayerUIContainer = getConnectedPlayerUIContainer();\nexport default PlayerUIContainer;\n"],"file":"PlayerUIContainer.js"}