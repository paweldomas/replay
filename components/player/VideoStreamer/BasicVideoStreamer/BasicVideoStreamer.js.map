{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/BasicVideoStreamer/BasicVideoStreamer.js"],"names":["getImplementationResolver","sourceChangeHandlerFactory","resolveImplementation","streamer","configuration","videoElement","onTrackElementDataChange","streamRangeHelper","handleSourceChange","updateStreamState","textTrackManager","audioTrackManager","applyProperties","window","log","basicHandlers","videoElementEventHandlers","setLifeCycleManager","playbackLifeCycleManager","pauseStreamRangeUpdater","cleanup","Promise","resolve","startPlaybackSession","endPlaybackSession","render","renderWithoutSource","BasicVideoStreamer","getSourceChangeHandler"],"mappings":";;;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;AAKO,SAASA,yBAAT,CACLC,0BADK,EAIL;AACA,SAAO,SAASC,qBAAT,CACLC,QADK,EAELC,aAFK,EAGLC,YAHK,EAILC,wBAJK,EAKwG;AAC7G,UAAMC,iBAAiB,GAAG,gCAAqBF,YAArB,EAAmCD,aAAnC,CAA1B,CAD6G,CAChC;;AAC7E,UAAMI,kBAAkB,GAAGP,0BAA0B,CAACI,YAAD,CAArD;AAEA,UAAMI,iBAAiB,GAAG,yCAA8BN,QAA9B,CAA1B,CAJ6G,CAI1C;;AAEnE,UAAMO,gBAAgB,GAAG,+BAAoBL,YAApB,EAAkCI,iBAAlC,EAAqDH,wBAArD,CAAzB;AACA,UAAMK,iBAAiB,GAAG,gCAAqBN,YAArB,EAAmCI,iBAAnC,CAA1B;AAEA,UAAMG,eAAe,GAAG,yCAAmBP,YAAnB,EAAiCE,iBAAjC,EAAoDG,gBAApD,EAAsEC,iBAAtE,CAAxB,CAT6G,CASK;;AATL,4BAU7F,4BAAeE,MAAf,EAAuB,aAAvB,CAV6F;AAAA,UAUrGC,GAVqG,mBAUrGA,GAVqG;;AAY7G,UAAMC,aAAa,GAAG,sCAA2B;AAC/CZ,MAAAA,QAD+C;AAE/CE,MAAAA,YAF+C;AAG/CE,MAAAA,iBAH+C;AAI/CH,MAAAA,aAJ+C;AAK/CQ,MAAAA,eAL+C;AAM/CH,MAAAA,iBAN+C;AAO/CK,MAAAA;AAP+C,KAA3B,CAAtB;AAZ6G,UAqBrGE,yBArBqG,GAqBlDD,aArBkD,CAqBrGC,yBArBqG;AAAA,UAqB1EC,mBArB0E,GAqBlDF,aArBkD,CAqB1EE,mBArB0E;AAuB7G,UAAMC,wBAAwB,GAAG,uCAC/BT,iBAD+B,EAE/BM,aAAa,CAACI,uBAFiB,EAG/B,4BAAeN,MAAf,EAAuB,WAAvB,EAAoCC,GAHL,CAAjC;AAKAG,IAAAA,mBAAmB,CAACC,wBAAD,CAAnB;;AAEA,aAASE,OAAT,GAAmB;AACjBV,MAAAA,gBAAgB,CAACU,OAAjB;AACAT,MAAAA,iBAAiB,CAACS,OAAlB;AACAF,MAAAA,wBAAwB,CAACE,OAAzB;AACAL,MAAAA,aAAa,CAACK,OAAd;AACA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AApC4G,UAsCrGC,oBAtCqG,GAsCxDL,wBAtCwD,CAsCrGK,oBAtCqG;AAAA,UAsC/EC,kBAtC+E,GAsCxDN,wBAtCwD,CAsC/EM,kBAtC+E;AAuC7G,UAAMC,MAAM,GAAGC,8BAAf;AAEA,WAAOL,OAAO,CAACC,OAAR,CAAgB;AACrBF,MAAAA,OADqB;AAErBK,MAAAA,MAFqB;AAGrBf,MAAAA,gBAHqB;AAIrBC,MAAAA,iBAJqB;AAKrBC,MAAAA,eALqB;AAMrBJ,MAAAA,kBANqB;AAOrBe,MAAAA,oBAPqB;AAQrBC,MAAAA,kBARqB;AASrBR,MAAAA;AATqB,KAAhB,CAAP;AAWD,GAzDD;AA0DD;;AAED,MAAMW,kBAAkB,GAAG,2CACzB,oBADyB,EAEzB3B,yBAAyB,CAAC4B,4BAAD,CAFA,CAA3B;eAKeD,kB","sourcesContent":["// @flow\nimport type { VideoStreamerImplProps } from '../types';\n\nimport createVideoStreamerComponent from '../common/createVideoStreamerComponent';\nimport getStreamRangeHelper from './streamRangeHelper';\nimport getFilteredStreamStateUpdater from '../common/filteredStreamStateUpdater';\nimport getTextTrackManager from './textTrackManager';\nimport getAudioTrackManager from './audioTrackManager';\nimport { getPropertyApplier } from '../common/propertyApplier';\nimport type { SimplifiedVideoStreamer, StreamerImplementationParts, TrackElementData } from '../common/types';\nimport type { VideoStreamerConfiguration } from '../types';\nimport getPlaybackLifeCycleManager from '../common/playbackLifeCycleManager';\nimport getBasicVideoEventHandlers from './basicVideoEventHandlers';\nimport { renderWithoutSource } from '../common/renderers';\nimport { getArrayLogger } from '../common/logger';\nimport getSourceChangeHandler from './sourceChangeHandler';\n\ntype BasicVideoStreamerProps = VideoStreamerImplProps<VideoStreamerConfiguration>;\ntype ThirdPartyPlayer = null;\n\nexport function getImplementationResolver(\n  sourceChangeHandlerFactory: (\n    videoElement: HTMLVideoElement\n  ) => (BasicVideoStreamerProps, ?BasicVideoStreamerProps) => Promise<any>\n) {\n  return function resolveImplementation(\n    streamer: SimplifiedVideoStreamer<VideoStreamerConfiguration, BasicVideoStreamerProps>,\n    configuration: ?VideoStreamerConfiguration,\n    videoElement: HTMLVideoElement,\n    onTrackElementDataChange: (Array<TrackElementData>) => void\n  ): Promise<StreamerImplementationParts<VideoStreamerConfiguration, BasicVideoStreamerProps, ThirdPartyPlayer>> {\n    const streamRangeHelper = getStreamRangeHelper(videoElement, configuration); // S\n    const handleSourceChange = sourceChangeHandlerFactory(videoElement);\n\n    const updateStreamState = getFilteredStreamStateUpdater(streamer); // G\n\n    const textTrackManager = getTextTrackManager(videoElement, updateStreamState, onTrackElementDataChange);\n    const audioTrackManager = getAudioTrackManager(videoElement, updateStreamState);\n\n    const applyProperties = getPropertyApplier(videoElement, streamRangeHelper, textTrackManager, audioTrackManager); // G\n    const { log } = getArrayLogger(window, 'videoEvents');\n\n    const basicHandlers = getBasicVideoEventHandlers({\n      streamer,\n      videoElement,\n      streamRangeHelper,\n      configuration,\n      applyProperties,\n      updateStreamState,\n      log\n    });\n    const { videoElementEventHandlers, setLifeCycleManager } = basicHandlers;\n\n    const playbackLifeCycleManager = getPlaybackLifeCycleManager(\n      updateStreamState,\n      basicHandlers.pauseStreamRangeUpdater,\n      getArrayLogger(window, 'lifecycle').log\n    );\n    setLifeCycleManager(playbackLifeCycleManager);\n\n    function cleanup() {\n      textTrackManager.cleanup();\n      audioTrackManager.cleanup();\n      playbackLifeCycleManager.cleanup();\n      basicHandlers.cleanup();\n      return Promise.resolve();\n    }\n\n    const { startPlaybackSession, endPlaybackSession } = playbackLifeCycleManager;\n    const render = renderWithoutSource;\n\n    return Promise.resolve({\n      cleanup,\n      render,\n      textTrackManager,\n      audioTrackManager,\n      applyProperties,\n      handleSourceChange,\n      startPlaybackSession,\n      endPlaybackSession,\n      videoElementEventHandlers\n    });\n  };\n}\n\nconst BasicVideoStreamer = createVideoStreamerComponent(\n  'BasicVideoStreamer',\n  getImplementationResolver(getSourceChangeHandler)\n);\n\nexport default BasicVideoStreamer;\n"],"file":"BasicVideoStreamer.js"}