{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/BasicVideoStreamer/errorMapper.js"],"names":["videoErrorCodes","mapError","videoElement","isDesktopSafari","navigator","userAgent","match","isIos","errorCode","sourceError","error","Error","sourceErrorCode","code","PlaybackError","message"],"mappings":";;;;;;;AAEA;;AAEA,MAAMA,eAAe,GAAG,CACtB,WADsB,EACT;AACb,mBAFsB,EAED;AACrB,mBAHsB,EAGD;AACrB,kBAJsB,EAIF;AACpB,6BALsB,EAKS;AAC/B,qBANsB,CAMA;AANA,CAAxB;;AASA,MAAMC,QAAQ,GAAIC,YAAD,IAAmD;AAClE,QAAMC,eAAe,GAAGC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,kBAA1B,KAAiD,CAACF,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,UAA1B,CAA1E;AACA,QAAMC,KAAK,GAAGH,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,qBAA1B,CAAd;AAEA,MAAIE,SAAoB,GAAG,cAA3B;AACA,QAAMC,WAAW,GAAGP,YAAY,CAACQ,KAAb,IAAsB,IAAIC,KAAJ,CAAU,8BAAV,CAA1C;AACA,QAAMC,eAAe,GAAG,OAAOH,WAAW,CAACI,IAAnB,KAA4B,QAA5B,GAAuCb,eAAe,CAACS,WAAW,CAACI,IAAb,CAAtD,GAA2Eb,eAAe,CAAC,CAAD,CAAlH;;AACA,MAAIY,eAAe,KAAK,kBAApB,IAA0CA,eAAe,KAAK,6BAAlE,EAAiG;AAC/F,QAAIL,KAAK,IAAIJ,eAAb,EAA8B;AAC5B;AACA;AACAK,MAAAA,SAAS,GAAG,uBAAZ;AACD,KAJD,MAIO;AACL;AACAA,MAAAA,SAAS,GAAG,qBAAZ;AACD;AACF,GATD,MASO,IAAII,eAAe,KAAK,mBAAxB,EAA6C;AAClDJ,IAAAA,SAAS,GAAG,uBAAZ;AACD;;AACD,SAAO,IAAIM,oBAAJ,CAAkBN,SAAlB,EAA6B,MAA7B,YAAwCI,eAAxC,eAA4DH,WAAW,CAACM,OAAZ,IAAuB,EAAnF,GAAyF,OAAzF,EAAkGN,WAAlG,CAAP;AACD,CApBD;;eAsBeR,Q","sourcesContent":["// @flow\n\nimport { PlaybackError, type ErrorCode } from '../types';\n\nconst videoErrorCodes = [\n  '(unknown)', // 0\n  'MEDIA_ERR_ABORTED', // 1\n  'MEDIA_ERR_NETWORK', // 2\n  'MEDIA_ERR_DECODE', // 3\n  'MEDIA_ERR_SRC_NOT_SUPPORTED', // 4\n  'MEDIA_ERR_ENCRYPTED' // 5 - Edge only?\n];\n\nconst mapError = (videoElement: HTMLVideoElement): PlaybackError => {\n  const isDesktopSafari = navigator.userAgent.match(/Mac OS X.*Safari/) && !navigator.userAgent.match(/(Chrome)/);\n  const isIos = navigator.userAgent.match(/(iPad|iPhone|iPod)/i);\n\n  let errorCode: ErrorCode = 'STREAM_ERROR';\n  const sourceError = videoElement.error || new Error('Unknown video element error.');\n  const sourceErrorCode = typeof sourceError.code === 'number' ? videoErrorCodes[sourceError.code] : videoErrorCodes[0];\n  if (sourceErrorCode === 'MEDIA_ERR_DECODE' || sourceErrorCode === 'MEDIA_ERR_SRC_NOT_SUPPORTED') {\n    if (isIos || isDesktopSafari) {\n      // MEDIA_ERR_DECODE Observed on 404s on HLS fragments, and MEDIA_ERR_SRC_NOT_SUPPORTED observed on non-OK m3u8 requests.\n      // Both should map to STREAM_ERROR_DOWNLOAD\n      errorCode = 'STREAM_ERROR_DOWNLOAD';\n    } else {\n      // Otherwise, actual decode problem? \"MEDIA_ERR_SRC_NOT_SUPPORTED\" also could be considered a decode problem.\n      errorCode = 'STREAM_ERROR_DECODE';\n    }\n  } else if (sourceErrorCode === 'MEDIA_ERR_NETWORK') {\n    errorCode = 'STREAM_ERROR_DOWNLOAD';\n  }\n  return new PlaybackError(errorCode, 'html', `${sourceErrorCode}: ${sourceError.message || ''}`, 'FATAL', sourceError);\n};\n\nexport default mapError;\n"],"file":"errorMapper.js"}