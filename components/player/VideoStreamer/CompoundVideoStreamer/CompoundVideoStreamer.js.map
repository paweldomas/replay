{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/CompoundVideoStreamer/CompoundVideoStreamer.js"],"names":["StreamResourceResolutionError","PlaybackError","constructor","message","supportedDrmType","resources","generalMessage","availableResources","normalizeSource","source","streamUrl","mergeAndMemoize","a","b","mergeAndMemoizePropsWithSource","props","createVideoStreamerResolver","selectCompatibleStream","selectLazyVideoStreamer","alternativeStreamResources","Array","isArray","navigator","userAgent","err","onPlaybackError","VideoStreamer","modifiedProps","CompoundVideoStreamer","selectCompatibleDrmStream","selectVideoStreamerImporter"],"mappings":";;;;;;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAgCO,MAAMA,6BAAN,SAA4CC,oBAA5C,CAA0D;AAC/DC,EAAAA,WAAW,CAACC,OAAD,EAAkBC,gBAAlB,EAA6CC,SAA7C,EAAgF;AACzF,UAAMC,cAAc,GAClB,4FACA,6GADA,GAEA,4GAHF;AAIA,UAAM,qCAAN,EAA6CH,OAAO,GAAGG,cAAvD;;AALyF;;AAAA;;AAMzF,SAAKF,gBAAL,GAAwBA,gBAAxB;AACA,SAAKG,kBAAL,GAA0BF,SAA1B;AACD;;AAT8D;;;AAcjE,MAAMG,eAAe,GAAG,yBAASC,MAAD,IAC9B,OAAOA,MAAP,KAAkB,QAAlB,GAA6B;AAAEC,EAAAA,SAAS,EAAED;AAAb,CAA7B,GAAqDA,MAD/B,CAAxB;AAIA,MAAME,eAAe,GAAG,yBAAQ,CAAOC,CAAP,EAAaC,CAAb,KAAsB;AACpD,2BAAYD,CAAZ,MAAkBC,CAAlB;AACD,CAFuB,CAAxB;AAIA,MAAMC,8BAA8B,GAAG,yBAAQ,CAACC,KAAD,EAAeN,MAAf,KAAmD;AAChG,2BAAYM,KAAZ;AAAmBN,IAAAA;AAAnB;AACD,CAFsC,CAAvC;;AAIO,MAAMO,2BAA2B,GAAG,CACzCC,sBADyC,EAEzCC,uBAFyC,KAGtC;AACH,SAAQH,KAAD,IAAkB;AACvB,QAAIN,MAAM,GAAGD,eAAe,CAACO,KAAK,CAACN,MAAP,CAA5B;AACA,UAAMU,0BAA0B,GAAGV,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,GAAuCA,MAAM,CAACU,0BAA9C,GAA2E,IAA9G;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcF,0BAAd,CAAJ,EAA+C;AAC7C,UAAI;AACFV,QAAAA,MAAM,GAAGE,eAAe,CAACF,MAAD,EAASQ,sBAAsB,CAACE,0BAAD,EAA6BG,SAAS,CAACC,SAAvC,CAA/B,CAAxB;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,YAAIA,GAAG,YAAYxB,6BAAnB,EAAkD;AAChD,cAAIe,KAAK,CAACU,eAAV,EAA2B;AACzBV,YAAAA,KAAK,CAACU,eAAN,CAAsBD,GAAtB;AACD;;AACDf,UAAAA,MAAM,GAAG,IAAT;AACD,SALD,MAKO;AACL,gBAAMe,GAAN;AACD;AACF;AACF;;AACD,QAAIf,MAAJ,EAAY;AACV,YAAMiB,aAAa,GAAGR,uBAAuB,CAACT,MAAD,EAASa,SAAS,CAACC,SAAnB,CAA7C;AACA,YAAMI,aAAa,GAAGb,8BAA8B,CAACC,KAAD,EAAQN,MAAR,CAApD;;AACA,UAAIiB,aAAJ,EAAmB;AACjB,4BACE,6BAAC,eAAD;AAAU,UAAA,QAAQ,eAAE;AAApB,wBACE,6BAAC,aAAD,EAAmBC,aAAnB,CADF,CADF;AAKD,OAND,MAMO;AACL,eAAO,IAAP;AACD;AACF,KAZD,MAYO;AACL,aAAO,IAAP;AACD;AACF,GAhCD;AAiCD,CArCM;;;AAuCP,MAAMC,qBAAqB,GAAGZ,2BAA2B,CAACa,iCAAD,EAA4BC,kCAA5B,CAAzD;eACeF,qB","sourcesContent":["// @flow\n//$FlowFixMe Flow React types are not up to date.\nimport React, { Suspense, type ComponentType } from 'react';\nimport type { AdvancedPlaybackSource, PlaybackSource } from '../types';\nimport { PlaybackError } from '../types';\nimport selectVideoStreamerImporter from './hlsjs-shaka-html/lazyVideoStreamerSelector';\nimport selectCompatibleDrmStream from './playready-widevine-fairplay/compatibleStreamSelector';\nimport memoize from 'memoize-one';\n\ntype UnencryptedStreamResource = {|\n  streamUrl: string,\n  contentType: string\n|};\n\ntype EncryptedStreamResource = {|\n  streamUrl: string,\n  contentType: string,\n  licenseUrl: string,\n  drmType: string\n|};\n\nexport type StreamResource = UnencryptedStreamResource | EncryptedStreamResource;\n\nexport type MultiTechPlaybackSource = AdvancedPlaybackSource & {\n  alternativeStreamResources?: Array<StreamResource>\n};\n\nexport type CompatibleStreamSelector = (\n  alternativeStreamResources: Array<StreamResource>,\n  userAgent: string\n) => StreamResource;\n\nexport type LazyVideoStreamerSelector = (source?: PlaybackSource | null, userAgent: string) => ComponentType<any>;\n\ntype Props = {\n  source?: MultiTechPlaybackSource | string,\n  onPlaybackError?: PlaybackError => void\n};\n\nexport class StreamResourceResolutionError extends PlaybackError {\n  constructor(message: string, supportedDrmType?: string, resources?: Array<StreamResource>) {\n    const generalMessage =\n      ' In order to select the appropriate stream and DRM technology for the current browser, ' +\n      'alternative stream resources must be specified with recognizable contentType and drmType properties. Refer ' +\n      'the Replay documentation for a listing of the supported and recognized stream content types and DRM types.';\n    super('STREAM_ERROR_TECHNOLOGY_UNSUPPORTED', message + generalMessage);\n    this.supportedDrmType = supportedDrmType;\n    this.availableResources = resources;\n  }\n  supportedDrmType: ?string;\n  availableResources: ?Array<StreamResource>;\n}\n\nconst normalizeSource = memoize((source: ?(string | MultiTechPlaybackSource)): ?MultiTechPlaybackSource =>\n  typeof source === 'string' ? { streamUrl: source } : source\n);\n\nconst mergeAndMemoize = memoize(<A, B>(a: A, b: B) => {\n  return { ...a, ...b };\n});\n\nconst mergeAndMemoizePropsWithSource = memoize((props: Props, source: MultiTechPlaybackSource) => {\n  return { ...props, source };\n});\n\nexport const createVideoStreamerResolver = (\n  selectCompatibleStream: CompatibleStreamSelector,\n  selectLazyVideoStreamer: LazyVideoStreamerSelector\n) => {\n  return (props: Props) => {\n    let source = normalizeSource(props.source);\n    const alternativeStreamResources = source && typeof source !== 'string' ? source.alternativeStreamResources : null;\n    if (Array.isArray(alternativeStreamResources)) {\n      try {\n        source = mergeAndMemoize(source, selectCompatibleStream(alternativeStreamResources, navigator.userAgent));\n      } catch (err) {\n        if (err instanceof StreamResourceResolutionError) {\n          if (props.onPlaybackError) {\n            props.onPlaybackError(err);\n          }\n          source = null;\n        } else {\n          throw err;\n        }\n      }\n    }\n    if (source) {\n      const VideoStreamer = selectLazyVideoStreamer(source, navigator.userAgent);\n      const modifiedProps = mergeAndMemoizePropsWithSource(props, source);\n      if (VideoStreamer) {\n        return (\n          <Suspense fallback={<div />}>\n            <VideoStreamer {...modifiedProps} />\n          </Suspense>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n};\n\nconst CompoundVideoStreamer = createVideoStreamerResolver(selectCompatibleDrmStream, selectVideoStreamerImporter);\nexport default CompoundVideoStreamer;\n"],"file":"CompoundVideoStreamer.js"}