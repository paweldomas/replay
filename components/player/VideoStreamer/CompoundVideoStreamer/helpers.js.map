{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/CompoundVideoStreamer/helpers.js"],"names":["hlsContentTypes","streamTypes","name","label","contentTypes","urlMatch","urlNotMatch","isSafari","userAgent","indexOf","isLegacyMicrosoft","match","isChromiumEdgeOnWindows","isResourceFairPlay","resource","contentType","drmType","toLowerCase","isResourcePlayReady","isResourceWidevine","isResourcePlayReadyOrWidevine","detectStreamType","streamUrl","filter","type","test"],"mappings":"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","sourcesContent":["// @flow\n\nimport type { StreamResource } from './CompoundVideoStreamer';\n\nexport type StreamType = {\n  name: string,\n  label: string,\n  contentTypes: Array<string>,\n  urlMatch: RegExp,\n  urlNotMatch?: RegExp\n};\n\nexport const hlsContentTypes = ['application/x-mpegurl', 'vnd.apple.mpegurl'];\n\nexport const streamTypes: Array<StreamType> = [\n  {\n    name: 'progressive',\n    label: 'Progressive (MP4, WebM)',\n    contentTypes: ['video/mp4', 'video/webm'],\n    urlMatch: /(\\.webm|\\.mp4)/,\n    urlNotMatch: /(\\/Manifest|\\.mpd|\\.m3u)/\n  },\n  {\n    name: 'dash',\n    label: 'MPEG DASH',\n    contentTypes: ['application/dash+xml'],\n    urlMatch: /\\.mpd/\n  },\n  {\n    name: 'hls',\n    label: 'HLS',\n    contentTypes: hlsContentTypes,\n    urlMatch: /\\.m3u/\n  },\n  {\n    name: 'smooth',\n    label: 'Smooth stream',\n    contentTypes: ['application/vnd.ms-sstr+xml'],\n    urlMatch: /\\/Manifest/,\n    urlNotMatch: /(\\.mpd|\\.m3u|\\.mp4)/\n  }\n];\n\nexport const isSafari = (userAgent: string) =>\n  userAgent.indexOf('Safari') > 0 && userAgent.indexOf('Chrome') < 0 && userAgent.indexOf('Firefox') < 0;\n\nexport const isLegacyMicrosoft = (userAgent: string) => userAgent.match(/(Edge\\/|rv:11\\.0)/);\n\nexport const isChromiumEdgeOnWindows = (userAgent: string) => userAgent.match(/(Windows NT(.*?)Edg\\/)/);\n\n// TODO: For symmetry, there should be an method matching all Widevine-compatible browsers.\n\nexport const isResourceFairPlay = (resource: StreamResource): boolean => {\n  const contentType = resource.contentType;\n  const drmType = resource.drmType ? resource.drmType : null;\n  return !!(\n    contentType &&\n    hlsContentTypes.indexOf(contentType.toLowerCase()) >= 0 &&\n    drmType &&\n    drmType.match(/(fairplay|com\\.apple\\.fps)/i)\n  );\n};\n\nexport const isResourcePlayReady = (resource: StreamResource): boolean => {\n  return !!(resource.drmType && resource.drmType.match(/playready/i));\n};\n\nexport const isResourceWidevine = (resource: StreamResource): boolean => {\n  return !!(resource.drmType && resource.drmType.match(/widevine/i));\n};\n\nexport const isResourcePlayReadyOrWidevine = (resource: StreamResource): boolean =>\n  isResourcePlayReady(resource) || isResourceWidevine(resource);\n\nexport const detectStreamType = (streamUrl: string, contentType: ?string): StreamType =>\n  streamTypes.filter(type => {\n    if (contentType) {\n      return type.contentTypes.indexOf(contentType.toLowerCase()) >= 0;\n    } else {\n      const urlNotMatch = type.urlNotMatch;\n      if (urlNotMatch) {\n        return type.urlMatch.test(streamUrl) && !urlNotMatch.test(streamUrl);\n      } else {\n        return type.urlMatch.test(streamUrl);\n      }\n    }\n  })[0] || streamTypes[0];\n"],"file":"helpers.js"}