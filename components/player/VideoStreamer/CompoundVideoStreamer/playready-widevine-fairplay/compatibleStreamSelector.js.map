{"version":3,"sources":["../../../../../src/replay/components/player/VideoStreamer/CompoundVideoStreamer/playready-widevine-fairplay/compatibleStreamSelector.js"],"names":["selectCompatibleDrmStream","alternativeStreamResources","userAgent","matcher","isResourceFairPlay","isResourcePlayReady","isResourcePlayReadyOrWidevine","isResourceWidevine","matchingStream","find","length","message","StreamResourceResolutionError"],"mappings":";;;;;;;AAEA;;AACA;;AAUA,MAAMA,yBAAmD,GAAG,CAACC,0BAAD,EAA6BC,SAA7B,KAA2C;AACrG,QAAMC,OAAO,GAAG,uBAASD,SAAT,IACZE,2BADY,GAEZ,gCAAkBF,SAAlB,IACAG,4BADA,GAEA,sCAAwBH,SAAxB,IACAI,sCADA,GAEAC,2BANJ;AAOA,QAAMC,cAAc,GAAGP,0BAA0B,CAACQ,IAA3B,CAAgCN,OAAhC,CAAvB;;AACA,MAAIK,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAFD,MAEO,IAAIP,0BAA0B,CAACS,MAA/B,EAAuC;AAC5C,QAAI,uBAASR,SAAT,CAAJ,EAAyB;AACvB,YAAMS,OAAO,GACX,8EACA,yFAFF;AAGA,YAAM,IAAIC,oDAAJ,CAAkCD,OAAlC,EAA2C,UAA3C,EAAuDV,0BAAvD,CAAN;AACD,KALD,MAKO,IAAI,gCAAkBC,SAAlB,CAAJ,EAAkC;AACvC,YAAMS,OAAO,GACX,sGACA,4DAFF;AAGA,YAAM,IAAIC,oDAAJ,CAAkCD,OAAlC,EAA2C,WAA3C,EAAwDV,0BAAxD,CAAN;AACD,KALM,MAKA;AACL,YAAMU,OAAO,GACX,qHACA,2DAFF;AAGA,YAAM,IAAIC,oDAAJ,CAAkCD,OAAlC,EAA2C,UAA3C,EAAuDV,0BAAvD,CAAN;AACD;AACF,GAjBM,MAiBA;AACL,UAAM,IAAIW,oDAAJ,CAAkC,iDAAlC,CAAN;AACD;AACF,CA/BD;;eAiCeZ,yB","sourcesContent":["// @flow\nimport type { CompatibleStreamSelector } from '../CompoundVideoStreamer';\nimport { StreamResourceResolutionError } from '../CompoundVideoStreamer';\nimport {\n  isLegacyMicrosoft,\n  isChromiumEdgeOnWindows,\n  isResourceFairPlay,\n  isResourcePlayReady,\n  isResourceWidevine,\n  isResourcePlayReadyOrWidevine,\n  isSafari\n} from '../helpers';\n\nconst selectCompatibleDrmStream: CompatibleStreamSelector = (alternativeStreamResources, userAgent) => {\n  const matcher = isSafari(userAgent)\n    ? isResourceFairPlay\n    : isLegacyMicrosoft(userAgent)\n    ? isResourcePlayReady\n    : isChromiumEdgeOnWindows(userAgent)\n    ? isResourcePlayReadyOrWidevine\n    : isResourceWidevine;\n  const matchingStream = alternativeStreamResources.find(matcher);\n  if (matchingStream) {\n    return matchingStream;\n  } else if (alternativeStreamResources.length) {\n    if (isSafari(userAgent)) {\n      const message =\n        'The browser detected is Safari. Only HLS with FairPlay DRM is supported. ' +\n        'Found no stream resource with contentType match for HLS and drmType match for FairPlay.';\n      throw new StreamResourceResolutionError(message, 'FairPlay', alternativeStreamResources);\n    } else if (isLegacyMicrosoft(userAgent)) {\n      const message =\n        'The browser detected is Microsoft Edge Legacy or Internet Explorer 11, supporting PlayReady DRM. ' +\n        'Found no stream resource with drmType match for PlayReady.';\n      throw new StreamResourceResolutionError(message, 'PlayReady', alternativeStreamResources);\n    } else {\n      const message =\n        'The browser detected is assumed to support Widevine DRM (Chrome, Chromium-based Edge, Firefox and derivatives). ' +\n        'Found no stream resource with drmType match for Widevine.';\n      throw new StreamResourceResolutionError(message, 'Widevine', alternativeStreamResources);\n    }\n  } else {\n    throw new StreamResourceResolutionError('No alternative stream resources were specified.');\n  }\n};\n\nexport default selectCompatibleDrmStream;\n"],"file":"compatibleStreamSelector.js"}