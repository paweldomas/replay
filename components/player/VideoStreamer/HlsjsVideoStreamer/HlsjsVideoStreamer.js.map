{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/HlsjsVideoStreamer/HlsjsVideoStreamer.js"],"names":["resolveImplementation","streamer","configuration","videoElement","onTrackElementDataChange","instanceKeeper","subscribers","streamRangeHelper","handleSourceChange","updateStreamState","textTrackManager","audioTrackManager","bitrateManager","window","log","applyProperties","hlsjsEventHandlers","videoElementEventHandlers","setLifeCycleManager","playbackLifeCycleManager","pauseStreamRangeUpdater","cleanup","startPlaybackSession","endPlaybackSession","thirdPartyPlayer","render","renderWithoutSource","Promise","resolve","HlsjsVideoStreamer"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAeA,SAASA,qBAAT,CACEC,QADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,wBAJF,EAKuH;AACrH,QAAMC,cAAc,GAAG;AACrBF,IAAAA,YADqB;AAErBG,IAAAA,WAAW,EAAE;AAFQ,GAAvB;AAKA,QAAMC,iBAAiB,GAAG,qCAAqBJ,YAArB,EAAmCE,cAAnC,EAAmDH,aAAnD,CAA1B;AACA,QAAMM,kBAAkB,GAAG,uCAAuBH,cAAvB,CAA3B;AACA,QAAMI,iBAAiB,GAAG,yCAA8BR,QAA9B,CAA1B;AAEA,QAAMS,gBAAgB,GAAG,oCACvBP,YADuB,EAEvBE,cAFuB,EAGvBI,iBAHuB,EAIvBL,wBAJuB,CAAzB;AAMA,QAAMO,iBAAiB,GAAG,qCAA0BN,cAA1B,EAA0CI,iBAA1C,CAA1B;AACA,QAAMG,cAAc,GAAG,kCACrBX,QADqB,EAErBI,cAFqB,EAGrBI,iBAHqB,EAIrB,4BAAeI,MAAf,EAAuB,gBAAvB,EAAyCC,GAJpB,CAAvB;AAOA,QAAMC,eAAe,GAAG,yCACtBZ,YADsB,EAEtBI,iBAFsB,EAGtBG,gBAHsB,EAItBC,iBAJsB,EAKtBC,cALsB,CAAxB,CAxBqH,CA8BlH;;AA9BkH,0BAgCrG,4BAAeC,MAAf,EAAuB,aAAvB,CAhCqG;AAAA,QAgC7GC,GAhC6G,mBAgC7GA,GAhC6G;;AAkCrH,QAAME,kBAAkB,GAAG,iCAAsB;AAC/Cf,IAAAA,QAD+C;AAE/CE,IAAAA,YAF+C;AAG/CE,IAAAA,cAH+C;AAI/CE,IAAAA,iBAJ+C;AAK/CL,IAAAA,aAL+C;AAM/Ca,IAAAA,eAN+C;AAO/CN,IAAAA,iBAP+C;AAQ/CK,IAAAA;AAR+C,GAAtB,CAA3B;AAlCqH,QA4C7GG,yBA5C6G,GA4C1DD,kBA5C0D,CA4C7GC,yBA5C6G;AAAA,QA4ClFC,mBA5CkF,GA4C1DF,kBA5C0D,CA4ClFE,mBA5CkF;AA8CrH,QAAMC,wBAAwB,GAAG,uCAC/BV,iBAD+B,EAE/BO,kBAAkB,CAACI,uBAFY,EAG/B,4BAAeP,MAAf,EAAuB,WAAvB,EAAoCC,GAHL,CAAjC;AAKAI,EAAAA,mBAAmB,CAACC,wBAAD,CAAnB;;AAEA,WAASE,OAAT,GAAmB;AACjBX,IAAAA,gBAAgB,CAACW,OAAjB;AACAF,IAAAA,wBAAwB,CAACE,OAAzB;AACA,WAAO,8BAAahB,cAAb,CAAP;AACD;;AAzDoH,QA2D7GiB,oBA3D6G,GA2DhEH,wBA3DgE,CA2D7GG,oBA3D6G;AAAA,QA2DvFC,kBA3DuF,GA2DhEJ,wBA3DgE,CA2DvFI,kBA3DuF;AA4DrH,QAAMC,gBAAgB,GAAGnB,cAAzB;AACA,QAAMoB,MAAM,GAAGC,8BAAf;AAEA,SAAOC,OAAO,CAACC,OAAR,CAAgB;AACrBP,IAAAA,OADqB;AAErBI,IAAAA,MAFqB;AAGrBf,IAAAA,gBAHqB;AAIrBC,IAAAA,iBAJqB;AAKrBa,IAAAA,gBALqB;AAMrBT,IAAAA,eANqB;AAOrBP,IAAAA,kBAPqB;AAQrBc,IAAAA,oBARqB;AASrBC,IAAAA,kBATqB;AAUrBN,IAAAA;AAVqB,GAAhB,CAAP;AAYD;;AAED,MAAMY,kBAAkB,GAAG,2CAA6B,oBAA7B,EAAmD7B,qBAAnD,CAA3B;eAEe6B,kB","sourcesContent":["// @flow\nimport type { VideoStreamerImplProps } from '../types';\n\nimport createVideoStreamerComponent from '../common/createVideoStreamerComponent';\nimport { hlsjsCleanup } from './hlsjsSetup';\nimport getStreamRangeHelper from './hlsjsStreamRangeHelper';\nimport getSourceChangeHandler from './hlsjsSourceChangeHandler';\nimport getFilteredStreamStateUpdater from '../common/filteredStreamStateUpdater';\nimport { getPropertyApplier } from '../common/propertyApplier';\nimport type { SimplifiedVideoStreamer, StreamerImplementationParts, TrackElementData } from '../common/types';\nimport type { VideoStreamerConfiguration } from '../types';\nimport getPlaybackLifeCycleManager from '../common/playbackLifeCycleManager';\nimport { renderWithoutSource } from '../common/renderers';\nimport { getArrayLogger } from '../common/logger';\nimport getHlsjsAudioTrackManager from './hlsjsAudioTrackManager';\nimport Hls from 'hls.js';\nimport getHlsjsTextTrackManager from './hlsjsTextTrackManager';\nimport getHlsjsBitrateManager from './hlsjsBitrateManager';\nimport getHlsjsEventHandlers from './hlsjsEventHandlers';\n\nexport type HlsjsInstanceKeeper = {\n  hls?: Hls,\n  videoElement: HTMLVideoElement,\n  subscribers: Array<(Hls, 'on' | 'off') => void>\n};\n\nexport type HlsjsVideoStreamerConfiguration = VideoStreamerConfiguration & {\n  hlsjs: {\n    customConfiguration?: any\n  }\n};\nexport type HlsjsVideoStreamerProps = VideoStreamerImplProps<HlsjsVideoStreamerConfiguration>;\n\nfunction resolveImplementation(\n  streamer: SimplifiedVideoStreamer<HlsjsVideoStreamerConfiguration, HlsjsVideoStreamerProps>,\n  configuration: ?HlsjsVideoStreamerConfiguration,\n  videoElement: HTMLVideoElement,\n  onTrackElementDataChange: (Array<TrackElementData>) => void\n): Promise<StreamerImplementationParts<HlsjsVideoStreamerConfiguration, HlsjsVideoStreamerProps, HlsjsInstanceKeeper>> {\n  const instanceKeeper = {\n    videoElement,\n    subscribers: []\n  };\n\n  const streamRangeHelper = getStreamRangeHelper(videoElement, instanceKeeper, configuration);\n  const handleSourceChange = getSourceChangeHandler(instanceKeeper);\n  const updateStreamState = getFilteredStreamStateUpdater(streamer);\n\n  const textTrackManager = getHlsjsTextTrackManager(\n    videoElement,\n    instanceKeeper,\n    updateStreamState,\n    onTrackElementDataChange\n  );\n  const audioTrackManager = getHlsjsAudioTrackManager(instanceKeeper, updateStreamState);\n  const bitrateManager = getHlsjsBitrateManager(\n    streamer,\n    instanceKeeper,\n    updateStreamState,\n    getArrayLogger(window, 'bitrateManager').log\n  );\n\n  const applyProperties = getPropertyApplier(\n    videoElement,\n    streamRangeHelper,\n    textTrackManager,\n    audioTrackManager,\n    bitrateManager\n  ); // G\n\n  const { log } = getArrayLogger(window, 'videoEvents');\n\n  const hlsjsEventHandlers = getHlsjsEventHandlers({\n    streamer,\n    videoElement,\n    instanceKeeper,\n    streamRangeHelper,\n    configuration,\n    applyProperties,\n    updateStreamState,\n    log\n  });\n  const { videoElementEventHandlers, setLifeCycleManager } = hlsjsEventHandlers;\n\n  const playbackLifeCycleManager = getPlaybackLifeCycleManager(\n    updateStreamState,\n    hlsjsEventHandlers.pauseStreamRangeUpdater,\n    getArrayLogger(window, 'lifecycle').log\n  );\n  setLifeCycleManager(playbackLifeCycleManager);\n\n  function cleanup() {\n    textTrackManager.cleanup();\n    playbackLifeCycleManager.cleanup();\n    return hlsjsCleanup(instanceKeeper);\n  }\n\n  const { startPlaybackSession, endPlaybackSession } = playbackLifeCycleManager;\n  const thirdPartyPlayer = instanceKeeper;\n  const render = renderWithoutSource;\n\n  return Promise.resolve({\n    cleanup,\n    render,\n    textTrackManager,\n    audioTrackManager,\n    thirdPartyPlayer,\n    applyProperties,\n    handleSourceChange,\n    startPlaybackSession,\n    endPlaybackSession,\n    videoElementEventHandlers\n  });\n}\n\nconst HlsjsVideoStreamer = createVideoStreamerComponent('HlsjsVideoStreamer', resolveImplementation);\n\nexport default HlsjsVideoStreamer;\n"],"file":"HlsjsVideoStreamer.js"}