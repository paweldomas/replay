{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/HlsjsVideoStreamer/hlsjsAudioTrackManager.js"],"names":["getDistinctPseudoTracks","audioTracks","foundKeys","filter","track","key","lang","name","isNotAdded","indexOf","push","map","id","language","kind","label","origin","equalOrNoneSpecified","a","b","equalOrNotSpecified","isAudioTrackListsDifferent","length","i","getAudioTrackManager","instanceKeeper","update","hls","mapAudioTracks","currentTracks","updateStreamStateProps","currentAudioTrack","currentHlsAudioTrack","ht","audioTrack","refresh","handleTrackChange","handleSelectedAudioTrackChange","selectedAudioTrack","st","groupId","matchingTrack","reset","handleSourceChange","hlsjsEventHandlers","Hls","Events","MANIFEST_LOADING","MANIFEST_PARSED","AUDIO_TRACK_SWITCHED","onHlsInstance","hlsInstance","preposition","Object","entries","forEach","handler","subscribers","cleanup"],"mappings":"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","sourcesContent":["// @flow\nimport type { AvailableTrack, VideoStreamState } from '../types';\nimport type { AudioTrackManager } from '../common/types';\nimport type { HlsjsAudioTrack } from 'hls.js';\nimport Hls from 'hls.js';\nimport type { HlsjsInstanceKeeper } from './HlsjsVideoStreamer';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\n// http://sample.vodobox.com/planete_interdite/planete_interdite_alternate.m3u8\n\nconst getDistinctPseudoTracks = (audioTracks: ?Array<HlsjsAudioTrack>): Array<AvailableTrack> => {\n  const foundKeys = [];\n  return audioTracks\n    ? audioTracks\n        .filter(track => {\n          const key = `${track.lang || ''}!${track.name || ''}`;\n          const isNotAdded = foundKeys.indexOf(key) < 0;\n          if (isNotAdded) {\n            foundKeys.push(key);\n          }\n          return isNotAdded;\n        })\n        .map(track => ({\n          id: track.id,\n          language: track.lang || 'unknown',\n          kind: '',\n          label: track.name || 'unknown',\n          origin: 'in-stream'\n        }))\n    : [];\n};\n\nconst equalOrNoneSpecified = (a: ?(string | number), b: ?(string | number)) => (!a && !b) || a === b;\nconst equalOrNotSpecified = (a: ?(string | number), b: ?(string | number)) => !a || !b || a === b;\n\nconst isAudioTrackListsDifferent = (a: Array<AvailableTrack>, b: Array<AvailableTrack>) => {\n  if (a.length === b.length) {\n    for (let i = 0; i < a.length; i++) {\n      if (\n        !equalOrNoneSpecified(a[i].id, b[i].id) ||\n        !equalOrNoneSpecified(a[i].language, b[i].language) ||\n        !equalOrNoneSpecified(a[i].label, b[i].label)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst getAudioTrackManager = (\n  instanceKeeper: HlsjsInstanceKeeper,\n  update: VideoStreamState => void\n): AudioTrackManager => {\n  let audioTracks: Array<AvailableTrack> = [];\n  let hls;\n\n  function mapAudioTracks() {\n    if (hls) {\n      const currentTracks = getDistinctPseudoTracks(hls.audioTracks);\n      if (isAudioTrackListsDifferent(currentTracks, audioTracks)) {\n        audioTracks = currentTracks;\n      }\n    }\n  }\n\n  function updateStreamStateProps() {\n    let currentAudioTrack = null;\n    if (hls) {\n      const currentHlsAudioTrack = hls.audioTracks.filter(ht => ht.id === hls.audioTrack)[0];\n      if (currentHlsAudioTrack) {\n        const { name, lang } = currentHlsAudioTrack;\n        currentAudioTrack = audioTracks.filter(({ label, language }) => label === name && language === lang)[0];\n      }\n    }\n    update({ audioTracks, currentAudioTrack });\n  }\n\n  function refresh() {\n    mapAudioTracks();\n    updateStreamStateProps();\n  }\n\n  function handleTrackChange() {\n    mapAudioTracks();\n    updateStreamStateProps();\n  }\n\n  function handleSelectedAudioTrackChange(selectedAudioTrack: ?AvailableTrack) {\n    const st = selectedAudioTrack;\n    if (hls && hls.audioTracks && st) {\n      const groupId = (hls.audioTracks[hls.audioTrack] || {}).groupId;\n      const matchingTrack = hls.audioTracks.filter(\n        ht =>\n          equalOrNotSpecified(ht.groupId, groupId) &&\n          equalOrNotSpecified(ht.name, st.label) &&\n          equalOrNotSpecified(ht.lang, st.language)\n      )[0];\n      if (matchingTrack) {\n        hls.audioTrack = matchingTrack.id;\n      }\n    }\n  }\n\n  function reset() {\n    audioTracks = [];\n  }\n\n  function handleSourceChange() {\n    refresh();\n  }\n\n  const hlsjsEventHandlers = {\n    [Hls.Events.MANIFEST_LOADING]: () => reset,\n    [Hls.Events.MANIFEST_PARSED]: refresh,\n    [Hls.Events.AUDIO_TRACK_SWITCHED]: handleTrackChange\n  };\n\n  function onHlsInstance(hlsInstance, preposition) {\n    Object.entries(hlsjsEventHandlers).forEach(([name, handler]) => {\n      // $FlowFixMe\n      hlsInstance[preposition](name, handler);\n      if (preposition === 'on') {\n        hls = hlsInstance;\n      }\n    });\n  }\n\n  instanceKeeper.subscribers.push(onHlsInstance);\n\n  return {\n    cleanup: () => {},\n    handleSourceChange,\n    handleSelectedAudioTrackChange\n  };\n};\n\nexport default getAudioTrackManager;\n"],"file":"hlsjsAudioTrackManager.js"}