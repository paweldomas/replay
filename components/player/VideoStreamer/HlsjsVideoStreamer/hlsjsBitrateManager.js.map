{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/HlsjsVideoStreamer/hlsjsBitrateManager.js"],"names":["getBitrateAsKbps","level","Math","ceil","bitrate","getHlsjsBitrateManager","streamer","instanceKeeper","updateStreamState","log","previousBitrates","hls","updateBitrateProps","hlsEvent","eventData","bitrates","Array","isArray","levels","map","currentLevel","Hls","Events","LEVEL_SWITCHED","startLevel","currentBitrate","capBitrate","cap","isNaN","Infinity","autoLevelCapping","bitrateCap","reached","i","length","fixBitrate","nextLevel","bitrateFix","hlsjsEventHandlers","MANIFEST_LOADING","MANIFEST_PARSED","LEVEL_UPDATED","onHlsInstance","hlsInstance","preposition","Object","entries","forEach","name","handler","subscribers","push"],"mappings":"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","sourcesContent":["// @flow\nimport type { InitialPlaybackProps, VideoStreamState } from '../types';\nimport { isShallowEqual } from '../../../common';\nimport type { HlsjsQualityLevel } from 'hls.js';\nimport Hls from 'hls.js';\nimport type { HlsjsInstanceKeeper } from './HlsjsVideoStreamer';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\ntype PropsWithInitial = {\n  initialPlaybackProps?: InitialPlaybackProps\n};\n\nfunction getBitrateAsKbps(level: HlsjsQualityLevel) {\n  return (level && Math.ceil(level.bitrate / 1000)) || 0;\n}\n\nconst getHlsjsBitrateManager = <P: PropsWithInitial>(\n  streamer: { props: P },\n  instanceKeeper: HlsjsInstanceKeeper,\n  updateStreamState: VideoStreamState => void,\n  log?: ?(string, any) => void\n) => {\n  let previousBitrates = [];\n  let hls;\n\n  function updateBitrateProps(hlsEvent, eventData) {\n    if (hls) {\n      let bitrates = Array.isArray(hls.levels) ? hls.levels.map(getBitrateAsKbps) : [];\n      if (isShallowEqual(previousBitrates, bitrates)) {\n        bitrates = previousBitrates;\n      }\n      const currentLevel =\n        hlsEvent === Hls.Events.LEVEL_SWITCHED\n          ? eventData.level\n          : hls.currentLevel === -1\n          ? hls.startLevel\n          : hls.currentLevel;\n      if (currentLevel === -1) {\n        log && log('No hls.js level reported currently or selected for start.');\n        updateStreamState({\n          bitrates\n        });\n      } else {\n        const currentBitrate = getBitrateAsKbps(hls.levels[currentLevel]);\n        updateStreamState({\n          currentBitrate,\n          bitrates\n        });\n      }\n    }\n  }\n\n  function capBitrate(cap: ?number) {\n    if (hls) {\n      if (isNaN(cap) || cap === Infinity || cap == null || cap < 0) {\n        log && log('Resetting restrictions for bitrate.');\n        hls.autoLevelCapping = -1;\n        updateStreamState({ bitrateCap: null });\n      } else {\n        if (Array.isArray(hls.levels)) {\n          let reached = false;\n          for (let i = 0; i < hls.levels.length; i++) {\n            const bitrate = getBitrateAsKbps(hls.levels[i]);\n            if (bitrate === cap) {\n              hls.autoLevelCapping = i;\n              updateStreamState({ bitrateCap: getBitrateAsKbps(hls.levels[i]) });\n              log && log('Desired bitrate cap ' + cap + ' is equal to level on index ' + i + ' in hls.js.', hls.levels);\n              reached = true;\n              break;\n            } else if (bitrate > cap) {\n              if (i > 0) {\n                hls.autoLevelCapping = i - 1;\n                updateStreamState({ bitrateCap: getBitrateAsKbps(hls.levels[i - 1]) });\n                log &&\n                  log(\n                    'Desired bitrate cap ' + cap + ' is closest to level on index ' + (i - 1) + ' in hls.js.',\n                    hls.levels\n                  );\n              } else {\n                hls.autoLevelCapping = 0;\n                log &&\n                  log(\n                    'Desired bitrate cap ' +\n                      cap +\n                      ' appears to be lower than the lowest HLS level. Aligning to lowest level.',\n                    hls.levels\n                  );\n                updateStreamState({ bitrateCap: getBitrateAsKbps(hls.levels[0]) });\n              }\n              reached = true;\n              break;\n            }\n          }\n          if (!reached) {\n            log &&\n              log('Desired bitrate cap appears to be higher than the higher HLS level. Not applicable.', hls.levels);\n          }\n        } else {\n          log && log('Found no HLS levels from where bitrate capping can be applied.', hls.levels);\n        }\n      }\n    }\n  }\n\n  function fixBitrate(bitrate: ?(number | 'max' | 'min')) {\n    if (hls) {\n      if (bitrate === 'min') {\n        if (Array.isArray(hls.levels) && hls.levels.length > 0) {\n          hls.nextLevel = 0;\n          updateStreamState({ bitrateFix: getBitrateAsKbps(hls.levels[0]) });\n          log && log('Fixing bitrate to lowest level out of ' + hls.levels.length);\n        }\n      } else if (bitrate === 'max') {\n        if (Array.isArray(hls.levels) && hls.levels.length > 0) {\n          hls.nextLevel = hls.levels.length - 1;\n          updateStreamState({ bitrateFix: getBitrateAsKbps(hls.levels[hls.levels.length - 1]) });\n          log && log('Fixing bitrate to highest level out of ' + hls.levels.length);\n        }\n      } else if (bitrate == null || isNaN(bitrate) || bitrate < 0 || !bitrate) {\n        log && log('Resetting fixing of bitrate.');\n        hls.nextLevel = -1;\n        updateStreamState({ bitrateFix: null });\n      } else if (typeof bitrate === 'string') {\n        log &&\n          log(\n            'Unknown string specified for bitrate lock. Please use a value of type number if a bitrate specified by kbps is intended.',\n            bitrate\n          );\n      } else {\n        if (Array.isArray(hls.levels)) {\n          for (var i = 0; i < hls.levels.length; i++) {\n            if (getBitrateAsKbps(hls.levels[i]) === bitrate) {\n              hls.nextLevel = i;\n              log && log('Fixing bitrate to HLS level ' + i, hls.levels);\n              updateStreamState({ bitrateFix: bitrate });\n              return;\n            }\n          }\n          log &&\n            log(\n              \"Desired bitrate lock didn't match any bitrates specified in the hls.levels list. Not applied.\",\n              hls.levels\n            );\n        } else {\n          log && log('Found no HLS levels from where bitrate fixing can be applied.', hls.levels);\n        }\n      }\n    }\n  }\n\n  const hlsjsEventHandlers = {\n    [Hls.Events.MANIFEST_LOADING]: () => {\n      previousBitrates = [];\n    },\n    [Hls.Events.MANIFEST_PARSED]: updateBitrateProps,\n    [Hls.Events.LEVEL_SWITCHED]: updateBitrateProps,\n    [Hls.Events.LEVEL_UPDATED]: updateBitrateProps\n  };\n\n  function onHlsInstance(hlsInstance, preposition) {\n    Object.entries(hlsjsEventHandlers).forEach(([name, handler]) => {\n      // $FlowFixMe\n      hlsInstance[preposition](name, handler);\n      if (preposition === 'on') {\n        hls = hlsInstance;\n      }\n    });\n  }\n\n  instanceKeeper.subscribers.push(onHlsInstance);\n\n  return {\n    fixBitrate,\n    capBitrate\n  };\n};\n\nexport default getHlsjsBitrateManager;\n"],"file":"hlsjsBitrateManager.js"}