{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/HlsjsVideoStreamer/hlsjsErrorMapper.js"],"names":["tech","ed","Hls","ErrorDetails","downloadErrors","MANIFEST_LOAD_ERROR","MANIFEST_LOAD_TIMEOUT","LEVEL_LOAD_ERROR","LEVEL_LOAD_TIMEOUT","AUDIO_TRACK_LOAD_ERROR","AUDIO_TRACK_LOAD_TIMEOUT","FRAG_LOAD_ERROR","FRAG_LOOP_LOADING_ERROR","FRAG_LOAD_TIMEOUT","KEY_LOAD_ERROR","KEY_LOAD_TIMEOUT","decodeErrors","MANIFEST_PARSING_ERROR","MANIFEST_INCOMPATIBLE_CODECS_ERROR","FRAG_DECRYPT_ERROR","BUFFER_ADD_CODEC_ERROR","FRAG_PARSING_ERROR","buildMessage","data","message","type","details","reason","mapHlsjsError","isStarted","severity","fatal","code","indexOf","PlaybackError"],"mappings":";;;;;;;AACA;;AACA;;;;AAEA,MAAMA,IAAI,GAAG,OAAb;AACA,MAAMC,EAAE,GAAGC,aAAIC,YAAf;AAEA,MAAMC,cAAc,GAAG,CACrBH,EAAE,CAACI,mBADkB,EAErBJ,EAAE,CAACK,qBAFkB,EAGrBL,EAAE,CAACM,gBAHkB,EAIrBN,EAAE,CAACO,kBAJkB,EAKrBP,EAAE,CAACQ,sBALkB,EAMrBR,EAAE,CAACS,wBANkB,EAOrBT,EAAE,CAACU,eAPkB,EAQrBV,EAAE,CAACW,uBARkB,EASrBX,EAAE,CAACY,iBATkB,EAUrBZ,EAAE,CAACa,cAVkB,EAWrBb,EAAE,CAACc,gBAXkB,CAAvB;AAaA,MAAMC,YAAY,GAAG,CACnBf,EAAE,CAACgB,sBADgB,EAEnBhB,EAAE,CAACiB,kCAFgB,EAGnBjB,EAAE,CAACkB,kBAHgB,EAInBlB,EAAE,CAACmB,sBAJgB,EAKnBnB,EAAE,CAACoB,kBALgB,CAArB;AAOA;;;;;;;;;AASA,SAASC,YAAT,CAAsBC,IAAtB,EAA4C;AAC1C,QAAMC,OAAO,GAAG,CAACD,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACE,IAAL,GAAY,GAAxB,GAA8B,EAA/B,KAAsCF,IAAI,CAACG,OAAL,IAAgB,EAAtD,CAAhB;;AACA,MAAI,OAAOH,IAAI,CAACI,MAAZ,KAAuB,QAA3B,EAAqC;AACnC,WAAOH,OAAO,GAAG,IAAV,GAAiBD,IAAI,CAACI,MAA7B;AACD,GAFD,MAEO;AACL,WAAOH,OAAP;AACD;AACF;;AAEM,SAASI,aAAT,CAAuBC,SAAvB,EAA2CN,IAA3C,EAAiE;AACtE,QAAMO,QAAQ,GAAGP,IAAI,CAACQ,KAAL,GAAa,OAAb,GAAuB,SAAxC;AACA,QAAMC,IAAI,GACPT,IAAI,IAAIA,IAAI,CAACG,OAAb,IAAwBtB,cAAc,CAAC6B,OAAf,CAAuBV,IAAI,CAACG,OAA5B,KAAwC,CAAhE,IAAqE,uBAAtE,IACCV,YAAY,CAACiB,OAAb,CAAqBV,IAAI,CAACG,OAA1B,KAAsC,CAAtC,IAA2C,qBAD5C,IAEA,cAHF;AAIA,SAAO,IAAIQ,oBAAJ,CAAkBF,IAAlB,EAAwBhC,IAAxB,EAA8BsB,YAAY,CAACC,IAAD,CAA1C,EAAkDO,QAAlD,EAA4DP,IAA5D,CAAP;AACD","sourcesContent":["// @flow\nimport Hls, { type HlsjsErrorData } from 'hls.js';\nimport { PlaybackError } from '../types';\n\nconst tech = 'hlsjs';\nconst ed = Hls.ErrorDetails;\n\nconst downloadErrors = [\n  ed.MANIFEST_LOAD_ERROR,\n  ed.MANIFEST_LOAD_TIMEOUT,\n  ed.LEVEL_LOAD_ERROR,\n  ed.LEVEL_LOAD_TIMEOUT,\n  ed.AUDIO_TRACK_LOAD_ERROR,\n  ed.AUDIO_TRACK_LOAD_TIMEOUT,\n  ed.FRAG_LOAD_ERROR,\n  ed.FRAG_LOOP_LOADING_ERROR,\n  ed.FRAG_LOAD_TIMEOUT,\n  ed.KEY_LOAD_ERROR,\n  ed.KEY_LOAD_TIMEOUT\n];\nconst decodeErrors = [\n  ed.MANIFEST_PARSING_ERROR,\n  ed.MANIFEST_INCOMPATIBLE_CODECS_ERROR,\n  ed.FRAG_DECRYPT_ERROR,\n  ed.BUFFER_ADD_CODEC_ERROR,\n  ed.FRAG_PARSING_ERROR\n];\n/*const generalErrors = [\n    t.BUFFER_APPEND_ERROR,\n    t.BUFFER_APPENDING_ERROR,\n    t.BUFFER_FULL_ERROR,\n    t.INTERNAL_EXCEPTION,\n    t.LEVEL_SWITCH_ERROR,\n    t.REMUX_ALLOC_ERROR\n];*/\n\nfunction buildMessage(data: HlsjsErrorData) {\n  const message = (data.type ? data.type + '/' : '') + (data.details || '');\n  if (typeof data.reason === 'string') {\n    return message + ': ' + data.reason;\n  } else {\n    return message;\n  }\n}\n\nexport function mapHlsjsError(isStarted: boolean, data: HlsjsErrorData) {\n  const severity = data.fatal ? 'FATAL' : 'WARNING';\n  const code =\n    (data && data.details && downloadErrors.indexOf(data.details) >= 0 && 'STREAM_ERROR_DOWNLOAD') ||\n    (decodeErrors.indexOf(data.details) >= 0 && 'STREAM_ERROR_DECODE') ||\n    'STREAM_ERROR';\n  return new PlaybackError(code, tech, buildMessage(data), severity, data);\n}\n"],"file":"hlsjsErrorMapper.js"}