{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/HlsjsVideoStreamer/hlsjsEventHandlers.js"],"names":["getHlsjsEventHandlers","streamer","videoElement","instanceKeeper","streamRangeHelper","configuration","applyProperties","updateStreamState","log","htmlVideoHandlers","videoElementEventHandlers","pauseStreamRangeUpdater","lifeCycleManager","setStage","_","getStage","handleActualError","detail","playbackError","props","onPlaybackError","error","severity","playState","isBuffering","isSeeking","stop","setLifeCycleManager","manager","hlsjsEventHandlers","Hls","Events","ERROR","evt","data","details","ErrorDetails","BUFFER_STALLED_ERROR","BUFFER_SEEK_OVER_HOLE","BUFFER_NUDGE_ON_STALL","MANIFEST_PARSING_ERROR","url","endsWith","MANIFEST_LOADING","initialPlaybackProps","isMuted","volume","muted","isPipAvailable","FRAG_BUFFERED","MANIFEST_PARSED","isPaused","bitrateFix","bitrateCap","pause","calculateNewState","onHlsInstance","hlsInstance","preposition","Object","entries","forEach","name","handler","subscribers","push","onCanPlay","onPlaying","onPause","onSeeking","onSeeked","onDurationChange","onTimeUpdate","onVolumeChange","onProgress","onEnded","onError"],"mappings":"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","sourcesContent":["// @flow\nimport type { PlaybackLifeCycle, StreamRangeHelper } from '../common/types';\nimport getBasicVideoEventHandlers from '../BasicVideoStreamer/basicVideoEventHandlers';\nimport Hls, { type HlsjsErrorData } from 'hls.js';\nimport type { PlaybackProps, VideoStreamState } from '../types';\nimport type { BasicVideoEventHandlersProps } from '../BasicVideoStreamer/basicVideoEventHandlers';\nimport { mapHlsjsError } from './hlsjsErrorMapper';\nimport type { HlsjsInstanceKeeper } from './HlsjsVideoStreamer';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst getHlsjsEventHandlers = <P: BasicVideoEventHandlersProps>({\n  streamer,\n  videoElement,\n  instanceKeeper,\n  streamRangeHelper,\n  configuration,\n  applyProperties,\n  updateStreamState,\n  log\n}: {\n  streamer: {\n    props: P\n  },\n  videoElement: HTMLVideoElement,\n  instanceKeeper: HlsjsInstanceKeeper,\n  streamRangeHelper: StreamRangeHelper,\n  configuration: ?{ pauseUpdateInterval?: ?number },\n  applyProperties: PlaybackProps => void,\n  updateStreamState: VideoStreamState => void,\n  log?: string => void\n}) => {\n  const htmlVideoHandlers = getBasicVideoEventHandlers({\n    streamer,\n    videoElement,\n    streamRangeHelper,\n    configuration,\n    log,\n    applyProperties,\n    updateStreamState\n  });\n\n  const { videoElementEventHandlers, pauseStreamRangeUpdater } = htmlVideoHandlers;\n\n  let lifeCycleManager = {\n    setStage: (_: PlaybackLifeCycle) => {},\n    getStage: () => {}\n  };\n\n  function handleActualError(detail) {\n    log && log('hlsjs.error');\n    const playbackError = mapHlsjsError(lifeCycleManager.getStage() === 'started', detail);\n    if (streamer.props.onPlaybackError) {\n      streamer.props.onPlaybackError(playbackError);\n    }\n    if (videoElement.error) {\n      updateStreamState({ error: videoElement.error });\n    }\n    if (playbackError.severity === 'FATAL') {\n      lifeCycleManager.setStage('dead');\n      updateStreamState({ playState: 'inactive', isBuffering: false, isSeeking: false });\n    }\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function setLifeCycleManager(manager: { setStage: PlaybackLifeCycle => void, getStage: () => PlaybackLifeCycle }) {\n    lifeCycleManager = manager;\n    htmlVideoHandlers.setLifeCycleManager(manager);\n  }\n\n  const hlsjsEventHandlers = {\n    [Hls.Events.ERROR]: (evt: any, data: HlsjsErrorData) => {\n      switch (data.details) {\n        case Hls.ErrorDetails.BUFFER_STALLED_ERROR:\n          updateStreamState({ isBuffering: true });\n          if (lifeCycleManager.getStage() === 'started') {\n            updateStreamState({ playState: 'buffering' });\n          }\n          break;\n        case Hls.ErrorDetails.BUFFER_SEEK_OVER_HOLE:\n        case Hls.ErrorDetails.BUFFER_NUDGE_ON_STALL:\n          break;\n        case Hls.ErrorDetails.MANIFEST_PARSING_ERROR:\n          if (data.url && !data.url.endsWith('undefined')) {\n            handleActualError(data);\n          }\n          break;\n        default:\n          handleActualError(data);\n      }\n    },\n    [Hls.Events.MANIFEST_LOADING]: () => {\n      log && log('hlsjs.loading');\n      if (lifeCycleManager.getStage() === 'new') {\n        lifeCycleManager.setStage('starting');\n        if (streamer.props.initialPlaybackProps) {\n          const { isMuted, volume } = streamer.props.initialPlaybackProps;\n          applyProperties({ isMuted, volume });\n        }\n        updateStreamState({\n          playState: 'starting',\n          isBuffering: true,\n          volume: videoElement.volume,\n          isMuted: videoElement.muted,\n          isPipAvailable: htmlVideoHandlers.isPipAvailable()\n        });\n      }\n    },\n    [Hls.Events.FRAG_BUFFERED]: () => {\n      updateStreamState({ isBuffering: false });\n    },\n    [Hls.Events.MANIFEST_PARSED]: () => {\n      log && log('hlsjs.parsed');\n      if (streamer.props.initialPlaybackProps) {\n        const { isPaused, bitrateFix, bitrateCap } = streamer.props.initialPlaybackProps;\n        if (isPaused) {\n          videoElement.pause();\n        }\n        applyProperties({ bitrateFix, bitrateCap });\n        if (bitrateFix == null) {\n          updateStreamState({ bitrateFix: null });\n        }\n        if (bitrateCap == null) {\n          updateStreamState({ bitrateCap: null });\n        }\n      } else {\n        updateStreamState({ bitrateFix: null, bitrateCap: null });\n      }\n      updateStreamState(streamRangeHelper.calculateNewState());\n    }\n  };\n\n  function onHlsInstance(hlsInstance, preposition) {\n    Object.entries(hlsjsEventHandlers).forEach(([name, handler]) => {\n      // $FlowFixMe\n      hlsInstance[preposition](name, handler);\n    });\n  }\n\n  instanceKeeper.subscribers.push(onHlsInstance);\n\n  const {\n    onCanPlay,\n    onPlaying,\n    onPause,\n    onSeeking,\n    onSeeked,\n    onDurationChange,\n    onTimeUpdate,\n    onVolumeChange,\n    onProgress,\n    onEnded,\n    onError // We still want HTML video element error mapping.\n  } = videoElementEventHandlers;\n  return {\n    videoElementEventHandlers: {\n      onCanPlay,\n      onPlaying,\n      onPause,\n      onSeeking,\n      onSeeked,\n      onDurationChange,\n      onTimeUpdate,\n      onVolumeChange,\n      onProgress,\n      onEnded,\n      onError\n    },\n    pauseStreamRangeUpdater,\n    setLifeCycleManager\n  };\n};\n\nexport default getHlsjsEventHandlers;\n"],"file":"hlsjsEventHandlers.js"}