{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/HlsjsVideoStreamer/hlsjsStreamRangeHelper.js"],"names":["dawnOfTime","Date","minimumDvrLength","defaultLiveEdgeMargin","resolvePlayMode","duration","isLive","Infinity","getAbsolutePositions","startDateTime","position","isNaN","absolutePosition","getTime","absoluteStartPosition","getIsAtLiveEdge","hls","videoElement","liveMargin","liveSyncPosition","currentTime","config","liveSyncDuration","liveSyncDurationCount","getStreamRangeHelper","instanceKeeper","configuration","liveEdgeMargin","levelDuration","streamStartDate","calculateNewState","Math","max","playMode","isAtLiveEdge","adjustForDvrStartOffset","setPosition","newPosition","gotoLive","reset","hlsjsEventHandlers","Hls","Events","MANIFEST_LOADING","LEVEL_LOADED","evt","data","details","live","totalduration","programDateTime","fragments","onHlsInstance","hlsInstance","preposition","Object","entries","forEach","name","handler","subscribers","push"],"mappings":"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","sourcesContent":["// @flow\nimport type { PlayMode } from '../types';\nimport Hls from 'hls.js';\nimport type { StreamRangeHelper } from '../common/types';\nimport type { HlsjsInstanceKeeper } from './HlsjsVideoStreamer';\n\nconst dawnOfTime = new Date(0);\nconst minimumDvrLength = 100; // seconds\nconst defaultLiveEdgeMargin = 10; // seconds\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nfunction resolvePlayMode(duration: number, isLive: boolean): PlayMode {\n  if (isLive) {\n    if (duration === Infinity || duration === 0 || duration < minimumDvrLength) {\n      return 'live';\n    } else {\n      return 'livedvr';\n    }\n  } else {\n    return 'ondemand';\n  }\n}\n\nfunction getAbsolutePositions(\n  isLive: boolean,\n  startDateTime: ?Date,\n  position: number\n): { absolutePosition: Date, absoluteStartPosition: Date } {\n  if (startDateTime instanceof Date && !isNaN(startDateTime)) {\n    return {\n      absolutePosition: new Date(startDateTime.getTime() + position * 1000),\n      absoluteStartPosition: startDateTime\n    };\n  } else {\n    if (isLive) {\n      const absolutePosition = new Date();\n      const absoluteStartPosition = new Date(absolutePosition.getTime() - position * 1000);\n      return {\n        absolutePosition,\n        absoluteStartPosition\n      };\n    } else {\n      return {\n        absolutePosition: dawnOfTime,\n        absoluteStartPosition: dawnOfTime\n      };\n    }\n  }\n}\n\nfunction getIsAtLiveEdge(hls, videoElement, isLive, liveMargin) {\n  if (isLive) {\n    if (hls.liveSyncPosition) {\n      return videoElement.currentTime > hls.liveSyncPosition - liveMargin;\n    } else if (hls.config && hls.config.liveSyncDuration) {\n      return videoElement.currentTime > videoElement.duration - (hls.config.liveSyncDuration + liveMargin);\n    } else if (hls.config && hls.config.liveSyncDurationCount) {\n      return videoElement.currentTime > videoElement.duration - (hls.config.liveSyncDurationCount * 10 + liveMargin);\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\nconst getStreamRangeHelper = (\n  videoElement: HTMLVideoElement,\n  instanceKeeper: HlsjsInstanceKeeper,\n  configuration: ?{ liveEdgeMargin?: ?number }\n): StreamRangeHelper => {\n  const liveMargin = (configuration && configuration.liveEdgeMargin) || defaultLiveEdgeMargin;\n  let levelDuration = 0;\n  let streamStartDate: ?Date;\n  let isLive = false;\n  let hls;\n\n  function calculateNewState() {\n    let position;\n\n    if (levelDuration && isLive) {\n      position = Math.max((videoElement.currentTime || 0) - Math.max(videoElement.duration - levelDuration, 0), 0);\n    } else {\n      position = videoElement.currentTime || 0;\n    }\n    const duration = (isLive && levelDuration) || videoElement.duration;\n    const { absolutePosition, absoluteStartPosition } = getAbsolutePositions(isLive, streamStartDate, position);\n    const playMode = resolvePlayMode(duration, isLive);\n    const isAtLiveEdge = hls && getIsAtLiveEdge(hls, videoElement, isLive, liveMargin);\n\n    return {\n      position,\n      duration,\n      playMode,\n      isAtLiveEdge,\n      absolutePosition,\n      absoluteStartPosition\n    };\n  }\n\n  function adjustForDvrStartOffset() {\n    /* Handled by hls.js itself? */\n  }\n\n  function setPosition(newPosition: number) {\n    if (\n      !(\n        isNaN(newPosition) ||\n        newPosition === Infinity ||\n        isNaN(videoElement.duration) ||\n        videoElement.duration === Infinity\n      )\n    ) {\n      if (levelDuration && isLive) {\n        videoElement.currentTime = newPosition + videoElement.duration - levelDuration;\n      } else {\n        videoElement.currentTime = newPosition;\n      }\n    }\n  }\n\n  function gotoLive() {\n    if (isLive && hls) {\n      if (hls.liveSyncPosition) {\n        videoElement.currentTime = hls.liveSyncPosition;\n      } else if (hls.config && hls.config.liveSyncDuration) {\n        videoElement.currentTime = videoElement.duration - (hls.config.liveSyncDuration + liveMargin);\n      } else if (hls.config && hls.config.liveSyncDurationCount) {\n        videoElement.currentTime = videoElement.duration - (hls.config.liveSyncDurationCount * 10 + liveMargin);\n      } else {\n        videoElement.currentTime = videoElement.duration - liveMargin;\n      }\n    }\n  }\n\n  function reset() {\n    streamStartDate = null;\n    levelDuration = 0;\n    isLive = false;\n  }\n\n  const hlsjsEventHandlers = {\n    [Hls.Events.MANIFEST_LOADING]: () => reset,\n    [Hls.Events.LEVEL_LOADED]: (evt, data) => {\n      isLive = data.details.live;\n      levelDuration = data.details.totalduration;\n      // updateDuration();\n      const programDateTime =\n        data.details &&\n        data.details.fragments &&\n        data.details.fragments[0] &&\n        data.details.fragments[0].programDateTime;\n      if (programDateTime) {\n        streamStartDate = new Date(programDateTime);\n        // updatePosition();\n      }\n    }\n  };\n\n  function onHlsInstance(hlsInstance, preposition) {\n    Object.entries(hlsjsEventHandlers).forEach(([name, handler]) => {\n      // $FlowFixMe\n      hlsInstance[preposition](name, handler);\n      if (preposition === 'on') {\n        hls = hlsInstance;\n      }\n    });\n  }\n\n  instanceKeeper.subscribers.push(onHlsInstance);\n\n  return {\n    adjustForDvrStartOffset,\n    calculateNewState,\n    setPosition,\n    gotoLive\n  };\n};\n\nexport default getStreamRangeHelper;\n"],"file":"hlsjsStreamRangeHelper.js"}