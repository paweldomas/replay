{"version":3,"sources":["../../../src/replay/components/player/VideoStreamer/MockVideoStreamer.js"],"names":["defaultTextTracks","kind","label","language","origin","defaultAudioTracks","defaultValues","playMode","playState","isPaused","isBuffering","isSeeking","position","duration","absolutePosition","Date","absoluteStartPosition","volume","isMuted","isPipAvailable","isPipActive","isAirPlayAvailable","isAirPlayActive","bufferedAhead","bitrates","currentBitrate","bitrateFix","NaN","bitrateCap","Infinity","textTracks","currentTextTrack","audioTracks","currentAudioTrack","isAtLiveEdge","error","undefined","className","mockClassName","runAsync","callback","arg","delay","setTimeout","updateWithDefaultValues","updater","overrides","Object","entries","forEach","entry","MockVideoStreamer","React","Component","props","selectedTextTrack","selectedAudioTrack","unchanged","newState","modifiedStreamState","onStreamStateChange","componentDidMount","initialPlaybackProps","updateStreamState","window","updateVideoState","onReady","setProperties","Math","round","random","thirdPartyPlayer","initialMockState","componentDidUpdate","prevProps","render","classNamePrefix","children","defaultClassNamePrefix"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { PlaybackProps, VideoStreamerProps, VideoStreamState } from './types';\nimport { defaultClassNamePrefix, prefixClassNames } from '../../common';\n\ntype Props = VideoStreamerProps & {\n  children?: React.Node,\n  initialMockState?: VideoStreamState\n};\n\nconst defaultTextTracks = [\n  {\n    kind: 'subtitles',\n    label: 'Finnish subtitles',\n    language: 'fi',\n    origin: 'side-loaded'\n  },\n  {\n    kind: 'subtitles',\n    label: 'Swedish subtitles',\n    language: 'sv',\n    origin: 'side-loaded'\n  }\n];\n\nconst defaultAudioTracks = [\n  {\n    label: \"Director's comments\",\n    language: 'en'\n  },\n  {\n    label: 'Main audio',\n    language: 'en'\n  }\n];\n\nconst defaultValues = {\n  playMode: 'ondemand',\n  playState: 'playing',\n  isPaused: false,\n  isBuffering: false,\n  isSeeking: false,\n  position: 123,\n  duration: 456,\n  absolutePosition: new Date(0),\n  absoluteStartPosition: new Date(0),\n  volume: 0.7,\n  isMuted: false,\n  isPipAvailable: true,\n  isPipActive: false,\n  isAirPlayAvailable: true,\n  isAirPlayActive: false,\n  bufferedAhead: 12,\n  bitrates: [512, 1024, 2048, 4096],\n  currentBitrate: 2048,\n  bitrateFix: NaN,\n  bitrateCap: Infinity,\n  textTracks: defaultTextTracks,\n  currentTextTrack: defaultTextTracks[0],\n  audioTracks: defaultAudioTracks,\n  currentAudioTrack: defaultAudioTracks[0],\n  isAtLiveEdge: false,\n  error: undefined\n};\n/*\n\tvolume?: number,\n\tisMuted?: boolean,\n\tisPaused?: boolean,\n\tbitrateCap?: number,\n\tbitrateFix?: number | string,\n\tselectedTextTrack?: AvailableTrack,\n\tselectedAudioTrack?: AvailableTrack,\n*/\n\nconst className = 'video-streamer';\nconst mockClassName = 'mock-video-streamer';\n\nconst runAsync = (callback, arg, delay = 0) => {\n  setTimeout(() => callback && callback(arg), delay);\n};\n\nconst updateWithDefaultValues = (updater, overrides: VideoStreamState = {}) => {\n  if (updater) {\n    Object.entries(defaultValues).forEach(entry => {\n      updater({ [entry[0]]: entry[0] in overrides ? overrides[entry[0]] : entry[1] });\n    });\n  }\n};\n\nclass MockVideoStreamer extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n  modifiedStreamState = {};\n\n  updateStreamState = (props: PlaybackProps) => {\n    const { selectedTextTrack, selectedAudioTrack, ...unchanged } = props;\n    // $FlowFixMe Subset type and question marks don't work.\n    const newState: VideoStreamState = unchanged;\n    if ('selectedTextTrack' in props) {\n      newState.currentTextTrack = selectedTextTrack;\n    }\n    if ('selectedAudioTrack' in props) {\n      newState.currentAudioTrack = selectedAudioTrack;\n    }\n    this.modifiedStreamState = { ...this.modifiedStreamState, ...newState };\n    if (this.props.onStreamStateChange != null) {\n      this.props.onStreamStateChange(newState);\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.initialPlaybackProps) {\n      const { isPaused, isMuted, volume, bitrateCap, bitrateFix } = this.props.initialPlaybackProps;\n      this.updateStreamState({ isPaused, isMuted, volume, bitrateCap: bitrateCap, bitrateFix });\n    }\n    window.updateVideoState = this.updateStreamState;\n    if (this.props.onReady) {\n      this.props.onReady({\n        setProperties: (props: PlaybackProps) =>\n          runAsync(this.updateStreamState, props, Math.round(Math.random() * 1000)),\n        thirdPartyPlayer: null\n      });\n      updateWithDefaultValues(this.props.onStreamStateChange, this.props.initialMockState);\n      /*setInterval(() => {\n        this.props.onStreamStateChange({ isBuffering: this.isBuffering });\n        this.isBuffering = !this.isBuffering;\n      }, 5000);*/\n    }\n  }\n\n  componentDidUpdate(prevProps: VideoStreamerProps) {\n    if (this.props.onStreamStateChange !== prevProps.onStreamStateChange) {\n      updateWithDefaultValues(this.props.onStreamStateChange, this.modifiedStreamState);\n    }\n  }\n\n  render() {\n    return (\n      <div className={prefixClassNames(this.props.classNamePrefix, className, mockClassName, this.props.className)}>\n        <div>{this.props.children || 'Mock video player'}</div>\n      </div>\n    );\n  }\n}\n\nexport default MockVideoStreamer;\n"],"file":"MockVideoStreamer.js"}