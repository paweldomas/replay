{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/RxVideoStreamer/RxVideoStreamer.js"],"names":["resolveImplementation","streamer","configuration","videoElement","options","rxPlayer","customConfiguration","logLevel","RxPlayer","LogLevel","stopAtEnd","autoplay","streamRangeHelper","handleSourceChange","updateStreamState","applyProperties","window","log","rxEventHandlers","videoElementEventHandlers","setLifeCycleManager","playbackLifeCycleManager","pauseStreamRangeUpdater","cleanup","stop","dispose","Promise","resolve","startPlaybackSession","endPlaybackSession","thirdPartyPlayer","render","renderWithoutSource","textTrackManager","handleSourcePropChange","handleSelectedTextTrackChange","handleTextTracksPropChange","clear","audioTrackManager","handleSelectedAudioTrackChange","RxVideoStreamer"],"mappings":"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","sourcesContent":["// @flow\nimport type { VideoStreamerImplProps } from '../types';\nimport createVideoStreamerComponent from '../common/createVideoStreamerComponent';\nimport getStreamRangeHelper from './rxStreamRangeHelper';\nimport getSourceChangeHandler from './rxSourceChangeHandler';\nimport getFilteredStreamStateUpdater from '../common/filteredStreamStateUpdater';\nimport { getPropertyApplier } from '../common/propertyApplier';\nimport type { SimplifiedVideoStreamer, StreamerImplementationParts } from '../common/types';\nimport type { VideoStreamerConfiguration } from '../types';\nimport getPlaybackLifeCycleManager from '../common/playbackLifeCycleManager';\nimport getRxEventHandlers from './rxEventHandlers';\nimport { renderWithoutSource } from '../common/renderers';\nimport { getArrayLogger } from '../common/logger';\nimport RxPlayer from 'rx-player';\n\nexport type RxVideoStreamerConfiguration = VideoStreamerConfiguration & {\n  rxPlayer?: ?{\n    customConfiguration?: any\n  }\n};\n\nexport type RxVideoStreamerProps = VideoStreamerImplProps<RxVideoStreamerConfiguration>;\n\nfunction resolveImplementation(\n  streamer: SimplifiedVideoStreamer<RxVideoStreamerConfiguration, RxVideoStreamerProps>,\n  configuration: ?RxVideoStreamerConfiguration,\n  videoElement: HTMLVideoElement\n): Promise<StreamerImplementationParts<RxVideoStreamerConfiguration, RxVideoStreamerProps, any>> {\n  const options = configuration && configuration.rxPlayer && configuration.rxPlayer.customConfiguration;\n  const logLevel = configuration && configuration.logLevel;\n  if (logLevel) {\n    if (logLevel === 'VERBOSE') {\n      RxPlayer.LogLevel = 'DEBUG';\n    } else {\n      RxPlayer.LogLevel = logLevel;\n    }\n  }\n\n  const rxPlayer = new RxPlayer({ stopAtEnd: true, ...options, videoElement });\n  videoElement.autoplay = false;\n\n  const streamRangeHelper = getStreamRangeHelper(rxPlayer, configuration);\n  const handleSourceChange = getSourceChangeHandler(rxPlayer);\n  const updateStreamState = getFilteredStreamStateUpdater(streamer);\n\n  const applyProperties = getPropertyApplier(videoElement, streamRangeHelper);\n\n  const { log } = getArrayLogger(window, 'videoEvents');\n\n  const rxEventHandlers = getRxEventHandlers({\n    streamer,\n    videoElement,\n    rxPlayer,\n    streamRangeHelper,\n    configuration,\n    applyProperties,\n    updateStreamState,\n    log\n  });\n  const { videoElementEventHandlers, setLifeCycleManager } = rxEventHandlers;\n\n  const playbackLifeCycleManager = getPlaybackLifeCycleManager(\n    updateStreamState,\n    rxEventHandlers.pauseStreamRangeUpdater,\n    getArrayLogger(window, 'lifecycle').log\n  );\n  setLifeCycleManager(playbackLifeCycleManager);\n\n  function cleanup() {\n    playbackLifeCycleManager.cleanup();\n    rxEventHandlers.cleanup();\n    rxPlayer.stop();\n    rxPlayer.dispose();\n    return Promise.resolve();\n  }\n\n  const { startPlaybackSession, endPlaybackSession } = playbackLifeCycleManager;\n  const thirdPartyPlayer = rxPlayer;\n  const render = renderWithoutSource;\n\n  return Promise.resolve({\n    cleanup,\n    render,\n    thirdPartyPlayer,\n    applyProperties,\n    handleSourceChange,\n    startPlaybackSession,\n    endPlaybackSession,\n    videoElementEventHandlers,\n    textTrackManager: {\n      handleSourcePropChange: () => {},\n      cleanup: () => {},\n      handleSelectedTextTrackChange: () => {},\n      handleTextTracksPropChange: () => {},\n      clear: () => {}\n    },\n    audioTrackManager: { handleSourceChange: () => {}, cleanup: () => {}, handleSelectedAudioTrackChange: () => {} }\n  });\n}\n\nconst RxVideoStreamer = createVideoStreamerComponent('RxVideoStreamer', resolveImplementation);\n\nexport default RxVideoStreamer;\n"],"file":"RxVideoStreamer.js"}