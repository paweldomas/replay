{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/RxVideoStreamer/rxEventHandlers.js"],"names":["mapError","error","severity","PlaybackError","message","getRxEventHandlers","streamer","rxPlayer","videoElement","streamRangeHelper","configuration","applyProperties","updateStreamState","log","lifeCycleManager","setStage","_","getStage","htmlVideoHandlers","thirdPartyPlayer","videoElementEventHandlers","pauseStreamRangeUpdater","rxEventHandlers","playerStateChange","playerState","playState","isBuffering","volume","isMuted","muted","isPipAvailable","props","initialPlaybackProps","bitrateFix","bitrateCap","onVolumeChange","paused","isPaused","isSeeking","start","calculateNewState","stop","positionUpdate","warning","err","playbackError","onPlaybackError","setLifeCycleManager","manager","cleanup","Object","entries","forEach","name","handler","removeEventListener","addEventListener","onProgress"],"mappings":";;;;;;;AAIA;;AACA;;;;AAMA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAeC,QAAf,KACf,IAAIC,oBAAJ,CAAkB,cAAlB,EAAkC,UAAlC,EAA8C,sBAAsBF,KAAK,CAACG,OAA1E,EAAmFF,QAAnF,EAA6FD,KAA7F,CADF;;AAGA,MAAMI,kBAAkB,GAAG,CAAkC;AAC3DC,EAAAA,QAD2D;AAE3DC,EAAAA,QAF2D;AAG3DC,EAAAA,YAH2D;AAI3DC,EAAAA,iBAJ2D;AAK3DC,EAAAA,aAL2D;AAM3DC,EAAAA,eAN2D;AAO3DC,EAAAA,iBAP2D;AAQ3DC,EAAAA;AAR2D,CAAlC,KAoBrB;AACJ,MAAIC,gBAAgB,GAAG;AACrBC,IAAAA,QAAQ,EAAGC,CAAD,IAA0B,CAAE,CADjB;AAErBC,IAAAA,QAAQ,EAAE,MAAM,CAAE;AAFG,GAAvB;AAKA,QAAMC,iBAAiB,GAAG,sCAA2B;AACnDZ,IAAAA,QADmD;AAEnDE,IAAAA,YAFmD;AAGnDW,IAAAA,gBAAgB,EAAEZ,QAHiC;AAInDE,IAAAA,iBAJmD;AAKnDC,IAAAA,aALmD;AAMnDG,IAAAA,GANmD;AAOnDF,IAAAA,eAPmD;AAQnDC,IAAAA;AARmD,GAA3B,CAA1B;AANI,QAiBIQ,yBAjBJ,GAiB2DF,iBAjB3D,CAiBIE,yBAjBJ;AAAA,QAiB+BC,uBAjB/B,GAiB2DH,iBAjB3D,CAiB+BG,uBAjB/B;AAmBJ,QAAMC,eAAe,GAAG;AACtBC,IAAAA,iBAAiB,EAAEC,WAAW,IAAI;AAChCX,MAAAA,GAAG,IAAIA,GAAG,CAACW,WAAD,CAAV;;AACA,cAAQA,WAAR;AACE,aAAK,SAAL;AACEV,UAAAA,gBAAgB,CAACC,QAAjB,CAA0B,UAA1B;AAEAH,UAAAA,iBAAiB,CAAC;AAChBa,YAAAA,SAAS,EAAE,UADK;AAEhBC,YAAAA,WAAW,EAAE,IAFG;AAGhBC,YAAAA,MAAM,EAAEnB,YAAY,CAACmB,MAHL;AAIhBC,YAAAA,OAAO,EAAEpB,YAAY,CAACqB,KAJN;AAKhBC,YAAAA,cAAc,EAAEZ,iBAAiB,CAACY,cAAlB;AALA,WAAD,CAAjB;AAOA;;AACF,aAAK,QAAL;AACE,cAAIxB,QAAQ,CAACyB,KAAT,CAAeC,oBAAnB,EAAyC;AAAA,0CACa1B,QAAQ,CAACyB,KAAT,CAAeC,oBAD5B;AAAA,kBAC/BJ,OAD+B,yBAC/BA,OAD+B;AAAA,kBACtBD,MADsB,yBACtBA,MADsB;AAAA,kBACdM,UADc,yBACdA,UADc;AAAA,kBACFC,UADE,yBACFA,UADE;AAEvCvB,YAAAA,eAAe,CAAC;AAAEiB,cAAAA,OAAF;AAAWD,cAAAA,MAAX;AAAmBM,cAAAA,UAAnB;AAA+BC,cAAAA;AAA/B,aAAD,CAAf;;AACA,gBAAIP,MAAM,IAAI,IAAd,EAAoB;AAClBQ,cAAAA,cAAc;AACf;AACF;;AACDrB,UAAAA,gBAAgB,CAACC,QAAjB,CAA0B,SAA1B;;AACA,cAAIP,YAAY,CAAC4B,MAAjB,EAAyB;AACvBxB,YAAAA,iBAAiB,CAAC;AAAEa,cAAAA,SAAS,EAAE,QAAb;AAAuBY,cAAAA,QAAQ,EAAE,IAAjC;AAAuCX,cAAAA,WAAW,EAAE,KAApD;AAA2DY,cAAAA,SAAS,EAAE;AAAtE,aAAD,CAAjB;AACAjB,YAAAA,uBAAuB,CAACkB,KAAxB;AACD;;AACD3B,UAAAA,iBAAiB,CAACH,iBAAiB,CAAC+B,iBAAlB,EAAD,CAAjB;AACA;;AACF,aAAK,SAAL;AACE5B,UAAAA,iBAAiB,CAAC;AAAEa,YAAAA,SAAS,EAAE,SAAb;AAAwBC,YAAAA,WAAW,EAAE,KAArC;AAA4CW,YAAAA,QAAQ,EAAE,KAAtD;AAA6DC,YAAAA,SAAS,EAAE;AAAxE,WAAD,CAAjB;AACAjB,UAAAA,uBAAuB,CAACoB,IAAxB;AACA;;AACF,aAAK,QAAL;AACE7B,UAAAA,iBAAiB,CAAC;AAAEa,YAAAA,SAAS,EAAE,QAAb;AAAuBY,YAAAA,QAAQ,EAAE,IAAjC;AAAuCX,YAAAA,WAAW,EAAE,KAApD;AAA2DY,YAAAA,SAAS,EAAE;AAAtE,WAAD,CAAjB;AACAjB,UAAAA,uBAAuB,CAACkB,KAAxB;AACA;;AACF,aAAK,WAAL;AACA,aAAK,WAAL;AACE3B,UAAAA,iBAAiB,CAAC;AAAEa,YAAAA,SAAS,EAAE,WAAb;AAA0BC,YAAAA,WAAW,EAAE;AAAvC,WAAD,CAAjB;AACA;;AACF,aAAK,SAAL;AACEd,UAAAA,iBAAiB,CAAC;AAAEa,YAAAA,SAAS,EAAE,SAAb;AAAwBC,YAAAA,WAAW,EAAE,IAArC;AAA2CY,YAAAA,SAAS,EAAE;AAAtD,WAAD,CAAjB;AACA;;AACF,aAAK,OAAL;AACA,aAAK,SAAL;AACE;AACA;AACA;AACA1B,UAAAA,iBAAiB,CAAC;AAAEa,YAAAA,SAAS,EAAE,UAAb;AAAyBC,YAAAA,WAAW,EAAE,KAAtC;AAA6CY,YAAAA,SAAS,EAAE;AAAxD,WAAD,CAAjB;AACAjB,UAAAA,uBAAuB,CAACoB,IAAxB;AACA;;AACF;AACE5B,UAAAA,GAAG,IAAIA,GAAG,CAAC,4BAAD,CAAV;AAnDJ;AAqDD,KAxDqB;AAyDtB6B,IAAAA,cAAc,EAAE,MAAM;AACpB9B,MAAAA,iBAAiB,CAACH,iBAAiB,CAAC+B,iBAAlB,EAAD,CAAjB;AACD,KA3DqB;AA4DtBG,IAAAA,OAAO,EAAGC,GAAD,IAAgB;AACvB,YAAMC,aAAa,GAAG7C,QAAQ,CAAC4C,GAAD,EAAM,SAAN,CAA9B;;AACA,UAAItC,QAAQ,CAACyB,KAAT,CAAee,eAAnB,EAAoC;AAClCxC,QAAAA,QAAQ,CAACyB,KAAT,CAAee,eAAf,CAA+BD,aAA/B;AACD;AACF,KAjEqB;AAkEtB5C,IAAAA,KAAK,EAAG2C,GAAD,IAAgB;AACrB,YAAMC,aAAa,GAAG7C,QAAQ,CAAC4C,GAAD,EAAM,OAAN,CAA9B;;AACA,UAAItC,QAAQ,CAACyB,KAAT,CAAee,eAAnB,EAAoC;AAClCxC,QAAAA,QAAQ,CAACyB,KAAT,CAAee,eAAf,CAA+BD,aAA/B;AACD;;AACD/B,MAAAA,gBAAgB,CAACC,QAAjB,CAA0B,MAA1B;AACAH,MAAAA,iBAAiB,CAAC;AAAEa,QAAAA,SAAS,EAAE,UAAb;AAAyBC,QAAAA,WAAW,EAAE,KAAtC;AAA6CY,QAAAA,SAAS,EAAE;AAAxD,OAAD,CAAjB;AACAjB,MAAAA,uBAAuB,CAACoB,IAAxB;AACD;AA1EqB,GAAxB;;AA6EA,WAASM,mBAAT,CAA6BC,OAA7B,EAAkH;AAChHlC,IAAAA,gBAAgB,GAAGkC,OAAnB;AACA9B,IAAAA,iBAAiB,CAAC6B,mBAAlB,CAAsCC,OAAtC;AACD;;AAED,WAASC,OAAT,GAAmB;AACjB/B,IAAAA,iBAAiB,CAAC+B,OAAlB;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAe7B,eAAf,EAAgC8B,OAAhC,CAAwC,CAAC,CAACC,IAAD,EAAOC,OAAP,CAAD,KAAqB;AAC3D/C,MAAAA,QAAQ,CAACgD,mBAAT,CAA6BF,IAA7B,EAAmCC,OAAnC;AACD,KAFD;AAGD;;AAEDJ,EAAAA,MAAM,CAACC,OAAP,CAAe7B,eAAf,EAAgC8B,OAAhC,CAAwC,CAAC,CAACC,IAAD,EAAOC,OAAP,CAAD,KAAqB;AAC3D/C,IAAAA,QAAQ,CAACiD,gBAAT,CAA0BH,IAA1B,EAAgCC,OAAhC;AACD,GAFD;AA5GI,QAgHInB,cAhHJ,GAgHmCf,yBAhHnC,CAgHIe,cAhHJ;AAAA,QAgHoBsB,UAhHpB,GAgHmCrC,yBAhHnC,CAgHoBqC,UAhHpB;AAiHJ,SAAO;AACLrC,IAAAA,yBAAyB,EAAE;AACzBe,MAAAA,cADyB;AAEzBsB,MAAAA;AAFyB,KADtB;AAKLpC,IAAAA,uBALK;AAML0B,IAAAA,mBANK;AAOLE,IAAAA;AAPK,GAAP;AASD,CA9ID;;eAgJe5C,kB","sourcesContent":["// @flow\nimport type { BasicVideoEventHandlersProps } from '../BasicVideoStreamer/basicVideoEventHandlers';\nimport type { PlaybackLifeCycle, StreamRangeHelper } from '../common/types';\nimport type { PlaybackProps, VideoStreamState } from '../types';\nimport { PlaybackError } from '../types';\nimport getBasicVideoEventHandlers from '../BasicVideoStreamer/basicVideoEventHandlers';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst mapError = (error: Error, severity: 'FATAL' | 'WARNING') =>\n  new PlaybackError('STREAM_ERROR', 'rxplayer', 'Rx-player error: ' + error.message, severity, error);\n\nconst getRxEventHandlers = <P: BasicVideoEventHandlersProps>({\n  streamer,\n  rxPlayer,\n  videoElement,\n  streamRangeHelper,\n  configuration,\n  applyProperties,\n  updateStreamState,\n  log\n}: {\n  streamer: {\n    props: P\n  },\n  rxPlayer: any,\n  videoElement: HTMLVideoElement,\n  streamRangeHelper: StreamRangeHelper,\n  configuration: ?{ pauseUpdateInterval?: ?number },\n  applyProperties: PlaybackProps => void,\n  updateStreamState: VideoStreamState => void,\n  log?: string => void\n}) => {\n  let lifeCycleManager = {\n    setStage: (_: PlaybackLifeCycle) => {},\n    getStage: () => {}\n  };\n\n  const htmlVideoHandlers = getBasicVideoEventHandlers({\n    streamer,\n    videoElement,\n    thirdPartyPlayer: rxPlayer,\n    streamRangeHelper,\n    configuration,\n    log,\n    applyProperties,\n    updateStreamState\n  });\n\n  const { videoElementEventHandlers, pauseStreamRangeUpdater } = htmlVideoHandlers;\n\n  const rxEventHandlers = {\n    playerStateChange: playerState => {\n      log && log(playerState);\n      switch (playerState) {\n        case 'LOADING':\n          lifeCycleManager.setStage('starting');\n\n          updateStreamState({\n            playState: 'starting',\n            isBuffering: true,\n            volume: videoElement.volume,\n            isMuted: videoElement.muted,\n            isPipAvailable: htmlVideoHandlers.isPipAvailable()\n          });\n          break;\n        case 'LOADED':\n          if (streamer.props.initialPlaybackProps) {\n            const { isMuted, volume, bitrateFix, bitrateCap } = streamer.props.initialPlaybackProps;\n            applyProperties({ isMuted, volume, bitrateFix, bitrateCap });\n            if (volume != null) {\n              onVolumeChange();\n            }\n          }\n          lifeCycleManager.setStage('started');\n          if (videoElement.paused) {\n            updateStreamState({ playState: 'paused', isPaused: true, isBuffering: false, isSeeking: false });\n            pauseStreamRangeUpdater.start();\n          }\n          updateStreamState(streamRangeHelper.calculateNewState());\n          break;\n        case 'PLAYING':\n          updateStreamState({ playState: 'playing', isBuffering: false, isPaused: false, isSeeking: false });\n          pauseStreamRangeUpdater.stop();\n          break;\n        case 'PAUSED':\n          updateStreamState({ playState: 'paused', isPaused: true, isBuffering: false, isSeeking: false });\n          pauseStreamRangeUpdater.start();\n          break;\n        case 'BUFFERING':\n        case 'RELOADING':\n          updateStreamState({ playState: 'buffering', isBuffering: true });\n          break;\n        case 'SEEKING':\n          updateStreamState({ playState: 'seeking', isBuffering: true, isSeeking: true });\n          break;\n        case 'ENDED':\n        case 'STOPPED':\n          //if (lifeCycleManager.getStage() === 'started') {\n          //  lifeCycleManager.setStage('ended');\n          //}\n          updateStreamState({ playState: 'inactive', isBuffering: false, isSeeking: false });\n          pauseStreamRangeUpdater.stop();\n          break;\n        default:\n          log && log('Unrecognised player state.');\n      }\n    },\n    positionUpdate: () => {\n      updateStreamState(streamRangeHelper.calculateNewState());\n    },\n    warning: (err: Error) => {\n      const playbackError = mapError(err, 'WARNING');\n      if (streamer.props.onPlaybackError) {\n        streamer.props.onPlaybackError(playbackError);\n      }\n    },\n    error: (err: Error) => {\n      const playbackError = mapError(err, 'FATAL');\n      if (streamer.props.onPlaybackError) {\n        streamer.props.onPlaybackError(playbackError);\n      }\n      lifeCycleManager.setStage('dead');\n      updateStreamState({ playState: 'inactive', isBuffering: false, isSeeking: false });\n      pauseStreamRangeUpdater.stop();\n    }\n  };\n\n  function setLifeCycleManager(manager: { setStage: PlaybackLifeCycle => void, getStage: () => PlaybackLifeCycle }) {\n    lifeCycleManager = manager;\n    htmlVideoHandlers.setLifeCycleManager(manager);\n  }\n\n  function cleanup() {\n    htmlVideoHandlers.cleanup();\n    Object.entries(rxEventHandlers).forEach(([name, handler]) => {\n      rxPlayer.removeEventListener(name, handler);\n    });\n  }\n\n  Object.entries(rxEventHandlers).forEach(([name, handler]) => {\n    rxPlayer.addEventListener(name, handler);\n  });\n\n  const { onVolumeChange, onProgress } = videoElementEventHandlers;\n  return {\n    videoElementEventHandlers: {\n      onVolumeChange,\n      onProgress\n    },\n    pauseStreamRangeUpdater,\n    setLifeCycleManager,\n    cleanup\n  };\n};\n\nexport default getRxEventHandlers;\n"],"file":"rxEventHandlers.js"}