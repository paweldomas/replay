{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/RxVideoStreamer/rxSourceChangeHandler.js"],"names":["fetchServiceCertificate","url","fetch","then","response","ok","arrayBuffer","acquireLicense","headers","body","method","getSourceChangeHandler","rxPlayer","source","initialPlaybackProps","prevProps","normalizedSource","licenseUrl","startPosition","autoPlay","isPaused","options","streamUrl","licenseAcquisitionDetails","licenseRequestHeaders","getLicense","message","messageType","keySystems","type","startAt","position","contentType","transport","Promise","reject","PlaybackError","widevineServiceCertificateUrl","navigator","userAgent","indexOf","cert","serverCertificate","loadVideo","resolve","stop"],"mappings":"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","sourcesContent":["// @flow\nimport type { InitialPlaybackProps, PlaybackSource } from '../types';\nimport { PlaybackError } from '../types';\nimport normalizeSource from '../common/sourceNormalizer';\n\nconst fetchServiceCertificate = (url: string) => fetch(url).then(response => response.ok && response.arrayBuffer());\n\nconst acquireLicense = (url: string, headers: ?{ [string]: string }, body: ArrayBuffer) =>\n  fetch(\n    url,\n    headers\n      ? {\n          method: 'POST',\n          headers,\n          body\n        }\n      : { method: 'POST', body }\n  ).then(response => response.ok && response.arrayBuffer());\n\nexport default function getSourceChangeHandler(rxPlayer: any) {\n  return <P: { source?: ?PlaybackSource, initialPlaybackProps?: InitialPlaybackProps }>(\n    { source, initialPlaybackProps }: P,\n    prevProps: ?P\n  ): Promise<void> => {\n    const normalizedSource = normalizeSource(source);\n    if (normalizedSource) {\n      const licenseUrl = normalizedSource.licenseUrl;\n      const startPosition = normalizedSource.startPosition;\n      const autoPlay = !(initialPlaybackProps && initialPlaybackProps.isPaused);\n      const options: any = {\n        url: normalizedSource.streamUrl,\n        autoPlay\n      };\n      if (licenseUrl) {\n        const headers =\n          normalizedSource.licenseAcquisitionDetails &&\n          normalizedSource.licenseAcquisitionDetails.licenseRequestHeaders;\n        const getLicense = (message: ArrayBuffer, messageType: string) => {\n          if (messageType !== 'license-release') {\n            return acquireLicense(licenseUrl, headers, message);\n          }\n        };\n        options.keySystems = [\n          {\n            type: 'playready',\n            getLicense\n          },\n          {\n            type: 'widevine',\n            getLicense\n          }\n        ];\n      }\n      if (startPosition) {\n        options.startAt = { position: startPosition };\n      }\n\n      switch (normalizedSource.contentType) {\n        case 'application/vnd.ms-sstr+xml':\n          options.transport = 'smooth';\n          break;\n        case 'application/dash+xml':\n          options.transport = 'dash';\n          break;\n        default:\n          return Promise.reject(\n            new PlaybackError(\n              'STREAM_ERROR_TECHNOLOGY_UNSUPPORTED',\n              'rxplayer',\n              'Unspecified source contentType. Cannot decide if the source is a smooth stream or MPEG-DASH stream.'\n            )\n          );\n      }\n      if (\n        options.keySystems &&\n        normalizedSource.licenseAcquisitionDetails &&\n        normalizedSource.licenseAcquisitionDetails.widevineServiceCertificateUrl &&\n        navigator.userAgent.indexOf('Edge') < 0 &&\n        (navigator.userAgent.indexOf('Chrome') >= 0 || navigator.userAgent.indexOf('Firefox') >= 0)\n      ) {\n        return fetchServiceCertificate(normalizedSource.licenseAcquisitionDetails.widevineServiceCertificateUrl).then(\n          cert => {\n            options.keySystems[1].serverCertificate = cert;\n            rxPlayer.loadVideo(options);\n          }\n        );\n      } else {\n        rxPlayer.loadVideo(options);\n        return Promise.resolve();\n      }\n    } else {\n      rxPlayer.stop();\n      return Promise.resolve();\n    }\n  };\n}\n"],"file":"rxSourceChangeHandler.js"}