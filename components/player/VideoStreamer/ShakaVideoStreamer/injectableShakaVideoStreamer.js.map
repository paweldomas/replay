{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/ShakaVideoStreamer/injectableShakaVideoStreamer.js"],"names":["withShakaLibrary","shakaLib","streamer","configuration","videoElement","shakaPlayer","e","Promise","reject","streamRangeHelper","handleSourceChange","updateStreamState","textTrackManager","audioTrackManager","bitrateManager","window","log","applyProperties","shakaEventHandlers","videoElementEventHandlers","setLifeCycleManager","playbackLifeCycleManager","pauseStreamRangeUpdater","cleanup","startPlaybackSession","endPlaybackSession","thirdPartyPlayer","render","renderWithoutSource","resolve","createVideoStreamerWithShakaLibrary","shakaLibrary"],"mappings":"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","sourcesContent":["// @flow\nimport type { VideoStreamerImplProps } from '../types';\n\nimport createVideoStreamerComponent from '../common/createVideoStreamerComponent';\nimport type { Shaka, ShakaPlayer, ShakaRequestFilter, ShakaResponseFilter } from './types';\nimport { shakaSetup, shakaCleanup } from './shakaSetup';\nimport getStreamRangeHelper from './shakaStreamRangeHelper';\nimport getSourceChangeHandler from './shakaSourceChangeHandler';\nimport getFilteredStreamStateUpdater from '../common/filteredStreamStateUpdater';\nimport { getPropertyApplier } from '../common/propertyApplier';\nimport type { SimplifiedVideoStreamer, StreamerImplementationParts } from '../common/types';\nimport type { VideoStreamerConfiguration } from '../types';\nimport getPlaybackLifeCycleManager from '../common/playbackLifeCycleManager';\nimport getShakaEventHandlers from './shakaEventHandlers';\nimport { renderWithoutSource } from '../common/renderers';\nimport { getArrayLogger } from '../common/logger';\nimport getShakaBitrateManager from './shakaBitrateManager';\nimport getShakaTextTrackManager from './shakaTextTrackManager';\nimport getShakaAudioTrackManager from './shakaAudioTrackManager';\nimport mapShakaError from './shakaErrorMapper';\n\nexport type ShakaVideoStreamerConfiguration = VideoStreamerConfiguration & {\n  shakaPlayer?: ?{\n    installPolyfills?: boolean,\n    customConfiguration?: any // Actually the config structure that can be passed to shaka.Player::configure.\n  }\n};\n\nexport type ShakaVideoStreamerProps = VideoStreamerImplProps<ShakaVideoStreamerConfiguration> & {\n  shakaRequestFilter?: ?ShakaRequestFilter,\n  shakaResponseFilter?: ?ShakaResponseFilter\n};\nconst withShakaLibrary = (shakaLib: Shaka) => (\n  streamer: SimplifiedVideoStreamer<ShakaVideoStreamerConfiguration, ShakaVideoStreamerProps>,\n  configuration: ?ShakaVideoStreamerConfiguration,\n  videoElement: HTMLVideoElement\n): Promise<StreamerImplementationParts<ShakaVideoStreamerConfiguration, ShakaVideoStreamerProps, ShakaPlayer>> => {\n  let shakaPlayer;\n  try {\n    shakaPlayer = shakaSetup(shakaLib, videoElement, configuration);\n  } catch (e) {\n    return Promise.reject(mapShakaError(shakaLib, false, e));\n  }\n\n  const streamRangeHelper = getStreamRangeHelper(videoElement, shakaPlayer, configuration); // S\n  const handleSourceChange = getSourceChangeHandler(shakaLib, shakaPlayer); // S\n  const updateStreamState = getFilteredStreamStateUpdater(streamer); // G\n\n  const textTrackManager = getShakaTextTrackManager(shakaPlayer, updateStreamState);\n  const audioTrackManager = getShakaAudioTrackManager(shakaPlayer, updateStreamState);\n  const bitrateManager = getShakaBitrateManager(\n    streamer,\n    shakaPlayer,\n    updateStreamState,\n    getArrayLogger(window, 'bitrateManager').log\n  );\n\n  const applyProperties = getPropertyApplier(\n    videoElement,\n    streamRangeHelper,\n    textTrackManager,\n    audioTrackManager,\n    bitrateManager\n  ); // G\n\n  const { log } = getArrayLogger(window, 'videoEvents');\n\n  const shakaEventHandlers = getShakaEventHandlers({\n    shakaLib,\n    streamer,\n    videoElement,\n    shakaPlayer,\n    streamRangeHelper,\n    configuration,\n    applyProperties,\n    updateStreamState,\n    log\n  });\n  const { videoElementEventHandlers, setLifeCycleManager } = shakaEventHandlers;\n\n  const playbackLifeCycleManager = getPlaybackLifeCycleManager(\n    updateStreamState,\n    shakaEventHandlers.pauseStreamRangeUpdater,\n    getArrayLogger(window, 'lifecycle').log\n  );\n  setLifeCycleManager(playbackLifeCycleManager);\n\n  function cleanup() {\n    textTrackManager.cleanup();\n    audioTrackManager.cleanup();\n    playbackLifeCycleManager.cleanup();\n    shakaEventHandlers.cleanup();\n    bitrateManager.cleanup();\n    return shakaCleanup(shakaPlayer);\n  }\n\n  const { startPlaybackSession, endPlaybackSession } = playbackLifeCycleManager;\n  const thirdPartyPlayer = shakaPlayer;\n  const render = renderWithoutSource;\n\n  return Promise.resolve({\n    cleanup,\n    render,\n    textTrackManager,\n    audioTrackManager,\n    thirdPartyPlayer,\n    applyProperties,\n    handleSourceChange,\n    startPlaybackSession,\n    endPlaybackSession,\n    videoElementEventHandlers\n  });\n};\n\nconst createVideoStreamerWithShakaLibrary = (shakaLibrary: Shaka) =>\n  createVideoStreamerComponent('ShakaVideoStreamer', withShakaLibrary(shakaLibrary));\n\nexport default createVideoStreamerWithShakaLibrary;\n"],"file":"injectableShakaVideoStreamer.js"}