{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/ShakaVideoStreamer/shakaBitrateManager.js"],"names":["getBitrateAsBps","track","bandwidth","numericSort","a","b","bandwidthSort","getBitrateAsKbps","Math","ceil","isActiveTrack","active","type","isUnique","item","index","arr","indexOf","resetConfiguration","abr","enabled","restrictions","maxBandwidth","Infinity","getShakaBitrateManager","streamer","shakaPlayer","updateStreamState","log","previousBitrates","updateBitrateProps","variantTracks","getVariantTracks","currentBitrate","filter","bitrates","map","sort","updates","Object","keys","length","capBitrate","cap","isNaN","configure","bitrateCap","lowestBitrate","max","fixBitrate","bitrate","sortedTracks","slice","desiredVariantTrack","selectVariantTrack","bitrateFix","e","matchingTrack","shakaEventHandlers","loading","streaming","adaptation","trackschanged","entries","forEach","name","handler","addEventListener","cleanup","removeEventListener"],"mappings":"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","sourcesContent":["// @flow\nimport type { ShakaPlayer, ShakaTrack } from './types';\nimport type { InitialPlaybackProps, VideoStreamState } from '../types';\nimport { isShallowEqual } from '../../../common';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\ntype PropsWithInitial = {\n  initialPlaybackProps?: InitialPlaybackProps\n};\n\nfunction getBitrateAsBps(track) {\n  return (track && track.bandwidth) || 0;\n}\n\nfunction numericSort(a, b) {\n  return a - b;\n}\n\nfunction bandwidthSort(a: ShakaTrack, b: ShakaTrack) {\n  return a.bandwidth - b.bandwidth;\n}\n\nfunction getBitrateAsKbps(track: ShakaTrack) {\n  return (track && Math.ceil(track.bandwidth / 1000)) || 0;\n}\n\nfunction isActiveTrack(track: ShakaTrack) {\n  return track && track.active && track.type === 'variant';\n}\n\nfunction isUnique(item, index, arr) {\n  return arr.indexOf(item) === index;\n}\n\nconst resetConfiguration = { abr: { enabled: true, restrictions: { maxBandwidth: Infinity } } };\n\nconst getShakaBitrateManager = <P: PropsWithInitial>(\n  streamer: { props: P },\n  shakaPlayer: ShakaPlayer,\n  updateStreamState: VideoStreamState => void,\n  log?: ?(string, any) => void\n) => {\n  let previousBitrates = [];\n\n  function updateBitrateProps() {\n    let variantTracks: Array<ShakaTrack> = shakaPlayer.getVariantTracks();\n    /*const maxBandwidth = shakaPlayer.getConfiguration().abr['restrictions'] && shakaPlayer.getConfiguration().abr['restrictions'].maxBandwidth;\n    if (maxBandwidth && maxBandwidth !== Infinity && variantTracks.length > previousVariantTracks.length) {\n      variantTracks = previousVariantTracks;\n    }// else {\n    // previousVariantTracks = variantTracks;\n    //}*/\n    const currentBitrate = getBitrateAsKbps(variantTracks.filter(isActiveTrack)[0]);\n    const bitrates = variantTracks\n      .map(getBitrateAsKbps)\n      .filter(isUnique)\n      .sort(numericSort);\n\n    const updates: Object = {};\n    if (currentBitrate) {\n      updates.currentBitrate = getBitrateAsKbps(variantTracks.filter(isActiveTrack)[0]);\n    }\n    if (!isShallowEqual(previousBitrates, bitrates)) {\n      previousBitrates = bitrates;\n      updates.bitrates = bitrates;\n    }\n    if (Object.keys(updates).length > 0) {\n      updateStreamState(updates);\n    }\n  }\n\n  function capBitrate(cap: ?number) {\n    if (isNaN(cap) || cap === Infinity || cap == null || cap < 0) {\n      log && log('Resetting restrictions for bitrate.');\n      shakaPlayer.configure(resetConfiguration);\n      updateStreamState({ bitrateCap: null });\n    } else {\n      const lowestBitrate = shakaPlayer\n        .getVariantTracks()\n        .map(getBitrateAsBps)\n        .sort(numericSort)[0];\n      if (lowestBitrate) {\n        const maxBandwidth = Math.max(cap * 1000, lowestBitrate);\n        const restrictions = { maxBandwidth };\n        shakaPlayer.configure({ abr: { enabled: true, restrictions: restrictions } });\n        updateStreamState({ bitrateCap: Math.ceil(maxBandwidth / 1000) });\n        if (restrictions.maxBandwidth === lowestBitrate) {\n          log && log('Applying restrictions for bitrate, but aligning to lowest available bitrate.', restrictions);\n        } else {\n          log && log('Applying restrictions for bitrate.', restrictions);\n        }\n      } else {\n        log &&\n          log(\n            'Bitrate range not found. Not safe to applying restrictions for bitrate.',\n            shakaPlayer.getVariantTracks()\n          );\n      }\n    }\n  }\n\n  function fixBitrate(bitrate: ?(number | 'max' | 'min')) {\n    if (typeof bitrate === 'string') {\n      try {\n        const sortedTracks = shakaPlayer\n          .getVariantTracks()\n          .slice(0)\n          .sort(bandwidthSort);\n        const desiredVariantTrack =\n          bitrate === 'min' ? sortedTracks[0] : bitrate === 'max' ? sortedTracks[sortedTracks.length - 1] : null;\n        if (desiredVariantTrack) {\n          shakaPlayer.configure({ abr: { enabled: false, restrictions: { maxBandwidth: Infinity } } });\n          shakaPlayer.selectVariantTrack(desiredVariantTrack);\n          updateStreamState({ bitrateFix: getBitrateAsKbps(desiredVariantTrack) });\n        } else {\n          shakaPlayer.configure(resetConfiguration);\n          updateStreamState({ bitrateFix: null });\n          log &&\n            log(\n              'Unknown string specified for bitrate lock. Please use a value of type number if a bitrate specified by kbps is intended.',\n              bitrate\n            );\n        }\n      } catch (e) {\n        shakaPlayer.configure(resetConfiguration);\n        updateStreamState({ bitrateFix: null });\n        log &&\n          log(\n            'Attempting to set ' + bitrate + 'imum bitrate, but no tracks found. A bit too early, maybe?',\n            shakaPlayer.getVariantTracks()\n          );\n      }\n    } else if (isNaN(bitrate) || bitrate == null || bitrate < 0 || !bitrate) {\n      shakaPlayer.configure(resetConfiguration);\n      updateStreamState({ bitrateFix: null });\n      log && log('Resetting bitrate locking.');\n    } else {\n      const matchingTrack = shakaPlayer.getVariantTracks().filter(function(track) {\n        return getBitrateAsKbps(track) === bitrate;\n      })[0];\n      if (matchingTrack) {\n        shakaPlayer.configure({ abr: { enabled: false, restrictions: { maxBandwidth: Infinity } } });\n        shakaPlayer.selectVariantTrack(matchingTrack);\n        updateStreamState({ bitrateFix: getBitrateAsKbps(matchingTrack) });\n        log && log('Locking at bitrate ' + bitrate + '.', matchingTrack);\n      } else {\n        shakaPlayer.configure(resetConfiguration);\n        updateStreamState({ bitrateFix: null });\n        log &&\n          log(\n            'Could not finding matching track for specified lock bitrate ' + bitrate + '.',\n            shakaPlayer.getVariantTracks()\n          );\n      }\n    }\n  }\n\n  const shakaEventHandlers = {\n    loading: () => {\n      previousBitrates = [];\n    },\n    streaming: updateBitrateProps,\n    adaptation: updateBitrateProps,\n    trackschanged: updateBitrateProps\n  };\n\n  Object.entries(shakaEventHandlers).forEach(([name, handler]) => {\n    shakaPlayer.addEventListener(name, handler);\n  });\n\n  function cleanup() {\n    Object.entries(shakaEventHandlers).forEach(([name, handler]) => {\n      shakaPlayer.removeEventListener(name, handler);\n    });\n  }\n\n  return {\n    cleanup,\n    fixBitrate,\n    capBitrate\n  };\n};\n\nexport default getShakaBitrateManager;\n"],"file":"shakaBitrateManager.js"}