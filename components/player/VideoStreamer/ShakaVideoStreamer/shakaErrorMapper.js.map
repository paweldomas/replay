{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/ShakaVideoStreamer/shakaErrorMapper.js"],"names":["errorTechnology","STREAM_ERROR","STREAM_ERROR_DRM_CLIENT_UNAVAILABLE","STREAM_ERROR_DOWNLOAD","STREAM_ERROR_DECODE","STREAM_ERROR_DRM_OUTPUT_BLOCKED","errorFromCodeMappings","shakaError","data","classification","defaultError","reverseLookup","numeric","mappings","Object","keys","filter","key","parseInt","buildMessage","shakaLib","code","message","util","Error","Code","category","Category","getSeverity","isStarted","test","getFromDeclarativeMapping","mapping","Math","floor","isEmeBlocked","userAgent","location","protocol","hostname","indexOf","mapShakaError","PlaybackError"],"mappings":"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","sourcesContent":["// @flow\nimport type { ErrorCode, Severity } from '../types';\nimport type { Shaka, ShakaError } from './types';\nimport { PlaybackError } from '../types';\n\nconst errorTechnology = 'shaka';\n\nconst STREAM_ERROR = 'STREAM_ERROR';\nconst STREAM_ERROR_DRM_CLIENT_UNAVAILABLE = 'STREAM_ERROR_DRM_CLIENT_UNAVAILABLE';\nconst STREAM_ERROR_DOWNLOAD = 'STREAM_ERROR_DOWNLOAD';\nconst STREAM_ERROR_DECODE = 'STREAM_ERROR_DECODE';\nconst STREAM_ERROR_DRM_OUTPUT_BLOCKED = 'STREAM_ERROR_DRM_OUTPUT_BLOCKED';\n\nconst errorFromCodeMappings = {\n  '3016': function(shakaError) {\n    if (shakaError.data && shakaError.data[0]) {\n      if (shakaError.data[0] === 3) {\n        return { classification: STREAM_ERROR_DECODE };\n      }\n    }\n    return { classification: STREAM_ERROR };\n  },\n  '4012': { classification: STREAM_ERROR },\n  '6001': { classification: STREAM_ERROR_DRM_CLIENT_UNAVAILABLE },\n  '6002': { classification: STREAM_ERROR_DRM_CLIENT_UNAVAILABLE },\n  '6003': { classification: STREAM_ERROR },\n  '6007': { classification: STREAM_ERROR_DOWNLOAD },\n  '6008': { classification: STREAM_ERROR_DOWNLOAD },\n  '6013': { classification: STREAM_ERROR },\n  '7000': { classification: '' },\n\n  // Error codes starting with the following digits, are grouped together.\n  '1': { classification: STREAM_ERROR_DOWNLOAD },\n  '2': { classification: STREAM_ERROR_DECODE },\n  '3': { classification: STREAM_ERROR_DECODE },\n  '4': { classification: STREAM_ERROR_DECODE },\n  '5': { classification: STREAM_ERROR_DECODE },\n  '6': { classification: STREAM_ERROR_DECODE }\n};\n\nconst defaultError = { classification: STREAM_ERROR };\n\nfunction reverseLookup(numeric: string | number, mappings: { [string]: string }) {\n  return Object.keys(mappings).filter(key => {\n    return mappings[key] === parseInt(numeric, 10);\n  })[0];\n}\n\nfunction buildMessage(shakaLib: Shaka, shakaError: ShakaError, classification: ErrorCode) {\n  if (shakaError.code === 1001 && shakaError.data[1] != null) {\n    return 'Shaka request failed with status ' + shakaError.data[1] + ' for URL ' + shakaError.data[0];\n  }\n  if (shakaError.code === 1002) {\n    return 'Shaka request could not be performed for URL ' + shakaError.data[0];\n  }\n  if (shakaError.code === 1003) {\n    return 'Shaka request timed out for URL ' + shakaError.data[0];\n  }\n  if (shakaError.message) {\n    return shakaError.message;\n  }\n  if (classification === STREAM_ERROR_DRM_CLIENT_UNAVAILABLE) {\n    return 'Playback of protected content appears to be disabled in the browser.';\n  }\n  if (classification === STREAM_ERROR_DRM_OUTPUT_BLOCKED) {\n    return 'Playback of protected content appears to be disallowed, perhaps due to a non-secure or HDCP-less screen being connected.';\n  }\n  const code = reverseLookup(shakaError.code, shakaLib.util.Error.Code),\n    category = reverseLookup(shakaError.category, shakaLib.util.Error.Category);\n  const message = 'Shaka error ' + category + '/' + code + ' reported';\n\n  if (shakaError.data[0]) {\n    if (shakaError.data[0].message) {\n      return message + ': ' + shakaError.data[0].message;\n    } else {\n      return message + '. See the sourceError property for more details.';\n    }\n  } else {\n    return message + ' with no further details.';\n  }\n}\n\nfunction getSeverity(isStarted: boolean, shakaError: ShakaError): Severity {\n  if (shakaError.code === 1001 && shakaError.data) {\n    if (shakaError.data[0] && /\\.ttml|\\.vtt|\\.srt|subtitle/.test(shakaError.data[0])) {\n      // Dirty check for subtitles requests failing. That's not fatal.\n      return 'WARNING';\n    } else if (shakaError.data[1] === 502) {\n      return 'FATAL';\n    }\n  }\n  if (shakaError.code === 4012) {\n    return 'WARNING';\n  }\n  if ((isStarted && shakaError.code < 2000) || shakaError.category === 2) {\n    return 'WARNING';\n  }\n  return 'FATAL';\n}\n\nfunction getFromDeclarativeMapping(shakaError) {\n  if (shakaError.code) {\n    const mapping = errorFromCodeMappings[shakaError.code] || errorFromCodeMappings[Math.floor(shakaError.code / 1000)];\n    if (typeof mapping === 'function') {\n      return mapping(shakaError) || defaultError;\n    } else {\n      return mapping || defaultError;\n    }\n  } else {\n    return defaultError;\n  }\n}\n\nfunction isEmeBlocked(userAgent: ?string, location: ?Location) {\n  return (\n    location &&\n    location.protocol === 'http:' &&\n    location.hostname.indexOf('localhost') !== 0 &&\n    userAgent &&\n    userAgent.indexOf('Edge') < 0 &&\n    userAgent.indexOf('Chrome') > 0\n  );\n}\n\nfunction mapShakaError(\n  shakaLib: Shaka,\n  isStarted: boolean,\n  shakaError: ShakaError,\n  userAgent?: string,\n  location?: Location\n) {\n  if (shakaError instanceof PlaybackError) {\n    return shakaError;\n  }\n  const classification = getFromDeclarativeMapping(shakaError).classification;\n  if ((shakaError.message || '').indexOf('MediaSource') >= 0) {\n    return new PlaybackError(\n      'STREAM_ERROR_TECHNOLOGY_UNSUPPORTED',\n      'shaka',\n      'This browser does not support playing MPEG-DASH streams with Shaka Player.',\n      'FATAL',\n      shakaError\n    );\n  } else if (classification) {\n    if (classification === STREAM_ERROR_DRM_CLIENT_UNAVAILABLE && isEmeBlocked(userAgent, location)) {\n      const message = 'DRM playback is blocked in Chrome. Likely reason: This page is not served with HTTPS.';\n      return new PlaybackError(STREAM_ERROR, errorTechnology, message, getSeverity(isStarted, shakaError), shakaError);\n    } else {\n      return new PlaybackError(\n        classification,\n        errorTechnology,\n        buildMessage(shakaLib, shakaError, classification),\n        getSeverity(isStarted, shakaError),\n        shakaError\n      );\n    }\n  } else {\n    return new PlaybackError(\n      STREAM_ERROR,\n      errorTechnology,\n      'Unknown error reported from Shaka Player.',\n      'WARNING',\n      shakaError\n    );\n  }\n}\n\nexport default mapShakaError;\n"],"file":"shakaErrorMapper.js"}