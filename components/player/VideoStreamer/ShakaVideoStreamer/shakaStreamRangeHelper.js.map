{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/ShakaVideoStreamer/shakaStreamRangeHelper.js"],"names":["dawnOfTime","Date","minimumDvrLength","defaultLiveEdgeMargin","dvrStartCorrection","resolvePlayMode","duration","isLive","Infinity","getAbsolutePositions","startDateTime","seekRange","position","isNaN","absolutePosition","absoluteStartPosition","getTime","start","getStreamRangeHelper","videoElement","shakaPlayer","configuration","liveMargin","liveEdgeMargin","calculateNewState","getPresentationStartTimeAsDate","currentTime","end","playMode","isAtLiveEdge","adjustForDvrStartOffset","paused","seekableStart","setPosition","newPosition","gotoLive"],"mappings":"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","sourcesContent":["// @flow\nimport type { PlayMode } from '../types';\nimport type { ShakaPlayer } from './types';\nimport type { StreamRangeHelper } from '../common/types';\n\nconst dawnOfTime = new Date(0);\nconst minimumDvrLength = 100; // seconds\nconst defaultLiveEdgeMargin = 10; // seconds\nconst dvrStartCorrection = 10; // yep, seconds\n\nfunction resolvePlayMode(duration: number, isLive: boolean): PlayMode {\n  if (isLive) {\n    if (duration === Infinity || duration === 0 || duration < minimumDvrLength) {\n      return 'live';\n    } else {\n      return 'livedvr';\n    }\n  } else {\n    return 'ondemand';\n  }\n}\n\nfunction getAbsolutePositions(\n  isLive: boolean,\n  startDateTime: Date,\n  seekRange: { start: number, end: number },\n  position: number\n): { absolutePosition: Date, absoluteStartPosition: Date } {\n  if (isLive) {\n    if (isNaN(startDateTime)) {\n      const absolutePosition = new Date();\n      const absoluteStartPosition = new Date(absolutePosition.getTime() - position * 1000);\n      return {\n        absolutePosition,\n        absoluteStartPosition\n      };\n    } else {\n      return {\n        absolutePosition: new Date(startDateTime.getTime() + (position + seekRange.start) * 1000),\n        absoluteStartPosition: new Date(startDateTime.getTime() + seekRange.start * 1000)\n      };\n    }\n  } else {\n    return {\n      absolutePosition: dawnOfTime,\n      absoluteStartPosition: dawnOfTime\n    };\n  }\n}\n\nconst getStreamRangeHelper = (\n  videoElement: HTMLVideoElement,\n  shakaPlayer: ShakaPlayer,\n  configuration: ?{ liveEdgeMargin?: ?number }\n): StreamRangeHelper => {\n  const liveMargin = (configuration && configuration.liveEdgeMargin) || defaultLiveEdgeMargin;\n\n  function calculateNewState() {\n    const seekRange = shakaPlayer.seekRange();\n    const isLive = shakaPlayer.isLive();\n    const startDateTime = isLive ? shakaPlayer.getPresentationStartTimeAsDate() : new Date();\n    const position = videoElement.currentTime - seekRange.start;\n    const duration =\n      seekRange.end !== 0 || seekRange.start !== 0\n        ? seekRange.end - seekRange.start\n        : videoElement.duration === Infinity || isNaN(videoElement.duration)\n        ? 0\n        : videoElement.duration;\n\n    const playMode = resolvePlayMode(duration, isLive);\n    const isAtLiveEdge = isLive && position > duration - liveMargin;\n\n    const { absolutePosition, absoluteStartPosition } = getAbsolutePositions(\n      isLive,\n      startDateTime,\n      seekRange,\n      position\n    );\n    return {\n      position,\n      duration,\n      playMode,\n      isAtLiveEdge,\n      absolutePosition,\n      absoluteStartPosition\n    };\n  }\n\n  function adjustForDvrStartOffset() {\n    if (videoElement && videoElement.paused && shakaPlayer.isLive()) {\n      const seekableStart = shakaPlayer.seekRange().start || 0;\n      if (seekableStart >= videoElement.currentTime) {\n        videoElement.currentTime = seekableStart + dvrStartCorrection;\n      }\n    }\n  }\n\n  function setPosition(newPosition: number) {\n    if (!(isNaN(newPosition) && newPosition === Infinity)) {\n      videoElement.currentTime = shakaPlayer.seekRange().start + newPosition;\n    }\n  }\n\n  function gotoLive() {\n    if (shakaPlayer.isLive()) {\n      videoElement.currentTime = shakaPlayer.seekRange().end;\n    }\n  }\n\n  return {\n    adjustForDvrStartOffset,\n    calculateNewState,\n    setPosition,\n    gotoLive\n  };\n};\n\nexport default getStreamRangeHelper;\n"],"file":"shakaStreamRangeHelper.js"}