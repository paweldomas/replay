{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/createVideoStreamerComponent.js"],"names":["baseClassName","createVideoStreamerComponent","name","resolveImplementation","VideoStreamer","React","Component","constructor","props","playbackProps","applyProperties","implementation","trackElementData","setState","nextProps","prevProps","startPlaybackSession","textTrackManager","clear","handleSourceChange","then","audioTrackManager","handleSourcePropChange","catch","err","endPlaybackSession","onPlaybackError","videoRef","createRef","state","videoElementEventHandlers","render","renderWithoutSource","componentDidMount","videoElement","current","configuration","handleTrackElementDataChange","thirdPartyPlayer","onReady","setProperties","source","PlaybackError","componentWillUnmount","document","pictureInPictureElement","exitPictureInPicture","webkitPresentationMode","webkitSetPresentationMode","cleanup","getSnapshotBeforeUpdate","previousVideoElement","pipElement","presentationMode","wasPipActive","componentDidUpdate","prevState","snapshot","textTracks","handleTextTracksPropChange","playsInline","autoPlay","classNamePrefix","defaultClassNamePrefix","displayName"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix } from '../../../common';\nimport type { PlaybackProps, VideoStreamerConfiguration, VideoStreamerImplProps } from '../types';\nimport type {\n  SimplifiedVideoStreamer,\n  StreamerImplementationParts,\n  TrackElementData,\n  VideoStreamerRenderer\n} from './types';\nimport { renderWithoutSource } from './renderers';\nimport { PlaybackError } from '../types';\n\nconst baseClassName = 'video-streamer';\n\ntype ResolveImplementation<C: VideoStreamerConfiguration, P: VideoStreamerImplProps<C>, T> = (\n  component: SimplifiedVideoStreamer<C, P>,\n  configuration: ?C,\n  videoElement: HTMLVideoElement,\n  onTrackElementDataChange: (?Array<TrackElementData>) => void\n) => Promise<StreamerImplementationParts<C, P, T>>;\n\ntype State = {\n  videoElementEventHandlers: { [string]: (any) => void },\n  trackElementData?: ?Array<TrackElementData>,\n  render: VideoStreamerRenderer\n};\n\nfunction createVideoStreamerComponent<C: VideoStreamerConfiguration, P: VideoStreamerImplProps<C>, T>(\n  name: string,\n  resolveImplementation: ResolveImplementation<C, P, T>\n) {\n  class VideoStreamer extends React.Component<P, State> {\n    static defaultProps = {\n      classNamePrefix: defaultClassNamePrefix\n    };\n\n    constructor(props: P) {\n      super(props);\n      this.videoRef = React.createRef();\n      this.state = {\n        videoElementEventHandlers: {},\n        render: renderWithoutSource\n      };\n    }\n\n    implementation: ?StreamerImplementationParts<C, P, T>;\n    videoRef: { current: null | HTMLVideoElement };\n\n    setProperties = (playbackProps: PlaybackProps) => {\n      const applyProperties = this.implementation && this.implementation.applyProperties;\n      if (applyProperties) {\n        applyProperties(playbackProps);\n      }\n    };\n\n    handleTrackElementDataChange = (trackElementData: ?Array<TrackElementData>) => {\n      this.setState({ trackElementData });\n    };\n\n    handleSourceChange = (nextProps: P, prevProps?: P) => {\n      const implementation = this.implementation;\n      if (implementation) {\n        implementation.startPlaybackSession();\n        implementation.textTrackManager.clear();\n        return implementation\n          .handleSourceChange(nextProps, prevProps)\n          .then(() => {\n            implementation.audioTrackManager.handleSourceChange();\n            implementation.textTrackManager.handleSourcePropChange(nextProps);\n          })\n          .catch(err => {\n            implementation.endPlaybackSession('dead');\n            return nextProps.onPlaybackError && nextProps.onPlaybackError(err);\n          });\n      }\n    };\n\n    componentDidMount() {\n      const videoElement = this.videoRef.current;\n      if (videoElement) {\n        resolveImplementation(this, this.props.configuration, videoElement, this.handleTrackElementDataChange)\n          .then(implementation => {\n            this.implementation = implementation;\n            const { render, videoElementEventHandlers, thirdPartyPlayer } = implementation;\n            this.setState({\n              render,\n              videoElementEventHandlers\n            });\n            if (this.props.onReady) {\n              this.props.onReady({ setProperties: this.setProperties, thirdPartyPlayer });\n            }\n            if (this.props.source) {\n              return this.handleSourceChange(this.props);\n            }\n          })\n          .catch(err => {\n            if (this.props.onPlaybackError && err instanceof PlaybackError) {\n              this.props.onPlaybackError(err);\n            } else {\n              throw err;\n            }\n          });\n      }\n    }\n\n    componentWillUnmount() {\n      const videoElement = this.videoRef.current;\n      if (videoElement) {\n        // $FlowFixMe\n        if (videoElement === document.pictureInPictureElement) {\n          // $FlowFixMe\n          return document.exitPictureInPicture();\n        } else if (\n          // $FlowFixMe\n          videoElement.webkitPresentationMode === 'picture-in-picture' && // $FlowFixMe\n          typeof videoElement.webkitSetPresentationMode === 'function'\n        ) {\n          videoElement.webkitSetPresentationMode('inline');\n        }\n      }\n      if (this.implementation) {\n        if (this.implementation.endPlaybackSession) {\n          this.implementation.endPlaybackSession('dead');\n        }\n        if (this.implementation.cleanup) {\n          return this.implementation.cleanup().catch(err => {\n            throw err;\n          });\n        }\n      }\n    }\n\n    getSnapshotBeforeUpdate() {\n      const previousVideoElement = this.videoRef.current;\n      // $FlowFixMe: Type defs not up-to-date.\n      const pipElement = document.pictureInPictureElement;\n      // $FlowFixMe\n      const presentationMode = previousVideoElement.webkitPresentationMode;\n      const wasPipActive = previousVideoElement === pipElement || presentationMode === 'picture-in-picture';\n      return {\n        wasPipActive,\n        previousVideoElement: this.videoRef.current\n      };\n    }\n\n    componentDidUpdate(\n      prevProps: P,\n      prevState: State,\n      snapshot?: { wasPipActive: boolean, previousVideoElement: HTMLVideoElement }\n    ) {\n      const implementation = this.implementation;\n      if (implementation) {\n        if (prevProps.source !== this.props.source) {\n          if (snapshot && snapshot.wasPipActive) {\n            // $FlowFixMe\n            if (document.exitPictureInPicture) {\n              document.exitPictureInPicture().then(\n                () => this.handleSourceChange(this.props, prevProps),\n                () => this.handleSourceChange(this.props, prevProps)\n              );\n            } else if (\n              snapshot.previousVideoElement &&\n              // $FlowFixMe\n              typeof snapshot.previousVideoElement.webkitSetPresentationMode === 'function'\n            ) {\n              snapshot.previousVideoElement.webkitSetPresentationMode('inline');\n              this.handleSourceChange(this.props, prevProps);\n            }\n          } else {\n            this.handleSourceChange(this.props, prevProps);\n          }\n        } else if (prevProps.textTracks !== this.props.textTracks) {\n          implementation.textTrackManager.handleTextTracksPropChange(this.props);\n        }\n      }\n    }\n\n    render() {\n      const { videoRef } = this;\n      const { videoElementEventHandlers, render, trackElementData } = this.state;\n      const playsInline =\n        !this.props.configuration ||\n        this.props.configuration.playsInline == null ||\n        this.props.configuration.playsInline;\n      const autoPlay =\n        !this.props.configuration ||\n          this.props.configuration.autoPlay == null ||\n          this.props.configuration.autoPlay;\n      return render(videoRef, videoElementEventHandlers, this.props, baseClassName, autoPlay, playsInline, trackElementData);\n    }\n  }\n\n  VideoStreamer.displayName = name;\n  return VideoStreamer;\n}\n\nexport default createVideoStreamerComponent;\n"],"file":"createVideoStreamerComponent.js"}