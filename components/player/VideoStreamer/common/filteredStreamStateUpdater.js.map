{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/filteredStreamStateUpdater.js"],"names":["saneNumberFilter","value","isNaN","Infinity","defaultFilters","position","duration","volume","getFilteredStreamStateUpdater","videoStreamer","filters","currentValues","update","property","callback","props","onStreamStateChange","Object","entries","forEach","key","saneValue"],"mappings":";;;;;;;AAEA;;AASA,MAAMA,gBAAgB,GAAOC,KAAJ,IACvBA,KAAK,IAAI,IAAT,IAAiBC,KAAK,CAACD,KAAD,CAAtB,IAAiCA,KAAK,KAAKE,QAA3C,IAAuD,OAAOF,KAAP,KAAiB,QAAxE,IAAoFA,KAAK,GAAG,CAA5F,GAAgG,CAAhG,GAAoGA,KADtG;;AAGA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAEL,gBADW;AAErBM,EAAAA,QAAQ,EAAEN,gBAFW;AAGrBO,EAAAA,MAAM,EAAEP;AAHa,CAAvB;;AAQA,SAASQ,6BAAT,CACEC,aADF,EAEEC,OAAiD,GAAGN,cAFtD,EAGE;AACA,QAAMO,aAA+B,GAAG,EAAxC;;AAEA,WAASC,MAAT,CAAgBC,QAAhB,EAA4C;AAC1C,UAAMC,QAAQ,GAAGL,aAAa,CAACM,KAAd,IAAuBN,aAAa,CAACM,KAAd,CAAoBC,mBAA5D;;AACA,QAAIF,QAAJ,EAAc;AACZ;AACAG,MAAAA,MAAM,CAACC,OAAP,CAAeL,QAAf,EAAyBM,OAAzB,CAAiC,CAAC,CAACC,GAAD,EAAMnB,KAAN,CAAD,KAAkB;AACjD,cAAMoB,SAAS,GAAGX,OAAO,CAACU,GAAD,CAAP,GAAeV,OAAO,CAACU,GAAD,CAAP,CAAanB,KAAb,CAAf,GAAqCA,KAAvD;;AACA,YAAI,yBAAYU,aAAa,CAACS,GAAD,CAAzB,EAAgCC,SAAhC,CAAJ,EAAgD;AAC9C;AACAV,UAAAA,aAAa,CAACS,GAAD,CAAb,GAAqBC,SAArB;AACAP,UAAAA,QAAQ,CAAC;AAAE,aAACM,GAAD,GAAOC;AAAT,WAAD,CAAR;AACD;AACF,OAPD;AAQD;AACF;;AACD,SAAOT,MAAP;AACD;;eAEcJ,6B","sourcesContent":["// @flow\nimport { type VideoStreamState } from '../types';\nimport { isDifferent } from '../../../common';\nimport type { VideoStreamerImplProps, VideoStreamStateKeys, VideoStreamStateValues } from '../types';\nimport type { SimplifiedVideoStreamer } from './types';\nimport type { VideoStreamerConfiguration } from '../types';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst saneNumberFilter = <T>(value: ?T) =>\n  value == null || isNaN(value) || value === Infinity || typeof value !== 'number' || value < 0 ? 0 : value;\n\nconst defaultFilters = {\n  position: saneNumberFilter,\n  duration: saneNumberFilter,\n  volume: saneNumberFilter\n};\n\nexport type SanityFilter = <T: ?VideoStreamStateValues>(val: T) => T;\n\nfunction getFilteredStreamStateUpdater<C: VideoStreamerConfiguration, P: VideoStreamerImplProps<C>>(\n  videoStreamer: SimplifiedVideoStreamer<C, P>,\n  filters: { [VideoStreamStateKeys]: SanityFilter } = defaultFilters\n) {\n  const currentValues: VideoStreamState = {};\n\n  function update(property: VideoStreamState) {\n    const callback = videoStreamer.props && videoStreamer.props.onStreamStateChange;\n    if (callback) {\n      // $FlowFixMe Yet to understand how to safely iterate through objects as maps.\n      Object.entries(property).forEach(([key, value]) => {\n        const saneValue = filters[key] ? filters[key](value) : value;\n        if (isDifferent(currentValues[key], saneValue)) {\n          // $FlowFixMe\n          currentValues[key] = saneValue;\n          callback({ [key]: saneValue });\n        }\n      });\n    }\n  }\n  return update;\n}\n\nexport default getFilteredStreamStateUpdater;\n"],"file":"filteredStreamStateUpdater.js"}