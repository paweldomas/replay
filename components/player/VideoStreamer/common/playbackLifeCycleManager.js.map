{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/playbackLifeCycleManager.js"],"names":["emptyTracks","emptyBitrates","dawnOfTime","Date","notifyInitialState","updateStreamState","duration","position","playMode","playState","isBuffering","isPaused","isSeeking","volume","muted","bufferedAhead","isPipAvailable","isAirPlayAvailable","isPipActive","isAirPlayActive","bitrates","audioTracks","textTracks","absolutePosition","absoluteStartPosition","notifyTerminalState","getPlaybackLifeCycleManager","pauseStreamRangeUpdater","log","lifeCycleStage","getStage","setStage","newValue","startPlaybackSession","stop","endPlaybackSession","endStage","cleanup"],"mappings":";;;;;;AAIO,MAAMA,WAAkC,GAAG,EAA3C,C,CAA+C;;;AACtD,MAAMC,aAA4B,GAAG,EAArC;AACA,MAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAnB;;AAEA,SAASC,kBAAT,CAA4BC,iBAA5B,EAAyE;AACvEA,EAAAA,iBAAiB,CAAC;AAChBC,IAAAA,QAAQ,EAAE,CADM;AAEhBC,IAAAA,QAAQ,EAAE,CAFM;AAGhBC,IAAAA,QAAQ,EAAE,UAHM;AAIhBC,IAAAA,SAAS,EAAE,UAJK;AAKhBC,IAAAA,WAAW,EAAE,KALG;AAMhBC,IAAAA,QAAQ,EAAE,KANM;AAOhBC,IAAAA,SAAS,EAAE,KAPK;AAQhBC,IAAAA,MAAM,EAAE,CARQ;AAShBC,IAAAA,KAAK,EAAE,KATS;AAUhBC,IAAAA,aAAa,EAAE,CAVC;AAWhBC,IAAAA,cAAc,EAAE,KAXA;AAYhBC,IAAAA,kBAAkB,EAAE,KAZJ;AAahBC,IAAAA,WAAW,EAAE,KAbG;AAchBC,IAAAA,eAAe,EAAE,KAdD;AAehBC,IAAAA,QAAQ,EAAEnB,aAfM;AAgBhBoB,IAAAA,WAAW,EAAErB,WAhBG;AAiBhBsB,IAAAA,UAAU,EAAEtB,WAjBI;AAkBhBuB,IAAAA,gBAAgB,EAAErB,UAlBF;AAmBhBsB,IAAAA,qBAAqB,EAAEtB;AAnBP,GAAD,CAAjB;AAqBD;;AAED,SAASuB,mBAAT,CAA6BpB,iBAA7B,EAA0E;AACxEA,EAAAA,iBAAiB,CAAC;AAChB;AACA;AACA;AACAI,IAAAA,SAAS,EAAE,UAJK;AAIO;AACvBC,IAAAA,WAAW,EAAE,KALG;AAMhBC,IAAAA,QAAQ,EAAE,KANM;AAOhBC,IAAAA,SAAS,EAAE,KAPK;AAQhB;AACA;AACA;AACAI,IAAAA,cAAc,EAAE,KAXA;AAYhBC,IAAAA,kBAAkB,EAAE,KAZJ,CAahB;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBgB,GAAD,CAAjB;AAqBD;;AAED,SAASS,2BAAT,CACErB,iBADF,EAEEsB,uBAFF,EAMEC,GANF,EAOE;AACA,MAAIC,cAAiC,GAAG,SAAxC;AACAD,EAAAA,GAAG,IAAIA,GAAG,CAACC,cAAD,CAAV;;AAEA,WAASC,QAAT,GAAoB;AAClB,WAAOD,cAAP;AACD;;AAED,WAASE,QAAT,CAAkBC,QAAlB,EAA+C;AAC7CJ,IAAAA,GAAG,IAAIA,GAAG,CAACI,QAAD,CAAV;AACAH,IAAAA,cAAc,GAAGG,QAAjB;AACD;;AAED,WAASC,oBAAT,GAAgC;AAC9BF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA3B,IAAAA,kBAAkB,CAACC,iBAAD,CAAlB;AACAsB,IAAAA,uBAAuB,CAACO,IAAxB;AACD;;AAED,WAASC,kBAAT,CAA4BC,QAA5B,EAA0D;AACxD,QAAIA,QAAJ,EAAc;AACZL,MAAAA,QAAQ,CAACK,QAAD,CAAR;AACD;;AACDX,IAAAA,mBAAmB,CAACpB,iBAAD,CAAnB;AACAsB,IAAAA,uBAAuB,CAACO,IAAxB;AACD;;AAED,WAASG,OAAT,GAAmB;AACjBV,IAAAA,uBAAuB,CAACO,IAAxB;AACD;;AAED,SAAO;AACLD,IAAAA,oBADK;AAELE,IAAAA,kBAFK;AAGLL,IAAAA,QAHK;AAILC,IAAAA,QAJK;AAKLM,IAAAA;AALK,GAAP;AAOD;;eAEcX,2B","sourcesContent":["// @flow\nimport type { AvailableTrack, VideoStreamState } from '../types';\nimport type { PlaybackLifeCycle } from './types';\n\nexport const emptyTracks: Array<AvailableTrack> = []; // Keeping the same array instance for all updates as long as not in use.\nconst emptyBitrates: Array<number> = [];\nconst dawnOfTime = new Date(0);\n\nfunction notifyInitialState(updateStreamState: VideoStreamState => void) {\n  updateStreamState({\n    duration: 0,\n    position: 0,\n    playMode: 'ondemand',\n    playState: 'inactive',\n    isBuffering: false,\n    isPaused: false,\n    isSeeking: false,\n    volume: 1,\n    muted: false,\n    bufferedAhead: 0,\n    isPipAvailable: false,\n    isAirPlayAvailable: false,\n    isPipActive: false,\n    isAirPlayActive: false,\n    bitrates: emptyBitrates,\n    audioTracks: emptyTracks,\n    textTracks: emptyTracks,\n    absolutePosition: dawnOfTime,\n    absoluteStartPosition: dawnOfTime\n  });\n}\n\nfunction notifyTerminalState(updateStreamState: VideoStreamState => void) {\n  updateStreamState({\n    // duration: 0,\n    // position: 0,\n    // playMode: 'ondemand',\n    playState: 'inactive', // Different\n    isBuffering: false,\n    isPaused: false,\n    isSeeking: false,\n    // volume: 1,\n    // muted: false,\n    // bufferedAhead: 0,\n    isPipAvailable: false,\n    isAirPlayAvailable: false\n    // isPipActive: false,\n    // isAirPlayActive: false,\n    // bitrates: emptyBitrates,\n    // audioTracks: emptyTracks,\n    // textTracks: emptyTracks,\n    // absolutePosition: dawnOfTime,\n    // absoluteStartPosition: dawnOfTime\n  });\n}\n\nfunction getPlaybackLifeCycleManager(\n  updateStreamState: VideoStreamState => void,\n  pauseStreamRangeUpdater: {\n    start: () => void,\n    stop: () => void\n  },\n  log?: string => void\n) {\n  let lifeCycleStage: PlaybackLifeCycle = 'unknown';\n  log && log(lifeCycleStage);\n\n  function getStage() {\n    return lifeCycleStage;\n  }\n\n  function setStage(newValue: PlaybackLifeCycle) {\n    log && log(newValue);\n    lifeCycleStage = newValue;\n  }\n\n  function startPlaybackSession() {\n    setStage('new');\n    notifyInitialState(updateStreamState);\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function endPlaybackSession(endStage?: PlaybackLifeCycle) {\n    if (endStage) {\n      setStage(endStage);\n    }\n    notifyTerminalState(updateStreamState);\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function cleanup() {\n    pauseStreamRangeUpdater.stop();\n  }\n\n  return {\n    startPlaybackSession,\n    endPlaybackSession,\n    getStage,\n    setStage,\n    cleanup\n  };\n}\n\nexport default getPlaybackLifeCycleManager;\n"],"file":"playbackLifeCycleManager.js"}