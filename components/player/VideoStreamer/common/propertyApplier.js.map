{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/propertyApplier.js"],"names":["getPropertyApplier","videoElement","streamRangeHelper","textTrackManager","audioTrackManager","bitrateManager","playbackProps","isPaused","pause","play","catch","err","console","warn","volume","isMuted","muted","position","setPosition","isAtLiveEdge","gotoLive","handleSelectedTextTrackChange","selectedTextTrack","selectedAudioTrack","handleSelectedAudioTrackChange","bitrateFix","undefined","fixBitrate","bitrateCap","capBitrate","isPipActive","requestPictureInPicture","webkitSetPresentationMode","document","pictureInPictureElement","exitPictureInPicture","webkitPresentationMode","isAirPlayTargetPickerVisible","webkitShowPlaybackTargetPicker"],"mappings":";;;;;;;AAIO,MAAMA,kBAAkB,GAAG,CAChCC,YADgC,EAEhCC,iBAFgC,EAGhCC,gBAHgC,EAIhCC,iBAJgC,EAKhCC,cALgC,KAM5BC,aAAD,IAAkC;AACrC,MAAI,cAAcA,aAAlB,EAAiC;AAC/B,QAAIA,aAAa,CAACC,QAAlB,EAA4B;AAC1BN,MAAAA,YAAY,CAACO,KAAb;AACD,KAFD,MAEO;AACLP,MAAAA,YAAY,CAACQ,IAAb,GAAoBC,KAApB,CAA0BC,GAAG,IAAIC,OAAO,CAACC,IAAR,CAAa,cAAb,EAA6BF,GAA7B,CAAjC;AACD;AACF;;AACD,MAAIL,aAAa,CAACQ,MAAd,IAAwB,IAA5B,EAAkC;AAChCb,IAAAA,YAAY,CAACa,MAAb,GAAsBR,aAAa,CAACQ,MAApC;AACD;;AACD,MAAIR,aAAa,CAACS,OAAd,IAAyB,IAA7B,EAAmC;AACjCd,IAAAA,YAAY,CAACe,KAAb,GAAqBV,aAAa,CAACS,OAAnC;AACD;;AACD,MAAIT,aAAa,CAACW,QAAd,IAA0B,IAA9B,EAAoC;AAClCf,IAAAA,iBAAiB,CAACgB,WAAlB,CAA8BZ,aAAa,CAACW,QAA5C;AACD;;AACD,MAAIX,aAAa,CAACa,YAAlB,EAAgC;AAC9BjB,IAAAA,iBAAiB,CAACkB,QAAlB;AACD;;AACD,MAAIjB,gBAAgB,IAAI,uBAAuBG,aAA/C,EAA8D;AAC5DH,IAAAA,gBAAgB,CAACkB,6BAAjB,CAA+Cf,aAAa,CAACgB,iBAA7D;AACD;;AACD,MAAIlB,iBAAiB,IAAIE,aAAa,CAACiB,kBAAvC,EAA2D;AACzDnB,IAAAA,iBAAiB,CAACoB,8BAAlB,CAAiDlB,aAAa,CAACiB,kBAA/D;AACD;;AACD,MAAIlB,cAAJ,EAAoB;AAClB,QAAIC,aAAa,CAACmB,UAAd,KAA6BC,SAAjC,EAA4C;AAC1C;AACArB,MAAAA,cAAc,CAACsB,UAAf,CAA0BrB,aAAa,CAACmB,UAAxC;AACD;;AACD,QAAInB,aAAa,CAACsB,UAAd,KAA6BF,SAAjC,EAA4C;AAC1C;AACArB,MAAAA,cAAc,CAACwB,UAAf,CAA0BvB,aAAa,CAACsB,UAAxC;AACD;AACF,GAnCoC,CAoCrC;;;AACA,MAAI,iBAAiBtB,aAArB,EAAoC;AAClC,QAAIA,aAAa,CAACwB,WAAlB,EAA+B;AAC7B;AACA,UAAI,OAAO7B,YAAY,CAAC8B,uBAApB,KAAgD,UAApD,EAAgE;AAC9D9B,QAAAA,YAAY,CAAC8B,uBAAb,GAD8D,CAE9D;AACD,OAHD,MAGO,IAAI,OAAO9B,YAAY,CAAC+B,yBAApB,KAAkD,UAAtD,EAAkE;AACvE/B,QAAAA,YAAY,CAAC+B,yBAAb,CAAuC,oBAAvC;AACD,OAP4B,CAQ7B;;AACD,KATD,MASO,IAAIC,QAAQ,CAACC,uBAAT,KAAqCjC,YAAzC,EAAuD;AAC5D;AACAgC,MAAAA,QAAQ,CAACE,oBAAT,GAF4D,CAG5D;AACD,KAJM,MAIA,IAAIlC,YAAY,CAACmC,sBAAb,KAAwC,oBAA5C,EAAkE;AACvE;AACAnC,MAAAA,YAAY,CAAC+B,yBAAb,CAAuC,QAAvC;AACD;AACF,GAvDoC,CAwDrC;;;AACA,MAAI1B,aAAa,CAAC+B,4BAAd,IAA8C,OAAOpC,YAAY,CAACqC,8BAApB,KAAuD,UAAzG,EAAqH;AACnHrC,IAAAA,YAAY,CAACqC,8BAAb;AACD;AACF,CAlEM","sourcesContent":["// @flow\nimport type { PlaybackProps } from '../types';\nimport type { AudioTrackManager, BitrateManager, StreamRangeHelper, TextTrackManager } from './types';\n\nexport const getPropertyApplier = (\n  videoElement: HTMLVideoElement, // Abstract this away?\n  streamRangeHelper: StreamRangeHelper,\n  textTrackManager?: TextTrackManager,\n  audioTrackManager?: AudioTrackManager,\n  bitrateManager?: ?BitrateManager\n) => (playbackProps: PlaybackProps) => {\n  if ('isPaused' in playbackProps) {\n    if (playbackProps.isPaused) {\n      videoElement.pause();\n    } else {\n      videoElement.play().catch(err => console.warn('Play blocked', err));\n    }\n  }\n  if (playbackProps.volume != null) {\n    videoElement.volume = playbackProps.volume;\n  }\n  if (playbackProps.isMuted != null) {\n    videoElement.muted = playbackProps.isMuted;\n  }\n  if (playbackProps.position != null) {\n    streamRangeHelper.setPosition(playbackProps.position);\n  }\n  if (playbackProps.isAtLiveEdge) {\n    streamRangeHelper.gotoLive();\n  }\n  if (textTrackManager && 'selectedTextTrack' in playbackProps) {\n    textTrackManager.handleSelectedTextTrackChange(playbackProps.selectedTextTrack);\n  }\n  if (audioTrackManager && playbackProps.selectedAudioTrack) {\n    audioTrackManager.handleSelectedAudioTrackChange(playbackProps.selectedAudioTrack);\n  }\n  if (bitrateManager) {\n    if (playbackProps.bitrateFix !== undefined) {\n      // $FlowFixMe undefined is OK.\n      bitrateManager.fixBitrate(playbackProps.bitrateFix);\n    }\n    if (playbackProps.bitrateCap !== undefined) {\n      // $FlowFixMe undefined is OK.\n      bitrateManager.capBitrate(playbackProps.bitrateCap);\n    }\n  }\n  // $FlowFixMe: Type defs not up-to-date.\n  if ('isPipActive' in playbackProps) {\n    if (playbackProps.isPipActive) {\n      // $FlowFixMe\n      if (typeof videoElement.requestPictureInPicture === 'function') {\n        videoElement.requestPictureInPicture();\n        // $FlowFixMe\n      } else if (typeof videoElement.webkitSetPresentationMode === 'function') {\n        videoElement.webkitSetPresentationMode('picture-in-picture');\n      }\n      // $FlowFixMe\n    } else if (document.pictureInPictureElement === videoElement) {\n      // $FlowFixMe\n      document.exitPictureInPicture();\n      // $FlowFixMe\n    } else if (videoElement.webkitPresentationMode === 'picture-in-picture') {\n      // $FlowFixMe\n      videoElement.webkitSetPresentationMode('inline');\n    }\n  }\n  // $FlowFixMe: Type defs not up-to-date.\n  if (playbackProps.isAirPlayTargetPickerVisible && typeof videoElement.webkitShowPlaybackTargetPicker === 'function') {\n    videoElement.webkitShowPlaybackTargetPicker();\n  }\n};\n"],"file":"propertyApplier.js"}