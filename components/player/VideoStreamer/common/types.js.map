{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/types.js"],"names":[],"mappings":";;AACA","sourcesContent":["//@flow\nimport * as React from 'react';\nimport type {\n  AvailableTrack,\n  PlaybackProps,\n  PlaybackSource,\n  SourceTrack,\n  VideoStreamerImplProps,\n  VideoStreamState\n} from '../types';\nimport type { VideoStreamerConfiguration } from '../types';\n\nexport type PlaybackLifeCycle = 'new' | 'starting' | 'started' | 'dead' | 'unknown';\n\nexport type StreamRangeHelper = {\n  adjustForDvrStartOffset: () => void,\n  calculateNewState: () => VideoStreamState,\n  setPosition: number => void,\n  gotoLive: () => void\n};\n\n/*\nexport type StreamStateUpdater = {\n  eventHandlers: { [string]: () => void },\n  getLifeCycle: () => PlaybackLifeCycle,\n  setLifeCycle: PlaybackLifeCycle => void,\n  startPlaybackSession: () => void\n};\n*/\n\nexport type SimplifiedVideoStreamer<S: VideoStreamerConfiguration, T: VideoStreamerImplProps<S>> = {\n  props: T\n};\n\nexport type TrackElementData = {\n  src: string,\n  srclang?: string,\n  label?: string,\n  kind: string,\n  onRef?: (?HTMLTrackElement) => void\n};\n\nexport type VideoStreamerRenderer = (\n  videoRef: { current: null | HTMLVideoElement },\n  videoElementEventHandlers: { [string]: (any) => void },\n  props: { source?: ?PlaybackSource, className?: string, classNamePrefix?: string },\n  baseClassName: string,\n  playsInline: boolean,\n  textTracks?: ?Array<TrackElementData>,\n  styles?: any\n) => React.Node;\n\nexport type AudioTrackManager = {\n  handleSelectedAudioTrackChange: (?AvailableTrack) => void,\n  handleSourceChange: () => void,\n  cleanup: () => void\n};\n\nexport type TextTrackManager = {\n  handleSelectedTextTrackChange: (?AvailableTrack) => void,\n  handleSourcePropChange: ({ source?: ?PlaybackSource, textTracks?: ?Array<SourceTrack> }) => void,\n  handleTextTracksPropChange: (newProps: { source?: ?PlaybackSource, textTracks?: ?Array<SourceTrack> }) => void,\n  clear: () => void,\n  cleanup: () => void\n};\n\nexport type BitrateManager = {\n  fixBitrate: (bitrateFix: number | 'max' | 'min') => void,\n  capBitrate: number => void\n};\n\nexport type StreamerImplementationParts<C: VideoStreamerConfiguration, P: VideoStreamerImplProps<C>, T> = {\n  thirdPartyPlayer?: ?T,\n  applyProperties: PlaybackProps => void,\n  handleSourceChange: (nextProps: P, prevProps?: P) => Promise<any>,\n  textTrackManager: TextTrackManager,\n  audioTrackManager: AudioTrackManager,\n  startPlaybackSession: () => void,\n  endPlaybackSession: (stage?: PlaybackLifeCycle) => void,\n  videoElementEventHandlers: { [string]: (any) => void },\n  render: VideoStreamerRenderer,\n  cleanup: () => Promise<void>\n};\n"],"file":"types.js"}