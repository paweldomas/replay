{"version":3,"sources":["../../../src/replay/components/player/VideoStreamer/types.js"],"names":["PlaybackError","Error","constructor","code","technology","message","severity","sourceError"],"mappings":";;;;;;;;;AAEA;AAiBO,MAAMA,aAAN,SAA4BC,KAA5B,CAAkC;AACvCC,EAAAA,WAAW,CAACC,IAAD,EAAkBC,UAAlB,EAAsCC,OAAtC,EAAwDC,QAAkB,GAAG,OAA7E,EAAsFC,WAAtF,EAAyG;AAClH,UAAMF,OAAN;;AADkH;;AAAA;;AAAA;;AAAA;;AAElH,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,QAAL,GAAgBA,QAAhB;AACA,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKG,WAAL,GAAmBA,WAAnB;AACD;;AAPsC","sourcesContent":["// @flow\n\n// Types for state observation\n\nimport type { CommonGenericProps, CommonProps } from '../../common';\n\nexport type PlayState = 'inactive' | 'starting' | 'playing' | 'paused' | 'seeking' | 'buffering';\nexport type PlayMode = 'ondemand' | 'live' | 'livedvr';\n\nexport type ErrorCode =\n  | 'STREAM_ERROR_TECHNOLOGY_UNSUPPORTED'\n  | 'STREAM_ERROR_DOWNLOAD'\n  | 'STREAM_ERROR_DECODE'\n  | 'STREAM_ERROR_DRM_OUTPUT_BLOCKED'\n  | 'STREAM_ERROR_DRM_CLIENT_UNAVAILABLE'\n  | 'STREAM_ERROR';\n\nexport type Severity = 'FATAL' | 'WARNING' | 'INFO';\n\nexport class PlaybackError extends Error {\n  constructor(code: ErrorCode, technology: string, message?: string, severity: Severity = 'FATAL', sourceError?: any) {\n    super(message);\n    this.code = code;\n    this.severity = severity;\n    this.technology = technology;\n    this.sourceError = sourceError;\n  }\n  code: ErrorCode;\n  severity: Severity;\n  technology: string;\n  sourceError: any;\n}\n\nexport type AvailableTrack = {\n  kind?: string,\n  label?: string,\n  language?: string,\n  origin?: 'side-loaded' | 'in-stream',\n  id?: string | number\n};\n\nexport type VideoStreamState = {\n  isPaused?: boolean,\n  isBuffering?: boolean,\n  isSeeking?: boolean,\n  position?: number,\n  duration?: number,\n  absolutePosition?: Date,\n  absoluteStartPosition?: Date,\n  isAtLiveEdge?: boolean,\n  playState?: PlayState,\n  playMode?: PlayMode,\n  volume?: number,\n  isMuted?: boolean,\n  isPipAvailable?: boolean,\n  isPipActive?: boolean,\n  isAirPlayAvailable?: boolean,\n  isAirPlayActive?: boolean,\n  bufferedAhead?: number,\n  currentBitrate?: number,\n  bitrateFix?: ?number,\n  bitrateCap?: ?number,\n  bitrates?: Array<number>,\n  currentTextTrack?: ?AvailableTrack,\n  textTracks?: Array<AvailableTrack>,\n  currentAudioTrack?: ?AvailableTrack,\n  audioTracks?: Array<AvailableTrack>,\n  error?: any\n};\n\nexport type VideoStreamStateKeys = $Keys<VideoStreamState>;\nexport type VideoStreamStateValues = $Values<VideoStreamState>;\n\n// Types used in settable props.\n\nexport type SourceTrack = {\n  src: string,\n  label?: string,\n  kind?: string,\n  language?: string,\n  contentType?: string,\n  cues?: Array<{ start: number, end: number, content: string }>\n};\n\nexport type FairPlayRequestFormat = 'formdata' | 'binary' | 'base64';\n\nexport type AdvancedPlaybackSource = {\n  streamUrl: string,\n  contentType?: string,\n  licenseUrl?: string,\n  drmType?: string,\n  startPosition?: number,\n  isLive?: boolean,\n  textTracks?: Array<SourceTrack>,\n  metadata?: any,\n  licenseAcquisitionDetails?: {\n    licenseRequestHeaders?: { [string]: string },\n    fairPlayCertificateUrl?: string,\n    widevineServiceCertificateUrl?: string,\n    fairPlayRequestFormat?: FairPlayRequestFormat,\n    contentIdExtractMatch?: RegExp | string,\n    contentId?: string,\n    robustness?: {\n      [string]: {\n        audio: string,\n        video: string\n      }\n    }\n  }\n};\n\nexport type PlaybackSource = string | AdvancedPlaybackSource;\n\n/* Types for settable props */\n\nexport type InitialPlaybackProps = {\n  isMuted?: boolean,\n  volume?: number,\n  isPaused?: boolean,\n  bitrateCap?: number,\n  bitrateFix?: number | 'max' | 'min'\n};\n\nexport type PlaybackProps = InitialPlaybackProps & {\n  position?: number,\n  isAtLiveEdge?: true,\n  isPipActive?: boolean,\n  isAirPlayTargetPickerVisible?: true,\n  selectedTextTrack?: ?AvailableTrack,\n  selectedAudioTrack?: AvailableTrack\n};\n\nexport type VideoStreamerMethods = {\n  setProperties: PlaybackProps => void,\n  thirdPartyPlayer: any\n};\n\nexport type VideoStreamerProps = CommonProps & {\n  // configuration?: ?VideoStreamerConfiguration,\n  source?: ?PlaybackSource,\n  textTracks?: ?Array<SourceTrack>,\n  className?: string,\n  initialPlaybackProps?: InitialPlaybackProps,\n  onReady?: VideoStreamerMethods => void,\n  onStreamStateChange?: VideoStreamState => void,\n  onProgress?: ({ event: string }) => void,\n  onPlaybackError?: PlaybackError => void\n};\n\nexport type VideoStreamerConfiguration = {\n  licenseAcquisition?: ?{\n    widevine: {\n      serviceCertificateUrl?: ?string,\n      withCredentials?: ?boolean,\n      robustness?: {\n        audio: string,\n        video: string\n      }\n    },\n    fairPlay: {\n      serviceCertificateUrl?: ?string,\n      withCredentials?: ?boolean,\n      requestFormat?: ?FairPlayRequestFormat,\n      contentIdExtractMatch?: ?(RegExp | string)\n    },\n    playReady: {\n      withCredentials?: ?boolean,\n      robustness?: {\n        audio: string,\n        video: string\n      }\n    }\n  },\n  manifestRequests?: ?{\n    withCredentials?: ?boolean\n  },\n  logLevel?: 'NONE' | 'ERROR' | 'WARNING' | 'INFO' | 'DEBUG' | 'VERBOSE',\n  defaultBandwidth?: ?number,\n  crossOrigin?: ?string,\n  playsInline?: ?boolean,\n  liveEdgeMargin?: ?number,\n  pauseUpdateInterval?: ?number\n};\n\nexport type VideoStreamerImplProps<T: VideoStreamerConfiguration> = VideoStreamerProps &\n  CommonGenericProps & {\n    configuration?: ?T\n  };\n"],"file":"types.js"}