{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/Fullscreen.js"],"names":["Fullscreen","React","Component","constructor","props","element","fullscreenTarget","setState","isFullscreen","fullscreenElement","enterFullscreen","exitFullscreen","state","unsubscribe","onFullscreenChange","componentWillUnmount","render","onRef","setProperties"],"mappings":";;;;;;;AAEA;;AACA;;;;;;;;AA0BA,MAAMA,UAAN,SAAyBC,KAAK,CAACC,SAA/B,CAAuD;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;;AADwB;;AAAA;;AAAA,mCAajBC,OAAD,IAA2B;AACjC,WAAKC,gBAAL,GAAwBD,OAAxB;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE,wDAA2BH;AAA3C,OAAd;AACD,KAhByB;;AAAA,gDAkBL,MAAM;AACzB,YAAMI,iBAAiB,GAAG,mDAA1B;AACA,WAAKF,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE,CAAC,EAAEC,iBAAiB,IAAIA,iBAAiB,KAAK,KAAKH,gBAAlD;AAAjB,OAAd;AACD,KArByB;;AAAA,6CAuBR,MAAM;AACtB,UAAI,KAAKA,gBAAT,EAA2B;AACzB,qDAAgB,KAAKA,gBAArB;AACD;AACF,KA3ByB;;AAAA,4CA6BT,MAAM;AACrB,UAAI,KAAKA,gBAAT,EAA2B;AACzB,oDAAe,KAAKA,gBAApB;AACD;AACF,KAjCyB;;AAAA,2CAmCV,CAAC;AAAEE,MAAAA;AAAF,QAA8C,EAA/C,KAAsD;AACpE,UAAIA,YAAJ,EAAkB;AAChB,aAAKE,eAAL;AACD,OAFD,MAEO;AACL,aAAKC,cAAL;AACD;AACF,KAzCyB;;AAExB,SAAKC,KAAL,GAAa;AAAEJ,MAAAA,YAAY,EAAE;AAAhB,KAAb;AACA,SAAKK,WAAL,GAAmB,oDAAuB,KAAKC,kBAA5B,CAAnB;AACD;;AAKDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKF,WAAL,IAAoB,KAAKA,WAAL,EAApB;AACD;;AAgCDG,EAAAA,MAAM,GAAG;AAAA,UACCA,MADD,GACY,KAAKZ,KADjB,CACCY,MADD;AAAA,UAECR,YAFD,GAEkB,KAAKI,KAFvB,CAECJ,YAFD;AAAA,UAGCE,eAHD,GAG2D,IAH3D,CAGCA,eAHD;AAAA,UAGkBC,cAHlB,GAG2D,IAH3D,CAGkBA,cAHlB;AAAA,UAGkCM,KAHlC,GAG2D,IAH3D,CAGkCA,KAHlC;AAAA,UAGyCC,aAHzC,GAG2D,IAH3D,CAGyCA,aAHzC;AAIP,WAAOF,MAAM,CAAC;AAAER,MAAAA,YAAF;AAAgBE,MAAAA,eAAhB;AAAiCC,MAAAA,cAAjC;AAAiDO,MAAAA,aAAjD;AAAgED,MAAAA;AAAhE,KAAD,CAAb;AACD;;AAjDoD;;eAmDxCjB,U","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport {\n  enterFullscreen,\n  exitFullscreen,\n  getFullscreenElement,\n  notifyFullscreenChange\n} from './ponyfills/crossBrowserFullscreen';\n\nexport type FullscreenState = {\n  isFullscreen: boolean,\n  setProperties: ({ isFullscreen: boolean }) => void,\n  enterFullscreen: () => void,\n  exitFullscreen: () => void\n};\n\ntype FullscreenRenderParameters = FullscreenState & {\n  onRef: (?HTMLElement) => void\n};\n\ntype Props = {\n  render: FullscreenRenderParameters => React.Node\n};\n\ntype State = {\n  isFullscreen: boolean\n};\n\nclass Fullscreen extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isFullscreen: false };\n    this.unsubscribe = notifyFullscreenChange(this.onFullscreenChange);\n  }\n\n  fullscreenTarget: ?HTMLElement;\n  unsubscribe: () => void;\n\n  componentWillUnmount() {\n    this.unsubscribe && this.unsubscribe();\n  }\n\n  onRef = (element: ?HTMLElement) => {\n    this.fullscreenTarget = element;\n    this.setState({ isFullscreen: getFullscreenElement() === element });\n  };\n\n  onFullscreenChange = () => {\n    const fullscreenElement = getFullscreenElement();\n    this.setState({ isFullscreen: !!(fullscreenElement && fullscreenElement === this.fullscreenTarget) });\n  };\n\n  enterFullscreen = () => {\n    if (this.fullscreenTarget) {\n      enterFullscreen(this.fullscreenTarget);\n    }\n  };\n\n  exitFullscreen = () => {\n    if (this.fullscreenTarget) {\n      exitFullscreen(this.fullscreenTarget);\n    }\n  };\n\n  setProperties = ({ isFullscreen }: { isFullscreen: boolean } = {}) => {\n    if (isFullscreen) {\n      this.enterFullscreen();\n    } else {\n      this.exitFullscreen();\n    }\n  };\n\n  render() {\n    const { render } = this.props;\n    const { isFullscreen } = this.state;\n    const { enterFullscreen, exitFullscreen, onRef, setProperties } = this;\n    return render({ isFullscreen, enterFullscreen, exitFullscreen, setProperties, onRef });\n  }\n}\nexport default Fullscreen;\n"],"file":"Fullscreen.js"}