{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/KeyboardShortcuts.js"],"names":["matchKeyCaseSafely","key","eventKey","length","toLowerCase","getMatchingOperationFromKeyMap","config","keyMap","Object","entries","filter","_","mappedKeys","Array","isArray","map","entry","KeyboardShortcuts","React","Component","keyboardEvent","props","nudge","toggleFixedUserActive","configuration","setProperties","fullscreenState","isPaused","isMuted","position","duration","volume","playMode","inspect","inspectedState","keyboardShortcuts","offset","skipOffset","volumeStep","operation","isFullscreen","Math","max","targetPosition","min","preventDefault","render","handleKeyDown"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { PlayMode } from '../VideoStreamer/types';\nimport type { FullscreenState } from './Fullscreen';\nimport type { InspectMethod } from '../PlayerController/ControllerContext';\n\ntype RenderParameters = {\n  handleKeyDown: KeyboardEvent => void\n};\n\ntype KeyMapping = string | Array<string>;\n\nexport type KeyboardShortcutsConfiguration = {\n  keyMap: {\n    togglePause?: KeyMapping,\n    toggleMute?: KeyMapping,\n    toggleFullscreen?: KeyMapping,\n    skipBack?: KeyMapping,\n    skipForward?: KeyMapping,\n    increaseVolume?: KeyMapping,\n    decreaseVolume?: KeyMapping\n  },\n  volumeStep?: number,\n  skipOffset?: number\n};\n\ntype UpdateableProperties = { volume: number } | { isMuted: boolean } | { isPaused: boolean } | { position: number };\n\ntype Props = {\n  nudge?: () => void,\n  toggleFixedUserActive?: () => void,\n  configuration?: {\n    keyboardShortcuts?: KeyboardShortcutsConfiguration\n  },\n  playMode?: ?PlayMode,\n  setProperties?: UpdateableProperties => void,\n  fullscreenState?: FullscreenState,\n  render: RenderParameters => React.Node,\n  isPaused?: ?boolean,\n  isMuted?: ?boolean,\n  position?: ?number,\n  duration?: ?number,\n  volume?: ?number,\n  inspect?: InspectMethod\n};\n\nconst matchKeyCaseSafely = (key: ?(string | any), eventKey: string): boolean => {\n  return typeof key !== 'string'\n    ? false\n    : key.length > 1\n    ? key === eventKey\n    : key.toLowerCase() === eventKey.toLowerCase();\n};\n\nconst getMatchingOperationFromKeyMap = (config: KeyboardShortcutsConfiguration, eventKey: string): ?string => {\n  if (config.keyMap) {\n    return Object.entries(config.keyMap)\n      .filter(\n        ([_, mappedKeys]) =>\n          !!(\n            matchKeyCaseSafely(mappedKeys, eventKey) ||\n            (Array.isArray(mappedKeys) && mappedKeys.filter(key => matchKeyCaseSafely(key, eventKey)).length)\n          )\n      )\n      .map(entry => entry[0])[0];\n  }\n};\n\nclass KeyboardShortcuts extends React.Component<Props> {\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    let {\n      nudge,\n      toggleFixedUserActive,\n      configuration,\n      setProperties,\n      fullscreenState,\n      isPaused,\n      isMuted,\n      position,\n      duration,\n      volume,\n      playMode,\n      inspect\n    } = this.props;\n    if (inspect) {\n      const inspectedState = inspect();\n      isPaused = inspectedState.isPaused;\n      isMuted = inspectedState.isMuted;\n      position = inspectedState.position;\n      duration = inspectedState.duration;\n      volume = inspectedState.volume;\n      playMode = inspectedState.playMode;\n    }\n\n    if (configuration && configuration.keyboardShortcuts) {\n      const offset = configuration.keyboardShortcuts.skipOffset || 30;\n      const volumeStep = configuration.keyboardShortcuts.volumeStep || 0.1;\n      const operation = getMatchingOperationFromKeyMap(configuration.keyboardShortcuts, keyboardEvent.key);\n      if (operation) {\n        switch (operation) {\n          case 'togglePause':\n            setProperties && setProperties({ isPaused: !isPaused });\n            break;\n          case 'toggleMute':\n            setProperties && setProperties({ isMuted: !isMuted });\n            break;\n          case 'toggleFullscreen':\n            fullscreenState && fullscreenState.setProperties({ isFullscreen: !fullscreenState.isFullscreen });\n            break;\n          case 'skipBack':\n            setProperties && position != null && setProperties({ position: Math.max(position - offset, 0) });\n            break;\n          case 'skipForward':\n            if (setProperties && duration) {\n              const targetPosition = (position || 0) + offset;\n              // Skipping to the very end is just annoying. Skipping to live position makes sense.\n              if (targetPosition < duration || playMode !== 'ondemand') {\n                setProperties({ position: Math.min(targetPosition, duration) });\n              }\n            }\n            break;\n          case 'decreaseVolume':\n            setProperties && volume != null && setProperties({ volume: Math.max(volume - volumeStep, 0) });\n            break;\n          case 'increaseVolume':\n            setProperties && volume != null && setProperties({ volume: Math.min(volume + volumeStep, 1) });\n            break;\n          case 'toggleUserActive':\n            if (toggleFixedUserActive) {\n              toggleFixedUserActive();\n            }\n            break;\n          default:\n          // eslint requires default in switch. Can't see that this is a good case for such a requirement.\n        }\n        if (nudge && operation !== 'toggleUserActive') {\n          nudge();\n        }\n        keyboardEvent.preventDefault();\n      } else if (keyboardEvent.key === 'Tab' && nudge) {\n        nudge();\n      }\n    }\n  };\n\n  render() {\n    const { handleKeyDown } = this;\n    return this.props.render({ handleKeyDown });\n  }\n}\nexport default KeyboardShortcuts;\n"],"file":"KeyboardShortcuts.js"}