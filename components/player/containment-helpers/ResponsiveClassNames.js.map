{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/ResponsiveClassNames.js"],"names":["ResponsiveClassNames","React","Component","constructor","props","element","resizeObserver","disconnect","configuration","Array","isArray","responsivenessRules","length","ResizeObserver","entries","entry","onSizeChange","contentRect","observe","onRef","elementWidth","width","elementHeight","height","responsiveClassNames","filter","min","max","map","range","className","setState","state","render"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;AAiCA,MAAMA,oBAAN,SAAmCC,KAAK,CAACC,SAAzC,CAAiE;AAC/DC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;;AADwB;;AAAA,mCASjBC,OAAD,IAA2B;AACjC,UAAI,KAAKC,cAAT,EAAyB;AACvB,aAAKA,cAAL,CAAoBC,UAApB;AACD;;AACD,UACEF,OAAO,IACP,KAAKD,KAAL,CAAWI,aADX,IAEAC,KAAK,CAACC,OAAN,CAAc,KAAKN,KAAL,CAAWI,aAAX,CAAyBG,mBAAvC,CAFA,IAGA,KAAKP,KAAL,CAAWI,aAAX,CAAyBG,mBAAzB,CAA6CC,MAA7C,GAAsD,CAJxD,EAKE;AACA,YAAI,CAAC,KAAKN,cAAV,EAA0B;AACxB,eAAKA,cAAL,GAAsB,IAAIO,+BAAJ,CAAmBC,OAAO,IAAI;AAAA,uDAC9BA,OAD8B;AAAA;;AAAA;AAClD,kEAA6B;AAAA,sBAAlBC,KAAkB;AAC3B,qBAAKC,YAAL,CAAkBD,KAAK,CAACE,WAAxB;AACA;;;;;;AAOD;AAViD;AAAA;AAAA;AAAA;AAAA;AAWnD,WAXqB,CAAtB,CADwB,CAaxB;AACD;;AACD,aAAKX,cAAL,CAAoBY,OAApB,CAA4Bb,OAA5B;AACD;;AACD,UAAI,KAAKD,KAAL,CAAWe,KAAf,EAAsB;AACpB,aAAKf,KAAL,CAAWe,KAAX,CAAiBd,OAAjB;AACD;AACF,KAvCyB;;AAAA,0CAyCVY,WAAD,IAAsD;AACnE,YAAMG,YAAY,GAAGH,WAAW,CAACI,KAAjC;AACA,YAAMC,aAAa,GAAGL,WAAW,CAACM,MAAlC;;AACA,UACEH,YAAY,GAAG,CAAf,IACAE,aAAa,GAAG,CADhB,IAEA,KAAKlB,KAAL,CAAWI,aAFX,IAGAC,KAAK,CAACC,OAAN,CAAc,KAAKN,KAAL,CAAWI,aAAX,CAAyBG,mBAAvC,CAJF,EAKE;AACA,cAAMa,oBAAoB,GAAG,KAAKpB,KAAL,CAAWI,aAAX,CAAyBG,mBAAzB,CAC1Bc,MAD0B,CACnB,CAAC;AAAEJ,UAAAA,KAAF;AAASE,UAAAA;AAAT,SAAD,KAAuB;AAC7B,cAAIF,KAAK,KAAMA,KAAK,CAACK,GAAN,IAAaN,YAAY,IAAIC,KAAK,CAACK,GAApC,IAA6CL,KAAK,CAACM,GAAN,IAAaP,YAAY,GAAGC,KAAK,CAACM,GAApF,CAAT,EAAoG;AAClG,mBAAO,KAAP;AACD;;AACD,cAAIJ,MAAM,KAAMA,MAAM,CAACG,GAAP,IAAcJ,aAAa,IAAIC,MAAM,CAACG,GAAvC,IAAgDH,MAAM,CAACI,GAAP,IAAcL,aAAa,GAAGC,MAAM,CAACI,GAA1F,CAAV,EAA2G;AACzG,mBAAO,KAAP;AACD;;AACD,iBAAO,IAAP;AACD,SAT0B,EAU1BC,GAV0B,CAUtBC,KAAK,IAAIA,KAAK,CAACC,SAVO,CAA7B;AAWA,aAAKC,QAAL,CAAc;AAAEP,UAAAA;AAAF,SAAd;AACD;AACF,KA/DyB;;AAExB,SAAKQ,KAAL,GAAa;AACXR,MAAAA,oBAAoB,EAAE;AADX,KAAb;AAGD;;AA4DDS,EAAAA,MAAM,GAAG;AACP,WAAO,KAAK7B,KAAL,CAAW6B,MAAX,CAAkB;AAAEd,MAAAA,KAAK,EAAE,KAAKA,KAAd;AAAqBK,MAAAA,oBAAoB,EAAE,KAAKQ,KAAL,CAAWR;AAAtD,KAAlB,CAAP;AACD;;AApE8D;;eAuElDxB,oB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport type ResponsiveRange = {\n  className: string,\n  width?: {\n    min?: ?number,\n    max?: ?number\n  },\n  height?: {\n    min?: ?number,\n    max?: ?number\n  }\n};\n\nexport type ResponsiveRanges = Array<ResponsiveRange>;\n\ntype RenderParameters = {\n  onRef: (?HTMLElement) => void,\n  responsiveClassNames: Array<string>\n};\n\ntype Props = {\n  configuration?: {\n    responsivenessRules?: ?ResponsiveRanges\n  },\n  onRef?: (?HTMLElement) => void,\n  render: RenderParameters => React.Node\n};\n\ntype State = {\n  responsiveClassNames: Array<string>\n};\n\nclass ResponsiveClassNames extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      responsiveClassNames: []\n    };\n  }\n\n  resizeObserver: ResizeObserver;\n\n  onRef = (element: ?HTMLElement) => {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n    if (\n      element &&\n      this.props.configuration &&\n      Array.isArray(this.props.configuration.responsivenessRules) &&\n      this.props.configuration.responsivenessRules.length > 0\n    ) {\n      if (!this.resizeObserver) {\n        this.resizeObserver = new ResizeObserver(entries => {\n          for (const entry of entries) {\n            this.onSizeChange(entry.contentRect);\n            /*\n            const {left, top, width, height} = entry.contentRect;\n\n            console.log('Element:', entry.target);\n            console.log(`Element's size: ${ width }px x ${ height }px`);\n            console.log(`Element's paddings: ${ top }px ; ${ left }px`);\n            */\n          }\n        });\n        // console.log('ResizeObserver instantiated.', this.resizeObserver);\n      }\n      this.resizeObserver.observe(element);\n    }\n    if (this.props.onRef) {\n      this.props.onRef(element);\n    }\n  };\n\n  onSizeChange = (contentRect: { +width: number, +height: number }) => {\n    const elementWidth = contentRect.width;\n    const elementHeight = contentRect.height;\n    if (\n      elementWidth > 0 &&\n      elementHeight > 0 &&\n      this.props.configuration &&\n      Array.isArray(this.props.configuration.responsivenessRules)\n    ) {\n      const responsiveClassNames = this.props.configuration.responsivenessRules\n        .filter(({ width, height }) => {\n          if (width && ((width.min && elementWidth <= width.min) || (width.max && elementWidth > width.max))) {\n            return false;\n          }\n          if (height && ((height.min && elementHeight <= height.min) || (height.max && elementHeight > height.max))) {\n            return false;\n          }\n          return true;\n        })\n        .map(range => range.className);\n      this.setState({ responsiveClassNames });\n    }\n  };\n\n  render() {\n    return this.props.render({ onRef: this.onRef, responsiveClassNames: this.state.responsiveClassNames });\n  }\n}\n\nexport default ResponsiveClassNames;\n"],"file":"ResponsiveClassNames.js"}