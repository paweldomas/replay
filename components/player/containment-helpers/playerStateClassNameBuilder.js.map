{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/playerStateClassNameBuilder.js"],"names":["volumeMappings","isStreamOpen","playState","playerStateClassNameBuilder","isPaused","isSeeking","isBuffering","isMuted","volume","isAtLiveEdge","playMode","error","isUserActive","isFullscreen","classNameDefinitions","classNamePrefix","extraClassNames","cd","resultingClassNames","push","isPlaying","isStarting","isOnDemand","isLive","isDvrEnabled","volumePrefix","i","Math","min","floor","length","isUserInactive","isFailed","concat"],"mappings":"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","sourcesContent":["// @flow\n\nimport { type PlayState, type PlayMode } from '../VideoStreamer/types';\nimport { prefixClassNames } from '../../common';\n\nexport type ClassNameKeys =\n  | 'isBuffering'\n  | 'isStarting'\n  | 'isPlaying'\n  | 'isPaused'\n  | 'isSeeking'\n  | 'isMuted'\n  | 'isAtLiveEdge'\n  | 'isLive'\n  | 'isOnDemand'\n  | 'isDvrEnabled'\n  | 'isFailed'\n  | 'isFullscreen'\n  | 'isUserActive'\n  | 'isUserInactive'\n  | 'volumePrefix';\n\nexport type RecognizedPlayerStateProperties = {\n  isPaused?: boolean,\n  isSeeking?: boolean,\n  isBuffering?: boolean,\n  isMuted?: boolean,\n  volume?: number,\n  isAtLiveEdge?: boolean,\n  playState?: PlayState,\n  playMode?: PlayMode,\n  error?: any,\n  isUserActive?: boolean,\n  isFullscreen?: boolean\n};\n\nconst volumeMappings = ['low', 'medium', 'high'];\n\nconst isStreamOpen = (playState?: PlayState) => playState && playState !== 'inactive' && playState !== 'starting';\n\nconst playerStateClassNameBuilder = (\n  {\n    isPaused,\n    isSeeking,\n    isBuffering,\n    isMuted,\n    volume,\n    isAtLiveEdge,\n    playState,\n    playMode,\n    error,\n    isUserActive,\n    isFullscreen\n  }: RecognizedPlayerStateProperties,\n  classNameDefinitions: { [ClassNameKeys]: string },\n  classNamePrefix?: string,\n  extraClassNames?: Array<string> = []\n): string => {\n  const cd = classNameDefinitions || {};\n  const resultingClassNames = [];\n\n  // Is paused, playing\n  if (isStreamOpen(playState) && isPaused != null) {\n    if (isPaused) {\n      resultingClassNames.push(cd.isPaused);\n    } else {\n      resultingClassNames.push(cd.isPlaying);\n    }\n  }\n  if (isBuffering) {\n    resultingClassNames.push(cd.isBuffering);\n  }\n  if (isSeeking) {\n    resultingClassNames.push(cd.isSeeking);\n  }\n  if (isMuted) {\n    resultingClassNames.push(cd.isMuted);\n  }\n  if (isAtLiveEdge) {\n    resultingClassNames.push(cd.isAtLiveEdge);\n  }\n  if (playState === 'starting') {\n    resultingClassNames.push(cd.isStarting);\n  }\n  if (playMode === 'ondemand') {\n    resultingClassNames.push(cd.isOnDemand);\n  } else if (playMode === 'live') {\n    resultingClassNames.push(cd.isLive);\n  } else if (playMode === 'livedvr') {\n    resultingClassNames.push(cd.isLive);\n    resultingClassNames.push(cd.isDvrEnabled);\n  }\n  if (volume != null && cd.volumePrefix != null) {\n    const i = Math.min(Math.floor(volume * volumeMappings.length), volumeMappings.length - 1);\n    resultingClassNames.push(cd.volumePrefix + volumeMappings[i]);\n  }\n  if (isFullscreen) {\n    resultingClassNames.push(cd.isFullscreen);\n  }\n  if (isUserActive != null) {\n    if (isUserActive) {\n      resultingClassNames.push(cd.isUserActive);\n    } else {\n      resultingClassNames.push(cd.isUserInactive);\n    }\n  }\n  if (error) {\n    resultingClassNames.push(cd.isFailed);\n  }\n  return prefixClassNames(classNamePrefix, ...resultingClassNames.concat(extraClassNames));\n};\n\nexport default playerStateClassNameBuilder;\n"],"file":"playerStateClassNameBuilder.js"}