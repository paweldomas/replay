{"version":3,"sources":["../../../src/replay/components/player/settings-helpers/PreferredSettingsApplicator.js"],"names":["noop","getTrackFromLanguageAndKind","language","kind","tracks","ignorableLength","Array","isArray","length","filter","track","getTrackToSelect","preferredLanguage","preferredKind","prevTracks","nextTracks","ignorableTrackListLength","mergePreferredSettings","configuration","programmaticSettings","localStorage","sessionStorage","userSettingsConfig","userSettings","storageKey","localSettings","sessionSettings","JSON","parse","getItem","e","hasPrecedence","getPropsToBeUpdated","prevPlayState","nextPlayState","prevAudioTracks","prevTextTracks","nextAudioTracks","nextTextTracks","preferredSettings","updates","volume","isMuted","audioTrackToSelect","audioTrackLanguage","audioTrackKind","selectedAudioTrack","textTrackToSelect","textTrackLanguage","textTrackKind","selectedTextTrack","onPropsChanged","prevProps","nextProps","playState","audioTracks","textTracks","setProperties","mergedSettings","propsToBeUpdated","Object","keys","getPreferredSettingsApplicator","window","PreferredSettingsApplicator","React","Component","componentDidMount","props","componentDidUpdate","render"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport connectControl from '../PlayerController/connectControl';\n\nimport type { AvailableTrack, PlayState } from '../VideoStreamer/types';\nimport type { StreamStateKeysForObservation, SetPropertiesMethod } from '../PlayerController/ControllerContext';\nimport type { PreferredSettings } from '../../../default-player/types';\n\ntype SettingsStorageKind = 'none' | 'local' | 'session';\n\nexport type UserSettingsConfiguration = {\n  userSettings?: {\n    hasPrecedence?: ?boolean,\n    storageKey?: string,\n    settingsStoragePolicy: {\n      volume?: ?SettingsStorageKind,\n      isMuted?: ?SettingsStorageKind,\n      textTrackLanguage?: ?SettingsStorageKind,\n      textTrackKind?: ?SettingsStorageKind,\n      audioTrackLanguage?: ?SettingsStorageKind,\n      audioTrackKind?: ?SettingsStorageKind\n    }\n  }\n};\n\ntype Props = PreferredSettings & {\n  textTracks?: Array<AvailableTrack>,\n  audioTracks?: Array<AvailableTrack>,\n  playState?: PlayState,\n  setProperties: SetPropertiesMethod,\n  configuration?: ?UserSettingsConfiguration\n};\n\nconst noop = () => {};\n\nconst getTrackFromLanguageAndKind = (\n  language: ?string,\n  kind: ?string,\n  tracks: ?Array<AvailableTrack>,\n  ignorableLength: number\n): ?AvailableTrack => {\n  if (Array.isArray(tracks) && tracks.length > ignorableLength) {\n    return (\n      tracks.filter(track => track.language === language && track.kind === kind)[0] ||\n      tracks.filter(track => track.language === language)[0] ||\n      tracks.filter(track => track.kind === kind)[0]\n    );\n  }\n};\n\nconst getTrackToSelect = (\n  preferredLanguage: ?string,\n  preferredKind: ?string,\n  prevTracks: ?Array<AvailableTrack>,\n  nextTracks: ?Array<AvailableTrack>,\n  ignorableTrackListLength: number\n) => {\n  if (prevTracks !== nextTracks && Array.isArray(nextTracks) && nextTracks.length > 0) {\n    return getTrackFromLanguageAndKind(preferredLanguage, preferredKind, nextTracks, ignorableTrackListLength);\n  }\n};\n\nconst mergePreferredSettings = (\n  configuration: ?UserSettingsConfiguration,\n  programmaticSettings: PreferredSettings,\n  localStorage: Storage,\n  sessionStorage: Storage\n): PreferredSettings => {\n  const userSettingsConfig = configuration && configuration.userSettings;\n  const storageKey = userSettingsConfig && userSettingsConfig.storageKey;\n  if (userSettingsConfig && storageKey) {\n    let localSettings = {};\n    let sessionSettings = {};\n    try {\n      sessionSettings = JSON.parse(sessionStorage.getItem(storageKey) || '{}');\n    } catch (e) {}\n    try {\n      localSettings = JSON.parse(localStorage.getItem(storageKey) || '{}');\n    } catch (e) {}\n    if (userSettingsConfig.hasPrecedence) {\n      return {\n        ...programmaticSettings,\n        ...localSettings,\n        ...sessionSettings\n      };\n    } else {\n      return {\n        ...localSettings,\n        ...sessionSettings,\n        ...programmaticSettings\n      };\n    }\n  } else {\n    return programmaticSettings;\n  }\n};\n\nconst getPropsToBeUpdated = (\n  prevPlayState: ?PlayState,\n  nextPlayState: ?PlayState,\n  prevAudioTracks: ?Array<AvailableTrack>,\n  prevTextTracks: ?Array<AvailableTrack>,\n  nextAudioTracks: ?Array<AvailableTrack>,\n  nextTextTracks: ?Array<AvailableTrack>,\n  preferredSettings: PreferredSettings\n) => {\n  const updates = {};\n\n  if (nextPlayState !== prevPlayState && nextPlayState === 'starting') {\n    if (preferredSettings.volume != null) {\n      updates.volume = preferredSettings.volume;\n    }\n    if (preferredSettings.isMuted != null) {\n      updates.isMuted = preferredSettings.isMuted;\n    }\n  }\n\n  const audioTrackToSelect = getTrackToSelect(\n    preferredSettings.audioTrackLanguage,\n    preferredSettings.audioTrackKind,\n    prevAudioTracks,\n    nextAudioTracks,\n    1\n  );\n  if (audioTrackToSelect) {\n    updates.selectedAudioTrack = audioTrackToSelect;\n  }\n\n  const textTrackToSelect = getTrackToSelect(\n    preferredSettings.textTrackLanguage,\n    preferredSettings.textTrackKind,\n    prevTextTracks,\n    nextTextTracks,\n    0\n  );\n  if (textTrackToSelect) {\n    updates.selectedTextTrack = textTrackToSelect;\n  }\n\n  return updates;\n};\n\nconst onPropsChanged = (prevProps: Props, nextProps: Props, localStorage: Storage, sessionStorage: Storage) => {\n  const {\n    configuration,\n    playState,\n    audioTracks,\n    textTracks,\n    volume,\n    isMuted,\n    textTrackLanguage,\n    textTrackKind,\n    audioTrackLanguage,\n    audioTrackKind,\n    setProperties\n  } = nextProps;\n\n  const programmaticSettings = {};\n  if (volume != null) {\n    programmaticSettings.volume = volume;\n  }\n  if (isMuted != null) {\n    programmaticSettings.isMuted = isMuted;\n  }\n  if (textTrackLanguage != null) {\n    programmaticSettings.textTrackLanguage = textTrackLanguage;\n  }\n  if (textTrackKind != null) {\n    programmaticSettings.textTrackKind = textTrackKind;\n  }\n  if (audioTrackLanguage != null) {\n    programmaticSettings.audioTrackLanguage = audioTrackLanguage;\n  }\n  if (audioTrackKind != null) {\n    programmaticSettings.audioTrackKind = audioTrackKind;\n  }\n\n  const mergedSettings = mergePreferredSettings(configuration, programmaticSettings, localStorage, sessionStorage);\n  const propsToBeUpdated = getPropsToBeUpdated(\n    prevProps.playState,\n    playState,\n    prevProps.audioTracks,\n    prevProps.textTracks,\n    audioTracks,\n    textTracks,\n    mergedSettings\n  );\n\n  if (Object.keys(propsToBeUpdated).length > 0) {\n    setProperties(propsToBeUpdated);\n  }\n};\n\n// Testable version:\nexport const getPreferredSettingsApplicator = (\n  localStorage: Storage = window.localStorage,\n  sessionStorage: Storage = window.sessionStorage\n) =>\n  class PreferredSettingsApplicator extends React.Component<Props> {\n    static streamStateKeysForObservation: StreamStateKeysForObservation = ['playState', 'textTracks', 'audioTracks'];\n    componentDidMount() {\n      onPropsChanged({ setProperties: noop }, this.props, localStorage, sessionStorage);\n    }\n    componentDidUpdate(prevProps: Props) {\n      onPropsChanged(prevProps, this.props, localStorage, sessionStorage);\n    }\n    render() {\n      return null;\n    }\n  };\n\nconst PreferredSettingsApplicator = connectControl(getPreferredSettingsApplicator());\n\nexport default PreferredSettingsApplicator;\n"],"file":"PreferredSettingsApplicator.js"}