{"version":3,"sources":["../../../src/replay/components/player/settings-helpers/settingsStorage.js"],"names":["isEnabled","configuration","userSettings","storageKey","settingsStoragePolicy","getStoredSettings","storage","key","storedStr","getItem","JSON","parse","e","withStorage","storagePolicy","sessionSettings","localSettings","callback","withSettingsStorage","Component","localStorage","window","sessionStorage","SettingsStorage","React","userSetProps","props","setProperties","userSettingsConfig","settings","isMuted","volume","selectedTextTrack","language","textTrackLanguage","kind","textTrackKind","selectedAudioTrack","audioTrackLanguage","audioTrackKind","Object","keys","length","setItem","stringify","render","remainder","streamStateKeysForObservation","displayName","name"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { PlaybackProps } from '../VideoStreamer/types';\nimport type { StreamStateKeysForObservation } from '../PlayerController/ControllerContext';\nimport type { UserSettingsConfiguration } from './PreferredSettingsApplicator';\nimport type { PreferredSettings } from '../../../default-player/types';\n\ntype SettingsStorageProps<T: { setProperties?: any => void }> = T & {\n  configuration?: ?UserSettingsConfiguration\n};\n\nconst isEnabled = (configuration: ?UserSettingsConfiguration) => {\n  return (\n    configuration &&\n    configuration.userSettings &&\n    configuration.userSettings.storageKey &&\n    configuration.userSettings.settingsStoragePolicy\n  );\n};\n\nconst getStoredSettings = (storage: Storage, key: string): PreferredSettings => {\n  try {\n    const storedStr = storage.getItem(key);\n    if (storedStr) {\n      return JSON.parse(storedStr);\n    } else {\n      return {};\n    }\n  } catch (e) {\n    return {};\n  }\n};\n\nconst withStorage = (\n  storagePolicy,\n  key: string,\n  sessionSettings: PreferredSettings,\n  localSettings: PreferredSettings,\n  callback: PreferredSettings => any\n) => {\n  switch (storagePolicy[key]) {\n    case 'local':\n      callback(localSettings);\n      return;\n    case 'session':\n      callback(sessionSettings);\n      return;\n    default:\n      return;\n  }\n};\n\nconst withSettingsStorage = <P: { setProperties?: any => void }>(\n  Component: React.ComponentType<P>,\n  localStorage: Storage = window.localStorage,\n  sessionStorage: Storage = window.sessionStorage\n) => {\n  class SettingsStorage extends React.Component<SettingsStorageProps<P>> {\n    // $FlowFixMe What's the best practices for extending component types with static properties?\n    static streamStateKeysForObservation: StreamStateKeysForObservation = Component.streamStateKeysForObservation;\n\n    setProperties = (userSetProps: PlaybackProps) => {\n      if (this.props.setProperties) {\n        this.props.setProperties(userSetProps);\n      }\n      const userSettingsConfig = this.props.configuration && this.props.configuration.userSettings;\n      if (userSettingsConfig) {\n        const storageKey = userSettingsConfig.storageKey;\n        const storagePolicy = userSettingsConfig.settingsStoragePolicy;\n        if (storageKey && storagePolicy) {\n          const localSettings = getStoredSettings(localStorage, storageKey);\n          const sessionSettings = getStoredSettings(sessionStorage, storageKey);\n          if ('isMuted' in userSetProps) {\n            withStorage(\n              storagePolicy,\n              'isMuted',\n              sessionSettings,\n              localSettings,\n              settings => (settings.isMuted = !!userSetProps.isMuted)\n            );\n          }\n          if (typeof userSetProps.volume === 'number') {\n            withStorage(\n              storagePolicy,\n              'volume',\n              sessionSettings,\n              localSettings,\n              settings => (settings.volume = userSetProps.volume)\n            );\n          }\n          if ('selectedTextTrack' in userSetProps) {\n            withStorage(storagePolicy, 'textTrackLanguage', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedTextTrack) {\n                if (userSetProps.selectedTextTrack.language) {\n                  settings.textTrackLanguage = userSetProps.selectedTextTrack.language;\n                }\n              } else {\n                // Subtitles were turned off.\n                delete settings.textTrackLanguage;\n              }\n            });\n            withStorage(storagePolicy, 'textTrackKind', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedTextTrack) {\n                if (userSetProps.selectedTextTrack.kind) {\n                  settings.textTrackKind = userSetProps.selectedTextTrack.kind;\n                }\n              } else {\n                // Subtitles were turned off.\n                delete settings.textTrackKind;\n              }\n            });\n          }\n          if ('selectedAudioTrack' in userSetProps) {\n            withStorage(storagePolicy, 'audioTrackLanguage', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedAudioTrack && userSetProps.selectedAudioTrack.language) {\n                settings.audioTrackLanguage = userSetProps.selectedAudioTrack.language;\n              }\n            });\n            withStorage(storagePolicy, 'audioTrackKind', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedAudioTrack && userSetProps.selectedAudioTrack.kind) {\n                settings.audioTrackKind = userSetProps.selectedAudioTrack.kind;\n              }\n            });\n          }\n          if (Object.keys(localSettings).length > 0) {\n            try {\n              localStorage.setItem(storageKey, JSON.stringify(localSettings));\n            } catch (e) {}\n          }\n          if (Object.keys(sessionSettings).length > 0) {\n            try {\n              sessionStorage.setItem(storageKey, JSON.stringify(sessionSettings));\n            } catch (e) {}\n          }\n        }\n      }\n    };\n\n    render() {\n      const { configuration, ...remainder } = this.props;\n      if (isEnabled(this.props.configuration)) {\n        return <Component {...remainder} setProperties={this.setProperties} />;\n      } else {\n        return <Component {...remainder} />;\n      }\n    }\n  }\n  SettingsStorage.displayName = 'SettingsStorage' + (Component.displayName || Component.name);\n  return SettingsStorage;\n};\n\nexport default withSettingsStorage;\n"],"file":"settingsStorage.js"}