{"version":3,"sources":["../src/replay/default-player/playerUI.js"],"names":["AudioSelector","SettingsStorage","SubtitlesSelector","Volume","getSkipBackOffset","conf","controls","skipButtonOffset","getLiveDisplayMode","liveDisplayMode","getQSStrategy","qualitySelectionStrategy","merge","strings","graphics","merged","Object","entries","forEach","control","props","getPlayerUIRenderer","classNamePrefix","defaultClassNamePrefix","u","renderPlayerUI","configuration","externalProps","prefix","includedControlsList","includeControls","fullscreenState","exitButton","onExit","playbackMonitor","playPauseButton","skipButton","timeline","timeDisplay","gotoLiveButton","volume","audioSelector","subtitlesSelector","qualitySelector","pipButton","airPlayButton","fullscreenButton","bufferingIndicator","initialPlaybackProps"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { RenderMethod } from '../components/player/PlayerController/PlayerController';\nimport type {\n  GraphicAndStringResources,\n  GraphicResources,\n  PlayerConfiguration,\n  StringResources,\n  UIResources\n} from './types';\nimport { defaultClassNamePrefix } from '../components/common';\n\n// Non-connected controls\nimport ControlsBar from '../components/controls/ControlsBar/ControlsBar';\nimport FullscreenButton from '../components/controls/FullscreenButton/FullscreenButton';\nimport ExitButton from '../components/controls/ExitButton/ExitButton';\n\n// Connected controls\nimport PlaybackMonitor from '../components/controls/PlaybackMonitor/PlaybackMonitor';\nimport {\n  BufferingIndicator,\n  GotoLiveButton,\n  PlayerUIContainer,\n  PlayPauseButton,\n  QualitySelector,\n  SettingsStorage,\n  SkipButton,\n  TimeDisplay,\n  TimelineInformation,\n  Timeline,\n  PipButton,\n  AirPlayButton\n} from '../components/player/PlayerController/connectedControls';\nimport { ControlledVideoStreamer } from '../components/player/PlayerController/connectControl';\nimport RenderIfEnabled from '../components/player/RenderIfEnabled';\nimport PreferredSettingsApplicator from '../components/player/settings-helpers/PreferredSettingsApplicator';\n\nconst { AudioSelector, SubtitlesSelector, Volume } = SettingsStorage;\nconst getSkipBackOffset = (conf: PlayerConfiguration) => conf && conf.controls && conf.controls.skipButtonOffset;\nconst getLiveDisplayMode = (conf: PlayerConfiguration) => conf && conf.controls && conf.controls.liveDisplayMode;\nconst getQSStrategy = (conf: PlayerConfiguration) => conf && conf.controls && conf.controls.qualitySelectionStrategy;\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst merge = (\n  strings: UIResources<StringResources>,\n  graphics: UIResources<GraphicResources>\n): UIResources<GraphicAndStringResources> => {\n  const merged = {};\n  Object.entries(strings).forEach(([control, props]) => {\n    merged[control] = { ...merged[control], ...props };\n  });\n  Object.entries(graphics).forEach(([control, props]) => {\n    merged[control] = { ...merged[control], ...props };\n  });\n  return merged;\n};\n\n// The following method is assembling all controls into the player UI. Create a copy for assembling custom player UIs.\n\nconst getPlayerUIRenderer = (\n  graphics: UIResources<GraphicResources>,\n  strings: UIResources<StringResources>,\n  classNamePrefix?: string = defaultClassNamePrefix\n) => {\n  const u = merge(strings, graphics);\n  const renderPlayerUI: RenderMethod = ({ configuration, externalProps }) => {\n    const prefix = { classNamePrefix: (configuration && configuration.classNamePrefix) || classNamePrefix };\n    const includedControlsList = configuration.controls && configuration.controls.includeControls;\n    return (\n      <PlayerUIContainer\n        configuration={configuration}\n        {...prefix}\n        render={({ fullscreenState }) => (\n          <>\n            <ControlledVideoStreamer {...prefix} />\n            <RenderIfEnabled configuration={includedControlsList}>\n              <ExitButton {...u.exitButton} {...prefix} onClick={externalProps && externalProps.onExit} />\n              <PlaybackMonitor {...u.playbackMonitor} configuration={configuration} />\n            </RenderIfEnabled>\n            <ControlsBar {...prefix}>\n              <RenderIfEnabled configuration={includedControlsList}>\n                <PlayPauseButton {...u.playPauseButton} {...prefix} />\n                <SkipButton {...u.skipButton} {...prefix} offset={getSkipBackOffset(configuration)} />\n                <Timeline {...u.timeline} {...prefix}>\n                  <TimelineInformation {...prefix} />\n                </Timeline>\n                <TimeDisplay {...u.timeDisplay} {...prefix} liveDisplayMode={getLiveDisplayMode(configuration)} />\n                <GotoLiveButton {...u.gotoLiveButton} {...prefix} />\n                <Volume {...u.volume} {...prefix} configuration={configuration} />\n                <AudioSelector {...u.audioSelector} {...prefix} configuration={configuration} />\n                <SubtitlesSelector {...u.subtitlesSelector} {...prefix} configuration={configuration} />\n                <QualitySelector {...u.qualitySelector} {...prefix} selectionStrategy={getQSStrategy(configuration)} />\n                <PipButton {...u.pipButton} {...prefix} />\n                <AirPlayButton {...u.airPlayButton} {...prefix} />\n                <FullscreenButton {...u.fullscreenButton} {...prefix} {...fullscreenState} />\n              </RenderIfEnabled>\n            </ControlsBar>\n            <RenderIfEnabled configuration={includedControlsList}>\n              <BufferingIndicator {...u.bufferingIndicator} {...prefix} />\n            </RenderIfEnabled>\n            <PreferredSettingsApplicator configuration={configuration} {...externalProps.initialPlaybackProps} />\n          </>\n        )}\n      />\n    );\n  };\n  return renderPlayerUI;\n};\n\nexport default getPlayerUIRenderer;\n"],"file":"playerUI.js"}