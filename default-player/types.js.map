{"version":3,"sources":["../src/replay/default-player/types.js"],"names":[],"mappings":";;AACA","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { InteractionDetectorConfiguration } from '../components/player/containment-helpers/InteractionDetector';\nimport type { KeyboardShortcutsConfiguration } from '../components/player/containment-helpers/KeyboardShortcuts';\nimport type {\n  InitialPlaybackProps,\n  PlaybackSource,\n  SourceTrack,\n  VideoStreamerConfiguration,\n  VideoStreamState\n} from '../components/player/VideoStreamer/types';\nimport type { QualitySelectionStrategy } from '../components/controls/QualitySelector/QualitySelector';\nimport type { LiveDisplayMode } from '../components/controls/TimeDisplay/TimeDisplay';\nimport type { UserSettingsConfiguration } from '../components/player/settings-helpers/PreferredSettingsApplicator';\nimport type { PlaybackActions } from '../components/player/PlayerController/PlayerController';\nimport type { ResponsiveRanges } from '../components/player/containment-helpers/ResponsiveClassNames';\nimport type { PlaybackMonitorConfiguration } from '../components/controls/PlaybackMonitor/PlaybackMonitor';\n\nexport type ControlNames =\n  | 'airPlayButton'\n  | 'audioSelector'\n  | 'bufferingIndicator'\n  | 'exitButton'\n  | 'fullscreenButton'\n  | 'gotoLiveButton'\n  | 'pipButton'\n  | 'playbackMonitor'\n  | 'playPauseButton'\n  | 'qualitySelector'\n  | 'skipButton'\n  | 'subtitlesSelector'\n  | 'timeDisplay'\n  | 'timeline'\n  | 'volume';\n\n// Some properties are nullable because the null value deletes the base configuration, and this should be allowed.\n\nexport type PlayerConfiguration = {\n  videoStreamer?: ?VideoStreamerConfiguration,\n  interactionDetector?: ?InteractionDetectorConfiguration,\n  keyboardShortcuts?: ?KeyboardShortcutsConfiguration,\n  userSettings?: ?UserSettingsConfiguration,\n  responsivenessRules?: ?ResponsiveRanges,\n  playbackMonitor?: PlaybackMonitorConfiguration,\n  classNamePrefix?: ?string,\n  aspectRatio?: ?{\n    horizontal: number,\n    vertical: number\n  },\n  controls?: ?{\n    includeControls?: ?Array<ControlNames>,\n    skipButtonOffset?: number,\n    liveDisplayMode?: LiveDisplayMode,\n    qualitySelectionStrategy?: QualitySelectionStrategy\n  }\n};\n\nexport type GraphicResources = { [string]: React.Node };\nexport type StringResources = { [string]: string };\nexport type GraphicAndStringResources = { [string]: React.Node | string };\n\nexport type UIResources<T> = {\n  playPauseButton?: T,\n  skipButton?: T,\n  timeline?: T,\n  timeDisplay?: T,\n  gotoLiveButton?: T,\n  volume?: T,\n  audioSelector?: T,\n  subtitlesSelector?: T,\n  qualitySelector?: T,\n  fullscreenButton?: T,\n  pipButton?: T,\n  airPlayButton?: T,\n  bufferingIndicator?: T,\n  playbackMonitor?: T,\n  exitButton?: T\n};\n\nexport type PreferredSettings = {\n  volume?: ?number,\n  isMuted?: ?boolean,\n  textTrackLanguage?: ?string,\n  textTrackKind?: ?string,\n  audioTrackLanguage?: ?string,\n  audioTrackKind?: ?string\n};\n\nexport type ReplayProps = {\n  source?: ?PlaybackSource,\n  textTracks?: ?Array<SourceTrack>,\n  options?: PlayerConfiguration,\n  onExit?: () => void,\n  onError?: any => void,\n  onPlaybackActionsReady?: PlaybackActions => void,\n  onStreamStateChange?: VideoStreamState => void,\n  children?: React.Element<any>,\n  initialPlaybackProps?: InitialPlaybackProps,\n  preferredSettings?: PreferredSettings\n};\n"],"file":"types.js"}