{"version":3,"sources":["src/replay/playerComposer.js"],"names":["defaultVideoStreamerResolver","Component","children","source","textTracks","React","cloneElement","composePlayer","name","videoStreamerComponent","graphics","strings","uiRenderMethod","resolveVideoStreamerMethod","classNamePrefix","defaultClassNamePrefix","configuration","baseConfiguration","version","replayVersion","renderUI","Error","ComposedPlayer","options","onPlaybackActionsReady","onStreamStateChange","onExit","onError","initialPlaybackProps","externalProps","displayName"],"mappings":";;;;;;;AACA;;AAKA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAsBA;AAEA,MAAMA,4BAAwD,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8BC,UAA9B,KAC/DF,QAAQ,GACNG,KAAK,CAACC,YAAN,CAAmBJ,QAAnB,EAA6B;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAA7B,CADM,gBAGN,oBAAC,2BAAD;AAAoB,EAAA,MAAM,EAAED,MAA5B;AAAoC,EAAA,UAAU,EAAEC;AAAhD,EAJJ;;AAOA,MAAMG,aAAa,GAAG,CAAC;AACrBC,EAAAA,IADqB;AAErBC,EAAAA,sBAFqB;AAGrBC,EAAAA,QAHqB;AAIrBC,EAAAA,OAJqB;AAKrBC,EAAAA,cALqB;AAMrBC,EAAAA,0BAA0B,GAAGb,4BANR;AAOrBc,EAAAA,eAAe,GAAGC,8BAPG;AAQrBC,EAAAA,aAAa,GAAGC,oCARK;AASrBC,EAAAA,OAAO,GAAGC;AATW,CAAD,KAUiC;AACrD,QAAMC,QAAQ,GAAGR,cAAc,IAAKF,QAAQ,IAAIC,OAAZ,IAAuB,uBAAoBD,QAApB,EAA8BC,OAA9B,EAAuCG,eAAvC,CAA3D;;AACA,MAAI,CAACM,QAAL,EAAe;AACb,UAAM,IAAIC,KAAJ,CACJ,yFACE,+EAFE,CAAN;AAID;;AAED,QAAMC,cAAc,GAAG,UAWJ;AAAA,QAVjBnB,MAUiB,QAVjBA,MAUiB;AAAA,QATjBC,UASiB,QATjBA,UASiB;AAAA,QARjBmB,OAQiB,QARjBA,OAQiB;AAAA,QAPjBC,sBAOiB,QAPjBA,sBAOiB;AAAA,QANjBC,mBAMiB,QANjBA,mBAMiB;AAAA,QALjBC,MAKiB,QALjBA,MAKiB;AAAA,QAJjBC,OAIiB,QAJjBA,OAIiB;AAAA,QAHjBC,oBAGiB,QAHjBA,oBAGiB;AAAA,QAFjB1B,QAEiB,QAFjBA,QAEiB;AAAA,QADd2B,aACc;;AACjB,wBACE,oBAAC,yBAAD;AACE,MAAA,MAAM,EAAET,QADV;AAEE,MAAA,aAAa,EAAEJ,aAFjB;AAGE,MAAA,OAAO,EAAEO,OAHX;AAIE,MAAA,eAAe,EAAEI,OAJnB;AAKE,MAAA,sBAAsB,EAAEH,sBAL1B;AAME,MAAA,mBAAmB,EAAEC,mBANvB;AAOE,MAAA,oBAAoB,EAAEG,oBAPxB;AAQE,MAAA,aAAa,oBAAOC,aAAP;AAAsBH,QAAAA,MAAtB;AAA8BE,QAAAA;AAA9B;AARf,OASGf,0BAA0B,CAACJ,sBAAD,EAAyBP,QAAzB,EAAmCC,MAAnC,EAA2CC,UAA3C,CAA1B,IAAoF,IATvF,CADF;AAaD,GAzBD;;AA0BA,MAAII,IAAJ,EAAU;AACRc,IAAAA,cAAc,CAACQ,WAAf,GAA6BtB,IAA7B;AACD;;AACDc,EAAAA,cAAc,CAACJ,OAAf,GAAyBA,OAAzB;AACA,SAAOI,cAAP;AACD,CAlDD;;eAoDef,a","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport type { PlaybackSource, SourceTrack, VideoStreamerProps } from './components/player/VideoStreamer/types';\nimport type { RenderMethod } from './components/player/PlayerController/PlayerController';\nimport type { ReplayProps } from './default-player/types';\nimport PlayerController from './components/player/PlayerController/PlayerController';\nimport { baseConfiguration } from './default-player/baseConfiguration';\nimport type { GraphicResources, StringResources, UIResources } from './default-player/types';\nimport getPlayerUIRenderer from './default-player/playerUI';\nimport { defaultClassNamePrefix } from './components/common';\nimport replayVersion from './version';\nimport BasicVideoStreamer from './components/player/VideoStreamer/BasicVideoStreamer/BasicVideoStreamer';\n\nexport type ResolveVideoStreamerMethod = (\n  Component: ?React.ComponentType<VideoStreamerProps>,\n  children: ?React.Element<any>,\n  source?: ?PlaybackSource,\n  textTracks?: ?Array<SourceTrack>\n) => ?React.Element<any>;\n\ntype Customization = {\n  name?: string,\n  configuration?: any,\n  graphics?: UIResources<GraphicResources>,\n  strings?: UIResources<StringResources>,\n  classNamePrefix?: string,\n  version?: string,\n  uiRenderMethod?: RenderMethod,\n  resolveVideoStreamerMethod?: ResolveVideoStreamerMethod,\n  // future: styles: { [string]: any },\n  videoStreamerComponent?: React.ComponentType<VideoStreamerProps>\n};\n\n// In addition comes CSS.\n\nconst defaultVideoStreamerResolver: ResolveVideoStreamerMethod = (Component, children, source, textTracks) =>\n  children ? (\n    React.cloneElement(children, { source, textTracks })\n  ) : (\n    <BasicVideoStreamer source={source} textTracks={textTracks} />\n  );\n\nconst composePlayer = ({\n  name,\n  videoStreamerComponent,\n  graphics,\n  strings,\n  uiRenderMethod,\n  resolveVideoStreamerMethod = defaultVideoStreamerResolver,\n  classNamePrefix = defaultClassNamePrefix,\n  configuration = baseConfiguration,\n  version = replayVersion\n}: Customization): React.ComponentType<ReplayProps> => {\n  const renderUI = uiRenderMethod || (graphics && strings && getPlayerUIRenderer(graphics, strings, classNamePrefix));\n  if (!renderUI) {\n    throw new Error(\n      'Either a custom UI render method must be specified in the customization parameters, ' +\n        'or graphics and strings must be specified for the default player UI renderer.'\n    );\n  }\n\n  const ComposedPlayer = ({\n    source,\n    textTracks,\n    options,\n    onPlaybackActionsReady,\n    onStreamStateChange,\n    onExit,\n    onError,\n    initialPlaybackProps,\n    children,\n    ...externalProps\n  }: ReplayProps) => {\n    return (\n      <PlayerController\n        render={renderUI}\n        configuration={configuration}\n        options={options}\n        onStreamerError={onError}\n        onPlaybackActionsReady={onPlaybackActionsReady}\n        onStreamStateChange={onStreamStateChange}\n        initialPlaybackProps={initialPlaybackProps}\n        externalProps={{ ...externalProps, onExit, initialPlaybackProps }}>\n        {resolveVideoStreamerMethod(videoStreamerComponent, children, source, textTracks) || null}\n      </PlayerController>\n    );\n  };\n  if (name) {\n    ComposedPlayer.displayName = name;\n  }\n  ComposedPlayer.version = version;\n  return ComposedPlayer;\n};\n\nexport default composePlayer;\n"],"file":"playerComposer.js"}